/*
#############################################################################################
# Mass Effect 3 (Legendary Edition) (2.0.0.48602) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.53-MELE
# ========================================================================================= #
# File: Engine_classes.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/


#pragma once
#include <Windows.h>
#include <cstdio>
#include "../SdkInitializer.h"



#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Constants
# ========================================================================================= #
*/

#define CONST_TRACEFLAG_Bullet                                   1
#define CONST_TRACEFLAG_PhysicsVolumes                           2
#define CONST_TRACEFLAG_SkipMovers                               4
#define CONST_TRACEFLAG_Blocking                                 8
#define CONST_REP_RBLOCATION_ERROR_TOLERANCE_SQ                  16.0f
#define CONST_RB_Sleeping                                        0x02
#define CONST_RB_NeedsUpdate                                     0x01
#define CONST_RB_None                                            0x00
#define CONST_RBSTATE_ANGVELSCALE                                1000.0
#define CONST_RBSTATE_LINVELSCALE                                10.0
#define CONST_ACTORMAXSTEPHEIGHT                                 35.0
#define CONST_MINFLOORZ                                          0.7
#define CONST_SDPG_NumBits                                       3
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_MAX_ACTIVE_CAMERA_ANIMS                            8
#define CONST_MAXPOSITIONERRORSQUARED                            3.0
#define CONST_MAXNEARZEROVELOCITYSQUARED                         9.0
#define CONST_MAXVEHICLEPOSITIONERRORSQUARED                     900.0
#define CONST_CLIENTADJUSTUPDATECOST                             180.0
#define CONST_MAXCLIENTUPDATEINTERVAL                            0.25
#define CONST_BLOCKEDPATHCOST                                    10000000
#define CONST_INFINITE_PATH_COST                                 10000000
#define CONST_SKYNET_MULTIPLAYERMODE                             0x0100
#define CONST_SKYNET_SENDNUCLEUSTELEMETRY                        0x0080
#define CONST_SKYNET_SCRUBTEST                                   0x0040
#define CONST_SKYNET_AUTOFPS                                     0x0020
#define CONST_SKYNET_TEMP                                        0x0010
#define CONST_SKYNET_DISPLAYSESSION                              0x0008
#define CONST_SKYNET_VERBOSELOGGING                              0x0004
#define CONST_SKYNET_SILENTMODE                                  0x0002
#define CONST_SKYNET_HIGHRESPATHS                                0x0001
#define CONST_SkyNetCommonEvent_AREA_DETAILS                     12200
#define CONST_SkyNetCommonEvent_CHEATHOOK                        12100
#define CONST_SkyNetCommonEvent_SCREENSHOT                       12005
#define CONST_SkyNetCommonEvent_WARNING                          12002
#define CONST_SkyNetCommonEvent_ASSERT                           12001
#define CONST_SkyNetCommonEvent_CRASH                            12001
#define CONST_SkyNetCommonEvent_MOVE                             12000
#define CONST_SkyNetCommonEvent_AreaEntered                      8
#define CONST_SkyNetCommonEvent_AreaExited                       9
#define CONST_NULLCHARACTER                                      127
#define CONST_OcclusionCurveLookupTableSize                      256
#define CONST_MAX_INSTANCES_PER_CLASS                            5
#define CONST_PRIVATE_Protected                                  0x380
#define CONST_DEFAULT_SIZE_X                                     1024
#define CONST_DEFAULT_SIZE_Y                                     768
#define CONST_SCENE_DATASTORE_TAG                                'SceneData'
#define CONST_MAX_SUPPORTED_GAMEPADS                             4
#define CONST_PRIVATE_KeepFocusedState                           0x800
#define CONST_PRIVATE_PropagateState                             0x400
#define CONST_PRIVATE_EditorNoReparent                           0x200
#define CONST_PRIVATE_EditorNoRename                             0x100
#define CONST_PRIVATE_EditorNoDelete                             0x080
#define CONST_PRIVATE_TreeHiddenRecursive                        0x042
#define CONST_PRIVATE_ManagedStyle                               0x020
#define CONST_PRIVATE_NotRotatable                               0x010
#define CONST_PRIVATE_NotDockable                                0x008
#define CONST_PRIVATE_NotFocusable                               0x004
#define CONST_PRIVATE_TreeHidden                                 0x002
#define CONST_PRIVATE_NotEditorSelectable                        0x001
#define CONST_DEFAULT_SCENE_PRIORITY                             10
#define CONST_TEMP_SPLITSCREEN_INDEX                             0
#define CONST_MaxHistory                                         16
#define CONST_COVERLINK_ExposureDot                              0.4f
#define CONST_COVERLINK_EdgeCheckDot                             0.25f
#define CONST_COVERLINK_EdgeExposureDot                          0.85f
#define CONST_COVERLINK_DangerDist                               1536.f
#define CONST_FSM_DEFAULTRECYCLETIME                             0.2
#define CONST_GAMEEVENT_MATCH_STARTED                            0
#define CONST_GAMEEVENT_MATCH_ENDED                              1
#define CONST_GAMEEVENT_ROUND_STARTED                            2
#define CONST_GAMEEVENT_ROUND_ENDED                              3
#define CONST_GAMEEVENT_MATCH_WON                                4
#define CONST_GAMEEVENT_ROUND_WON                                5
#define CONST_GAMEEVENT_GAME_CLASS                               6
#define CONST_GAMEEVENT_GAME_OPTION_URL                          7
#define CONST_GAMEEVENT_GAME_MAPNAME                             8
#define CONST_GAMEEVENT_GAME_SCORE                               9
#define CONST_GAMEEVENT_MEMORYUSAGE_POLL                         35
#define CONST_GAMEEVENT_FRAMERATE_POLL                           36
#define CONST_GAMEEVENT_NETWORKUSAGEIN_POLL                      37
#define CONST_GAMEEVENT_NETWORKUSAGEOUT_POLL                     38
#define CONST_GAMEEVENT_PING_POLL                                39
#define CONST_GAMEEVENT_TEAM_CREATED                             50
#define CONST_GAMEEVENT_TEAM_GAME_SCORE                          51
#define CONST_GAMEEVENT_PLAYER_LOGIN                             100
#define CONST_GAMEEVENT_PLAYER_LOGOUT                            101
#define CONST_GAMEEVENT_PLAYER_SPAWN                             102
#define CONST_GAMEEVENT_PLAYER_MATCH_WON                         103
#define CONST_GAMEEVENT_PLAYER_KILL                              104
#define CONST_GAMEEVENT_PLAYER_LOCATION_POLL                     105
#define CONST_GAMEEVENT_PLAYER_TEAMCHANGE                        106
#define CONST_GAMEEVENT_PLAYER_KILL_STREAK                       107
#define CONST_GAMEEVENT_WEAPON_DAMAGE                            150
#define CONST_GAMEEVENT_WEAPON_DAMAGE_MELEE                      151
#define CONST_GAMEEVENT_WEAPON_FIRED                             152
#define CONST_GAMEEVENT_PLAYER_KILL_NORMAL                       200
#define CONST_GAMEEVENT_GAME_SPECIFIC                            1000
#define CONST_GAMEEVENT_MAX_EVENTID                              0x0000FFFF
#define CONST_SCENEFILTER_None                                   0x00000000
#define CONST_SCENEFILTER_IncludeTransient                       0x00000001
#define CONST_SCENEFILTER_InputProcessorOnly                     0x00000002
#define CONST_SCENEFILTER_PausersOnly                            0x00000004
#define CONST_SCENEFILTER_PrimitiveUsersOnly                     0x00000008
#define CONST_SCENEFILTER_UsesPostProcessing                     0x00000010
#define CONST_SCENEFILTER_ReceivesFocus                          0x00000020
#define CONST_SCENEFILTER_Any                                    0xFFFFFFFF
#define CONST_DynamicResHistorySize                              16
#define CONST_LINECHECK_GRANULARITY                              768.f
#define CONST_NUM_PATHFINDING_PARAMS                             8
#define CONST_PROCBUILDING_VERSION                               1
#define CONST_ROOF_MINZ                                          0.7
#define CONST_FIRST_DEFAULT_DATABINDING_INDEX                    100
#define CONST_TOOLTIP_BINDING_INDEX                              100
#define CONST_CONTEXTMENU_BINDING_INDEX                          101
#define CONST_ResizeBufferPixels                                 5
#define CONST_RANKEDPROVIDERTAG                                  "PlaylistsRanked"
#define CONST_UNRANKEDPROVIDERTAG                                "PlaylistsUnranked"
#define CONST_DEFAULT_UISKIN                                     "DefaultUISkin.DefaultSkin"
#define CONST_UnknownCellDataFieldName                           'NAME_None'

/*
# ========================================================================================= #
# Enums
# ========================================================================================= #
*/

// Enum Engine.Actor.EPhysics
/*enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_Spider                                        = 8,
	PHYS_Ladder                                        = 9,
	PHYS_RigidBody                                     = 10,
	PHYS_SoftBody                                      = 11,
	PHYS_NavMeshWalking                                = 12,
	PHYS_PathApproximation                             = 13,
	PHYS_Unused                                        = 14,
	PHYS_Custom                                        = 15,
	PHYS_MAX                                           = 16
};*/

// Enum Engine.Actor.EMoveDir
/*enum EMoveDir
{
	MD_Stationary                                      = 0,
	MD_Forward                                         = 1,
	MD_Backward                                        = 2,
	MD_Left                                            = 3,
	MD_Right                                           = 4,
	MD_Up                                              = 5,
	MD_Down                                            = 6,
	MD_MAX                                             = 7
};*/

// Enum Engine.Actor.ECollisionType
/*enum ECollisionType
{
	COLLIDE_CustomDefault                              = 0,
	COLLIDE_NoCollision                                = 1,
	COLLIDE_BlockAll                                   = 2,
	COLLIDE_BlockWeapons                               = 3,
	COLLIDE_TouchAll                                   = 4,
	COLLIDE_TouchWeapons                               = 5,
	COLLIDE_BlockAllButWeapons                         = 6,
	COLLIDE_TouchAllButWeapons                         = 7,
	COLLIDE_WaterSurface                               = 8,
	COLLIDE_BlockWeaponsKickable                       = 9,
	COLLIDE_MAX                                        = 10
};*/

// Enum Engine.Actor.EPowerResistance
/*enum EPowerResistance
{
	Resistance_Full                                    = 0,
	Resistance_Partial                                 = 1,
	Resistance_None                                    = 2,
	Resistance_MAX                                     = 3
};*/

// Enum Engine.Actor.EDoubleClickDir
/*enum EDoubleClickDir
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6,
	DCLICK_MAX                                         = 7
};*/

// Enum Engine.Actor.ETravelType
/*enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2,
	TRAVEL_MAX                                         = 3
};*/

// Enum Engine.ActorComponent.EComponentType
/*enum EComponentType
{
	COMPONENT_Unknown                                  = 0,
	COMPONENT_Animation                                = 1,
	COMPONENT_AI                                       = 2,
	COMPONENT_Gameplay                                 = 3,
	COMPONENT_Graphics                                 = 4,
	COMPONENT_Particles                                = 5,
	COMPONENT_StaticMesh                               = 6,
	COMPONENT_SkinMesh                                 = 7,
	COMPONENT_Lights                                   = 8,
	COMPONENT_Audio                                    = 9,
	COMPONENT_Physics                                  = 10,
	COMPONENT_Engine                                   = 11,
	COMPONENT_MAX                                      = 12
};*/

// Enum Engine.PrimitiveComponent.GJKResult
/*enum GJKResult
{
	GJK_Intersect                                      = 0,
	GJK_NoIntersection                                 = 1,
	GJK_Fail                                           = 2,
	GJK_MAX                                            = 3
};*/

// Enum Engine.Scene.EDetailMode
/*enum EDetailMode
{
	DM_Low                                             = 0,
	DM_Medium                                          = 1,
	DM_High                                            = 2,
	DM_MAX                                             = 3
};*/

// Enum Engine.Scene.ESceneDepthPriorityGroup
/*enum ESceneDepthPriorityGroup
{
	SDPG_UnrealEdBackground                            = 0,
	SDPG_World                                         = 1,
	SDPG_Foreground                                    = 2,
	SDPG_UnrealEdForeground                            = 3,
	SDPG_PostProcess                                   = 4,
	SDPG_MAX                                           = 5
};*/

// Enum Engine.PrimitiveComponent.ERadialImpulseFalloff
/*enum ERadialImpulseFalloff
{
	RIF_Constant                                       = 0,
	RIF_Linear                                         = 1,
	RIF_MAX                                            = 2
};*/

// Enum Engine.PrimitiveComponent.ERBCollisionChannel
/*enum ERBCollisionChannel
{
	RBCC_Default                                       = 0,
	RBCC_Nothing                                       = 1,
	RBCC_Pawn                                          = 2,
	RBCC_Vehicle                                       = 3,
	RBCC_Water                                         = 4,
	RBCC_GameplayPhysics                               = 5,
	RBCC_EffectPhysics                                 = 6,
	RBCC_Untitled1                                     = 7,
	RBCC_Untitled2                                     = 8,
	RBCC_Untitled3                                     = 9,
	RBCC_Untitled4                                     = 10,
	RBCC_Cloth                                         = 11,
	RBCC_FluidDrain                                    = 12,
	RBCC_SoftBody                                      = 13,
	RBCC_FracturedMeshPart                             = 14,
	RBCC_BlockingVolume                                = 15,
	RBCC_DeadPawn                                      = 16,
	RBCC_Clothing                                      = 17,
	RBCC_ClothingCollision                             = 18,
	RBCC_MAX                                           = 19
};*/

// Enum Engine.Camera.EViewTargetBlendFunction
/*enum EViewTargetBlendFunction
{
	VTBlend_Linear                                     = 0,
	VTBlend_Cubic                                      = 1,
	VTBlend_EaseIn                                     = 2,
	VTBlend_EaseOut                                    = 3,
	VTBlend_EaseInOut                                  = 4,
	VTBlend_MAX                                        = 5
};*/

// Enum Engine.DOFEffect.EFocusType
/*enum EFocusType
{
	FOCUS_Distance                                     = 0,
	FOCUS_Position                                     = 1,
	FOCUS_MAX                                          = 2
};*/

// Enum Engine.Camera.ECameraAnimPlaySpace
/*enum ECameraAnimPlaySpace
{
	CAPS_CameraLocal                                   = 0,
	CAPS_World                                         = 1,
	CAPS_UserDefined                                   = 2,
	CAPS_MAX                                           = 3
};*/

// Enum Engine.SequenceObject.KismetVarTypes
/*enum KismetVarTypes
{
	KVT_Int                                            = 0,
	KVT_Float                                          = 1,
	KVT_Bool                                           = 2,
	KVT_String                                         = 3,
	KVT_Object                                         = 4,
	KVT_Name                                           = 5,
	KVT_Vector                                         = 6,
	KVT_MAX                                            = 7
};*/

// Enum Engine.SeqAct_ControlMovieTexture.EMovieControlType
/*enum EMovieControlType
{
	MCT_Play                                           = 0,
	MCT_Stop                                           = 1,
	MCT_Pause                                          = 2,
	MCT_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ENATType
/*enum ENATType
{
	NAT_Unknown                                        = 0,
	NAT_Open                                           = 1,
	NAT_Moderate                                       = 2,
	NAT_Strict                                         = 3,
	NAT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineNewsType
/*enum EOnlineNewsType
{
	ONT_Unknown                                        = 0,
	ONT_GameNews                                       = 1,
	ONT_ContentAnnouncements                           = 2,
	ONT_Misc                                           = 3,
	ONT_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineServerConnectionStatus
/*enum EOnlineServerConnectionStatus
{
	OSCS_NotConnected                                  = 0,
	OSCS_Connected                                     = 1,
	OSCS_ConnectionDropped                             = 2,
	OSCS_NoNetworkConnection                           = 3,
	OSCS_ServiceUnavailable                            = 4,
	OSCS_UpdateRequired                                = 5,
	OSCS_ServersTooBusy                                = 6,
	OSCS_DuplicateLoginDetected                        = 7,
	OSCS_InvalidUser                                   = 8,
	OSCS_MAX                                           = 9
};*/

// Enum Engine.Settings.ESettingsDataType
/*enum ESettingsDataType
{
	SDT_Empty                                          = 0,
	SDT_Int32                                          = 1,
	SDT_Int64                                          = 2,
	SDT_Double                                         = 3,
	SDT_String                                         = 4,
	SDT_Float                                          = 5,
	SDT_Blob                                           = 6,
	SDT_DateTime                                       = 7,
	SDT_MAX                                            = 8
};*/

// Enum Engine.Settings.EOnlineDataAdvertisementType
/*enum EOnlineDataAdvertisementType
{
	ODAT_DontAdvertise                                 = 0,
	ODAT_OnlineService                                 = 1,
	ODAT_QoS                                           = 2,
	ODAT_OnlineServiceAndQoS                           = 3,
	ODAT_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineEnumerationReadState
/*enum EOnlineEnumerationReadState
{
	OERS_NotStarted                                    = 0,
	OERS_InProgress                                    = 1,
	OERS_Done                                          = 2,
	OERS_Failed                                        = 3,
	OERS_MAX                                           = 4
};*/

// Enum Engine.OnlineSubsystem.EOnlineGameState
/*enum EOnlineGameState
{
	OGS_NoSession                                      = 0,
	OGS_Pending                                        = 1,
	OGS_Starting                                       = 2,
	OGS_InProgress                                     = 3,
	OGS_Ending                                         = 4,
	OGS_Ended                                          = 5,
	OGS_MAX                                            = 6
};*/

// Enum Engine.OnlineSubsystem.EOnlineAccountCreateStatus
/*enum EOnlineAccountCreateStatus
{
	OACS_CreateSuccessful                              = 0,
	OACS_UnknownError                                  = 1,
	OACS_InvalidUserName                               = 2,
	OACS_InvalidPassword                               = 3,
	OACS_InvalidUniqueUserName                         = 4,
	OACS_UniqueUserNameInUse                           = 5,
	OACS_ServiceUnavailable                            = 6,
	OACS_MAX                                           = 7
};*/

// Enum Engine.OnlineSubsystem.ELanBeaconState
/*enum ELanBeaconState
{
	LANB_NotUsingLanBeacon                             = 0,
	LANB_Hosting                                       = 1,
	LANB_Searching                                     = 2,
	LANB_MAX                                           = 3
};*/

// Enum Engine.OnlineSubsystem.EOnlineFriendState
/*enum EOnlineFriendState
{
	OFS_Offline                                        = 0,
	OFS_Online                                         = 1,
	OFS_Away                                           = 2,
	OFS_Busy                                           = 3,
	OFS_MAX                                            = 4
};*/

// Enum Engine.OnlineSubsystem.ENetworkNotificationPosition
/*enum ENetworkNotificationPosition
{
	NNP_TopLeft                                        = 0,
	NNP_TopCenter                                      = 1,
	NNP_TopRight                                       = 2,
	NNP_CenterLeft                                     = 3,
	NNP_Center                                         = 4,
	NNP_CenterRight                                    = 5,
	NNP_BottomLeft                                     = 6,
	NNP_BottomCenter                                   = 7,
	NNP_BottomRight                                    = 8,
	NNP_MAX                                            = 9
};*/

// Enum Engine.OnlineSubsystem.EFeaturePrivilegeLevel
/*enum EFeaturePrivilegeLevel
{
	FPL_Disabled                                       = 0,
	FPL_EnabledFriendsOnly                             = 1,
	FPL_Enabled                                        = 2,
	FPL_MAX                                            = 3
};*/

// Enum Engine.OnlineSubsystem.ELoginStatus
/*enum ELoginStatus
{
	LS_NotLoggedIn                                     = 0,
	LS_UsingLocalProfile                               = 1,
	LS_LoggedIn                                        = 2,
	LS_MAX                                             = 3
};*/

// Enum Engine.PlayerController.EProgressMessageType
/*enum EProgressMessageType
{
	PMT_Clear                                          = 0,
	PMT_Information                                    = 1,
	PMT_AdminMessage                                   = 2,
	PMT_DownloadProgress                               = 3,
	PMT_ConnectionFailure                              = 4,
	PMT_SocketFailure                                  = 5,
	PMT_MAX                                            = 6
};*/

// Enum Engine.SkeletalMeshComponent.EPhysBodyOp
/*enum EPhysBodyOp
{
	PBO_None                                           = 0,
	PBO_Term                                           = 1,
	PBO_Disable                                        = 2,
	PBO_MAX                                            = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXRegOp
/*enum EFaceFXRegOp
{
	FXRO_Add                                           = 0,
	FXRO_Multiply                                      = 1,
	FXRO_Replace                                       = 2,
	FXRO_MAX                                           = 3
};*/

// Enum Engine.SkeletalMeshComponent.EFaceFXBlendMode
/*enum EFaceFXBlendMode
{
	FXBM_Overwrite                                     = 0,
	FXBM_Additive                                      = 1,
	FXBM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionRotationMode
/*enum ERootMotionRotationMode
{
	RMRM_Ignore                                        = 0,
	RMRM_RotateActor                                   = 1,
	RMRM_MAX                                           = 2
};*/

// Enum Engine.SkeletalMeshComponent.ERootMotionMode
/*enum ERootMotionMode
{
	RMM_Translate                                      = 0,
	RMM_Velocity                                       = 1,
	RMM_Ignore                                         = 2,
	RMM_Accel                                          = 3,
	RMM_Relative                                       = 4,
	RMM_MAX                                            = 5
};*/

// Enum Engine.PlayerController.EInputTypes
/*enum EInputTypes
{
	IT_XAxis                                           = 0,
	IT_YAxis                                           = 1,
	IT_MAX                                             = 2
};*/

// Enum Engine.PlayerController.EInputMatchAction
/*enum EInputMatchAction
{
	IMA_GreaterThan                                    = 0,
	IMA_LessThan                                       = 1,
	IMA_MAX                                            = 2
};*/

// Enum Engine.Pylon.ENavMeshEdgeType
/*enum ENavMeshEdgeType
{
	NAVEDGE_Normal                                     = 0,
	NAVEDGE_Mantle                                     = 1,
	NAVEDGE_Coverslip                                  = 2,
	NAVEDGE_SwatTurn                                   = 3,
	NAVEDGE_DropDown                                   = 4,
	NAVEDGE_PathObject                                 = 5,
	NAVEDGE_MAX                                        = 6
};*/

// Enum Engine.AmbientOcclusionEffect.EAmbientOcclusionQuality
/*enum EAmbientOcclusionQuality
{
	AO_High                                            = 0,
	AO_Medium                                          = 1,
	AO_Low                                             = 2,
	AO_MAX                                             = 3
};*/

// Enum Engine.SoundNodeAttenuation.ESoundDistanceCalc
/*enum ESoundDistanceCalc
{
	SOUNDDISTANCE_Normal                               = 0,
	SOUNDDISTANCE_InfiniteXYPlane                      = 1,
	SOUNDDISTANCE_InfiniteXZPlane                      = 2,
	SOUNDDISTANCE_InfiniteYZPlane                      = 3,
	SOUNDDISTANCE_MAX                                  = 4
};*/

// Enum Engine.SoundNodeAttenuation.SoundDistanceModel
/*enum SoundDistanceModel
{
	ATTENUATION_Linear                                 = 0,
	ATTENUATION_Logarithmic                            = 1,
	ATTENUATION_Inverse                                = 2,
	ATTENUATION_LogReverse                             = 3,
	ATTENUATION_NaturalSound                           = 4,
	ATTENUATION_MAX                                    = 5
};*/

// Enum Engine.AnimSequence.AnimationCompressionFormat
/*enum AnimationCompressionFormat
{
	ACF_None                                           = 0,
	ACF_Float96NoW                                     = 1,
	ACF_Fixed48NoW                                     = 2,
	ACF_IntervalFixed32NoW                             = 3,
	ACF_Fixed32NoW                                     = 4,
	ACF_Float32NoW                                     = 5,
	ACF_BioFixed48                                     = 6,
	ACF_MAX                                            = 7
};*/

// Enum Engine.AnimSequence.AnimationKeyFormat
/*enum AnimationKeyFormat
{
	AKF_ConstantKeyLerp                                = 0,
	AKF_VariableKeyLerp                                = 1,
	AKF_MAX                                            = 2
};*/

// Enum Engine.AnimNode.ESliderType
/*enum ESliderType
{
	ST_1D                                              = 0,
	ST_2D                                              = 1,
	ST_MAX                                             = 2
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EWeightCheck
/*enum EWeightCheck
{
	EWC_AnimNodeSlotNotPlaying                         = 0,
	EWC_ChildIndexFullWeight                           = 1,
	EWC_ChildIndexNotFullWeight                        = 2,
	EWC_ChildIndexRelevant                             = 3,
	EWC_ChildIndexNotRelevant                          = 4,
	EWC_MAX                                            = 5
};*/

// Enum Engine.AnimNode_MultiBlendPerBone.EBlendType
/*enum EBlendType
{
	EBT_ParentBoneSpace                                = 0,
	EBT_MeshSpace                                      = 1,
	EBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeAimOffset.EAnimAimDir
/*enum EAnimAimDir
{
	ANIMAIM_LEFTUP                                     = 0,
	ANIMAIM_CENTERUP                                   = 1,
	ANIMAIM_RIGHTUP                                    = 2,
	ANIMAIM_LEFTCENTER                                 = 3,
	ANIMAIM_CENTERCENTER                               = 4,
	ANIMAIM_RIGHTCENTER                                = 5,
	ANIMAIM_LEFTDOWN                                   = 6,
	ANIMAIM_CENTERDOWN                                 = 7,
	ANIMAIM_RIGHTDOWN                                  = 8,
	ANIMAIM_MAX                                        = 9
};*/

// Enum Engine.AnimNodeAimOffset.EAimID
/*enum EAimID
{
	EAID_LeftUp                                        = 0,
	EAID_LeftDown                                      = 1,
	EAID_RightUp                                       = 2,
	EAID_RightDown                                     = 3,
	EAID_ZeroUp                                        = 4,
	EAID_ZeroDown                                      = 5,
	EAID_ZeroLeft                                      = 6,
	EAID_ZeroRight                                     = 7,
	EAID_CellLU                                        = 8,
	EAID_CellCU                                        = 9,
	EAID_CellRU                                        = 10,
	EAID_CellLC                                        = 11,
	EAID_CellCC                                        = 12,
	EAID_CellRC                                        = 13,
	EAID_CellLD                                        = 14,
	EAID_CellCD                                        = 15,
	EAID_CellRD                                        = 16,
	EAID_MAX                                           = 17
};*/

// Enum Engine.AnimNodeBlendByBase.EBaseBlendType
/*enum EBaseBlendType
{
	BBT_ByActorTag                                     = 0,
	BBT_ByActorClass                                   = 1,
	BBT_MAX                                            = 2
};*/

// Enum Engine.AnimNodeSequence.ERootRotationOption
/*enum ERootRotationOption
{
	RRO_Default                                        = 0,
	RRO_Discard                                        = 1,
	RRO_Extract                                        = 2,
	RRO_MAX                                            = 3
};*/

// Enum Engine.AnimNodeSequence.ERootBoneAxis
/*enum ERootBoneAxis
{
	RBA_Default                                        = 0,
	RBA_Discard                                        = 1,
	RBA_Translate                                      = 2,
	RBA_MAX                                            = 3
};*/

// Enum Engine.LightComponent.EShadowFilterQuality
/*enum EShadowFilterQuality
{
	SFQ_Low                                            = 0,
	SFQ_Medium                                         = 1,
	SFQ_High                                           = 2,
	SFQ_MAX                                            = 3
};*/

// Enum Engine.LightComponent.EShadowProjectionTechnique
/*enum EShadowProjectionTechnique
{
	ShadowProjTech_Default                             = 0,
	ShadowProjTech_PCF                                 = 1,
	ShadowProjTech_VSM                                 = 2,
	ShadowProjTech_BPCF_Low                            = 3,
	ShadowProjTech_BPCF_Medium                         = 4,
	ShadowProjTech_BPCF_High                           = 5,
	ShadowProjTech_MAX                                 = 6
};*/

// Enum Engine.LightComponent.ELightShadowMode
/*enum ELightShadowMode
{
	LightShadow_Normal                                 = 0,
	LightShadow_Modulate                               = 1,
	LightShadow_ModulateBetter                         = 2,
	LightShadow_MAX                                    = 3
};*/

// Enum Engine.LightComponent.ELightAffectsClassification
/*enum ELightAffectsClassification
{
	LAC_USER_SELECTED                                  = 0,
	LAC_DYNAMIC_AFFECTING                              = 1,
	LAC_STATIC_AFFECTING                               = 2,
	LAC_DYNAMIC_AND_STATIC_AFFECTING                   = 3,
	LAC_MAX                                            = 4
};*/

// Enum Engine.DynamicLightEnvironmentComponent.EDynamicLightEnvironmentBoundsMethod
/*enum EDynamicLightEnvironmentBoundsMethod
{
	DLEB_OwnerComponents                               = 0,
	DLEB_ManualOverride                                = 1,
	DLEB_ActiveComponents                              = 2,
	DLEB_MAX                                           = 3
};*/

// Enum Engine.AudioDevice.ESoundClassName
/*enum ESoundClassName
{
	Master                                             = 0,
	ESoundClassName_MAX                                = 1
};*/

// Enum Engine.AudioDevice.EDebugState
/*enum EDebugState
{
	DEBUGSTATE_None                                    = 0,
	DEBUGSTATE_IsolateDryAudio                         = 1,
	DEBUGSTATE_IsolateReverb                           = 2,
	DEBUGSTATE_TestLPF                                 = 3,
	DEBUGSTATE_TestStereoBleed                         = 4,
	DEBUGSTATE_TestLFEBleed                            = 5,
	DEBUGSTATE_DisableLPF                              = 6,
	DEBUGSTATE_MAX                                     = 7
};*/

// Enum Engine.Brush.ECsgOper
/*enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4,
	CSG_MAX                                            = 5
};*/

// Enum Engine.ReverbVolume.ReverbPreset
/*enum ReverbPreset
{
	REVERB_Default                                     = 0,
	REVERB_Bathroom                                    = 1,
	REVERB_StoneRoom                                   = 2,
	REVERB_Auditorium                                  = 3,
	REVERB_ConcertHall                                 = 4,
	REVERB_Cave                                        = 5,
	REVERB_Hallway                                     = 6,
	REVERB_StoneCorridor                               = 7,
	REVERB_Alley                                       = 8,
	REVERB_Forest                                      = 9,
	REVERB_City                                        = 10,
	REVERB_Mountains                                   = 11,
	REVERB_Quarry                                      = 12,
	REVERB_Plain                                       = 13,
	REVERB_ParkingLot                                  = 14,
	REVERB_SewerPipe                                   = 15,
	REVERB_Underwater                                  = 16,
	REVERB_SmallRoom                                   = 17,
	REVERB_MediumRoom                                  = 18,
	REVERB_LargeRoom                                   = 19,
	REVERB_MediumHall                                  = 20,
	REVERB_LargeHall                                   = 21,
	REVERB_Plate                                       = 22,
	REVERB_MAX                                         = 23
};*/

// Enum Engine.AudioDevice.ETTSSpeaker
/*enum ETTSSpeaker
{
	TTSSPEAKER_Paul                                    = 0,
	TTSSPEAKER_Harry                                   = 1,
	TTSSPEAKER_Frank                                   = 2,
	TTSSPEAKER_Dennis                                  = 3,
	TTSSPEAKER_Kit                                     = 4,
	TTSSPEAKER_Betty                                   = 5,
	TTSSPEAKER_Ursula                                  = 6,
	TTSSPEAKER_Rita                                    = 7,
	TTSSPEAKER_Wendy                                   = 8,
	TTSSPEAKER_MAX                                     = 9
};*/

// Enum Engine.BioDynamicLightEnvironmentComponent.EDLEStateType
/*enum EDLEStateType
{
	DLEST_Default                                      = 0,
	DLEST_Cinematic                                    = 1,
	DLEST_Simple                                       = 2,
	DLEST_MAX                                          = 3
};*/

// Enum Engine.BioDynamicLightEnvironmentComponent.ERimLightControlType
/*enum ERimLightControlType
{
	RLCT_Key                                           = 0,
	RLCT_Camera                                        = 1,
	RLCT_MAX                                           = 2
};*/

// Enum Engine.InterpTrack.ETrackActiveCondition
/*enum ETrackActiveCondition
{
	ETAC_Always                                        = 0,
	ETAC_GoreEnabled                                   = 1,
	ETAC_GoreDisabled                                  = 2,
	ETAC_BioFemalePlayer                               = 3,
	ETAC_BioMalePlayer                                 = 4,
	ETAC_BioSingleHandWeapon                           = 5,
	ETAC_BioDualHandWeapon                             = 6,
	ETAC_MAX                                           = 7
};*/

// Enum Engine.MaterialInterface.EMaterialProperty
/*enum EMaterialProperty
{
	MP_EmissiveColor                                   = 0,
	MP_Opacity                                         = 1,
	MP_OpacityMask                                     = 2,
	MP_Distortion                                      = 3,
	MP_TwoSidedLightingMask                            = 4,
	MP_DiffuseColor                                    = 5,
	MP_DiffusePower                                    = 6,
	MP_SpecularColor                                   = 7,
	MP_SpecularPower                                   = 8,
	MP_Normal                                          = 9,
	MP_CustomLighting                                  = 10,
	MP_CustomLightingDiffuse                           = 11,
	MP_AnisotropicDirection                            = 12,
	MP_WorldPositionOffset                             = 13,
	MP_TMissionMask                                    = 14,
	MP_TMissionColor                                   = 15,
	MP_CustomSkylightDiffuse                           = 16,
	MP_WrapLightingCoefficients                        = 17,
	MP_MAX                                             = 18
};*/

// Enum Engine.MaterialInterface.EMaterialUsage
/*enum EMaterialUsage
{
	MATUSAGE_SkeletalMesh                              = 0,
	MATUSAGE_FracturedMeshes                           = 1,
	MATUSAGE_ParticleSprites                           = 2,
	MATUSAGE_BeamTrails                                = 3,
	MATUSAGE_ParticleSubUV                             = 4,
	MATUSAGE_Foliage                                   = 5,
	MATUSAGE_SpeedTree                                 = 6,
	MATUSAGE_StaticLighting                            = 7,
	MATUSAGE_GammaCorrection                           = 8,
	MATUSAGE_LensFlare                                 = 9,
	MATUSAGE_InstancedMeshParticles                    = 10,
	MATUSAGE_FluidSurface                              = 11,
	MATUSAGE_Decals                                    = 12,
	MATUSAGE_MaterialEffect                            = 13,
	MATUSAGE_MorphTargets                              = 14,
	MATUSAGE_FogVolumes                                = 15,
	MATUSAGE_RadialBlur                                = 16,
	MATUSAGE_InstancedMeshes                           = 17,
	MATUSAGE_SplineMesh                                = 18,
	MATUSAGE_ScreenDoorFade                            = 19,
	MATUSAGE_APEXMesh                                  = 20,
	MATUSAGE_LightEnvironments                         = 21,
	MATUSAGE_VectorLightMaps                           = 22,
	MATUSAGE_SimpleLightMaps                           = 23,
	MATUSAGE_MAX                                       = 24
};*/

// Enum Engine.BioRemoteLogger.eventMPEnumID
/*enum eventMPEnumID
{
	ENEMY_SPAWNED                                      = 0,
	ENEMY_DIED                                         = 1,
	SHIELDS_DOWN                                       = 2,
	PLAYER_DOWNED                                      = 3,
	REVIVAL_STARTED                                    = 4,
	REVIVAL_CANCELLED                                  = 5,
	PLAYER_REVIVED                                     = 6,
	SHIELD_RESTORED                                    = 7,
	WEAPON_PICKED_UP                                   = 8,
	SWITCH_WEAPON                                      = 9,
	RELOAD                                             = 10,
	AMMO_PICKED_UP                                     = 11,
	HEAVY_MELEE                                        = 12,
	CUSTOM_ACTION_IMPACT                               = 13,
	CAST_POWER                                         = 14,
	POWER_IMPACT                                       = 15,
	PROJECTILE_CREATED                                 = 16,
	PROJECTILE_EXPLODED                                = 17,
	ANIMATED_REACTION                                  = 18,
	START_CLIMBING_LADDER                              = 19,
	FINISH_CLIMBING_LADDER                             = 20,
	Roll                                               = 21,
	ENTER_COVER                                        = 22,
	EXIT_COVER                                         = 23,
	COVER_SLIP                                         = 24,
	SWAT_TURN                                          = 25,
	Mantle                                             = 26,
	GAME_STARTED                                       = 27,
	WAVE_STARTED                                       = 28,
	WAVE_COMPLETED                                     = 29,
	ALL_WAVES_COMPLETED                                = 30,
	GAME_OVER                                          = 31,
	ANNEX_STARTED                                      = 32,
	ENTER_ANNEX_ZONE                                   = 33,
	LEAVE_ANNEX_ZONE                                   = 34,
	ANNEX_COMPLETE                                     = 35,
	LAG_REPORTED                                       = 36,
	LOW_FRAMERATE                                      = 37,
	BANDWIDTH_SATURATED                                = 38,
	CUSTOM_ACTION_STARTED                              = 39,
	NET_PERF_REPORTED                                  = 40,
	CUSTOM_EVENT_REPORTED                              = 41,
	LOG_SPAM                                           = 42,
	POWER_SUBSEQUENT_IMPACT                            = 43,
	eventMPEnumID_MAX                                  = 44
};*/

// Enum Engine.BioRemoteLogger.eventEnumID
/*enum eventEnumID
{
	OUT_OF_WORLD                                       = 0,
	OUT_OF_TEXTUREMEMORY                               = 1,
	OUT_OF_SYSTEMMEMORY                                = 2,
	COMBAT_START                                       = 3,
	COMBAT_END                                         = 4,
	GAME_START                                         = 5,
	GAME_END                                           = 6,
	GAME_LOADGAME                                      = 7,
	GAME_SAVEGAME                                      = 8,
	GAME_PROFILINGTIME                                 = 9,
	CONVERSATION_MISSINGVO                             = 10,
	CONVERSATION_MISSINGLIPSYNC                        = 11,
	CONVERSATION_FAILEDSTAGING                         = 12,
	CONVERSATION_START                                 = 13,
	CONVERSATION_END                                   = 14,
	CONVERSATION_SKIPPEDLINE                           = 15,
	CONVERSATION_SELECTRESPONSE                        = 16,
	CONVERSATION_NODETRANSITION                        = 17,
	PAWN_DEATH                                         = 18,
	PAWN_LEVELUP                                       = 19,
	PAWN_FAILEDPATHFIND                                = 20,
	PAWN_TELEPORT                                      = 21,
	PAWN_USEPLACEABLE                                  = 22,
	PAWN_USEPOWER                                      = 23,
	PAWN_USEGRENADE                                    = 24,
	OUT_OF_TRIGGERSTREAM                               = 25,
	BAD_STREAMING                                      = 26,
	SLOW_STREAMING                                     = 27,
	ERROR_LOADING                                      = 28,
	ERROR_NOAREAMAP                                    = 29,
	GAME_ENTERMAP                                      = 30,
	GAME_EXITMAP                                       = 31,
	PLACEABLE_STATECHANGE                              = 32,
	PLOTSTATE_CHANGE                                   = 33,
	GAME_STATISTICS                                    = 34,
	SCRIPTING_FAILED                                   = 35,
	SCRIPTING_PASSED                                   = 36,
	USE_COVER                                          = 37,
	TREASURE                                           = 38,
	MISC_DEBUG                                         = 39,
	PURPLE_LEVEL                                       = 40,
	USE_ZOOM                                           = 41,
	PLAYER_DEALTDAMAGE                                 = 42,
	PLAYER_TOOKDAMAGE                                  = 43,
	PLAYER_FIREDWEAPON                                 = 44,
	PLAYER_DREWWEAPON                                  = 45,
	PLAYER_OBTAINEDMEDIGEL                             = 46,
	PLAYER_OBTAINEDCREDITS                             = 47,
	PLAYER_STARTEDSTORM                                = 48,
	PLAYER_ENDEDSTORM                                  = 49,
	AUTOMATION_START                                   = 50,
	AUTOMATION_WARNING                                 = 51,
	AUTOMATION_ERROR                                   = 52,
	AUTOMATION_PRINT                                   = 53,
	AUTOMATION_END                                     = 54,
	AUTOMATION_OPERROR                                 = 55,
	TEXTUREMEMORY_SACRIFICED                           = 56,
	PAWN_KILL_INFO                                     = 57,
	PLAYER_OBTAINEDEEZO                                = 58,
	PLAYER_OBTAINEDIRIDIUM                             = 59,
	PLAYER_OBTAINEDPALLADIUM                           = 60,
	PLAYER_OBTAINEDAMMO                                = 61,
	PLAYER_OBTAINEDPLATINUM                            = 62,
	TEXTUREMEMORY_FACTOR                               = 63,
	PLAYER_OBTAINEDPROBES                              = 64,
	BLOCKING_ADDTOWORLD                                = 65,
	ENDGM1                                             = 66,
	ENDGM2                                             = 67,
	ENDGM3                                             = 68,
	PLAYER_OUTOFAMMO                                   = 69,
	PAWN_AIBARK                                        = 70,
	CONVERSATION_ENTRYNODE                             = 71,
	CONVERSATION_REPLYNODE                             = 72,
	CONVERSATION_MISCLOG                               = 73,
	PLAYER_NOTFUN                                      = 74,
	CONVAMBIENT_IGNOREBODYGESTURESNOTSET               = 75,
	STRREF_NOT_FOUND                                   = 76,
	PLAYER_OBTAINEDFUEL                                = 77,
	VSYNC_ENABLED                                      = 78,
	LEVEL_LOAD_TIME                                    = 79,
	BLAZE_LOGIN_INFO                                   = 80,
	BLAZE_TELEMETRY                                    = 81,
	STRING_LAST_USE                                    = 82,
	PLAYER_OBTAINEDGRENADE                             = 83,
	UNIT_TEST_RESULT                                   = 84,
	PACKAGE_HAS_LOAD_WARNINGS                          = 85,
	PACKAGE_HAS_LOAD_ERRORS                            = 86,
	KISMET_MAP_REFERENCE                               = 87,
	KISMET_SEQUENCE_COUNT                              = 88,
	PATHNODE_NETWORK_SIZE                              = 89,
	PATHNODE_COUNT                                     = 90,
	PATHNODE_ONE_WAY                                   = 91,
	PATHNODE_DESTINATION_ONLY                          = 92,
	PATHNODE_UNMATCHED                                 = 93,
	PATHNODE_SOURCE_ONLY                               = 94,
	JUMPNODE_BAD_DISTANCE                              = 95,
	JUMPNODE_NO_BLOCKVOL                               = 96,
	BLOCKING_VOLUME_COUNT                              = 97,
	BLOCKING_VOLUME_COMPLEXCOLLISION                   = 98,
	TEXTURE_SIZE                                       = 99,
	TEXTURE_NOMIPS                                     = 100,
	PAWN_LOC_ONPLAYERDEATH                             = 101,
	PLAYER_LOC_ONPAWNDEATH                             = 102,
	PLAYER_OBTAINEDPICKUP                              = 103,
	DRAWSCALE_NEARZERO                                 = 104,
	DRAWSCALE_PHYSICS_INVALID                          = 105,
	PATHNODE_OUTSIDE_STREAMINGTRIGGER                  = 106,
	PATHNODE_LINKED_EXTERNAL_CHUNKS                    = 107,
	HENCHMEN_SELECTED                                  = 108,
	MAP_PLAYED_THROUGH_COMPLETELY                      = 109,
	FAST_RESUME_LOAD_TIME                              = 110,
	GAWLOG_AWARD_ASSET                                 = 111,
	GAWLOG_MODIFY_ASSET                                = 112,
	GAWLOG_END_GAME_OPTIONS                            = 113,
	GAWLOG_ENG_GAME_OPTION_CHOSEN                      = 114,
	GAWLOG_CONFLICT_ZONE_UPDATED                       = 115,
	GAWLOG_PLACEHOLDER                                 = 116,
	GAWLOG_PLACEHOLDER01                               = 117,
	CONVERSATION_PLAYEDFOVO                            = 118,
	KISMET_DUPLICATE_EVENT_COUNT                       = 119,
	eventEnumID_MAX                                    = 120
};*/

// Enum Engine.BioRemoteLogger.sessionStatus
/*enum sessionStatus
{
	SESSION_INACTIVE                                   = 0,
	SESSION_ACTIVE                                     = 1,
	SESSION_MAX                                        = 2
};*/

// Enum Engine.CameraShake.EInitialOscillatorOffset
/*enum EInitialOscillatorOffset
{
	EOO_OffsetRandom                                   = 0,
	EOO_OffsetZero                                     = 1,
	EOO_MAX                                            = 2
};*/

// Enum Engine.FontImportOptions.EFontImportCharacterSet
/*enum EFontImportCharacterSet
{
	FontICS_Default                                    = 0,
	FontICS_Ansi                                       = 1,
	FontICS_Symbol                                     = 2,
	FontICS_MAX                                        = 3
};*/

// Enum Engine.Texture.TextureCompressionSettings
/*enum TextureCompressionSettings
{
	TC_Default                                         = 0,
	TC_Normalmap                                       = 1,
	TC_Displacementmap                                 = 2,
	TC_NormalmapAlpha                                  = 3,
	TC_Grayscale                                       = 4,
	TC_HighDynamicRange                                = 5,
	TC_OneBitAlpha                                     = 6,
	TC_NormalmapUncompressed                           = 7,
	TC_NormalmapBC5                                    = 8,
	TC_OneBitMonochrome                                = 9,
	TC_NormalmapHQ                                     = 10,
	TC_BC7                                             = 11,
	TC_NormalmapBC7                                    = 12,
	TC_MAX                                             = 13
};*/

// Enum Engine.Texture.EPixelFormat
/*enum EPixelFormat
{
	PF_Unknown                                         = 0,
	PF_A32B32G32R32F                                   = 1,
	PF_A8R8G8B8                                        = 2,
	PF_G8                                              = 3,
	PF_G16                                             = 4,
	PF_DXT1                                            = 5,
	PF_DXT3                                            = 6,
	PF_DXT5                                            = 7,
	PF_UYVY                                            = 8,
	PF_FloatRGB                                        = 9,
	PF_FloatRGBA                                       = 10,
	PF_DepthStencil                                    = 11,
	PF_ShadowDepth                                     = 12,
	PF_FilteredShadowDepth                             = 13,
	PF_R32F                                            = 14,
	PF_G16R16                                          = 15,
	PF_G16R16F                                         = 16,
	PF_G16R16F_FILTER                                  = 17,
	PF_G32R32F                                         = 18,
	PF_A2B10G10R10                                     = 19,
	PF_A16B16G16R16_UNORM                              = 20,
	PF_D24                                             = 21,
	PF_R16F                                            = 22,
	PF_R16F_FILTER                                     = 23,
	PF_BC5                                             = 24,
	PF_V8U8                                            = 25,
	PF_A1                                              = 26,
	PF_NormalMap_LQ                                    = 27,
	PF_NormalMap_HQ                                    = 28,
	PF_A16B16G16R16_FLOAT                              = 29,
	PF_A16B16G16R16_SNORM                              = 30,
	PF_FloatR11G11B10                                  = 31,
	PF_A4R4G4B4                                        = 32,
	PF_R5G6B5                                          = 33,
	PF_G8R8                                            = 34,
	PF_R8_UNORM                                        = 35,
	PF_R8_UINT                                         = 36,
	PF_R8_SINT                                         = 37,
	PF_R16_FLOAT                                       = 38,
	PF_R16_UNORM                                       = 39,
	PF_R16_UINT                                        = 40,
	PF_R16_SINT                                        = 41,
	PF_R8G8_UNORM                                      = 42,
	PF_R8G8_UINT                                       = 43,
	PF_R8G8_SINT                                       = 44,
	PF_R16G16_FLOAT                                    = 45,
	PF_R16G16_UNORM                                    = 46,
	PF_R16G16_UINT                                     = 47,
	PF_R16G16_SINT                                     = 48,
	PF_R32_FLOAT                                       = 49,
	PF_R32_UINT                                        = 50,
	PF_R32_SINT                                        = 51,
	PF_A8                                              = 52,
	PF_BC7                                             = 53,
	EPixelFormat_MAX                                   = 54
};*/

// Enum Engine.Texture.TextureFilter
/*enum TextureFilter
{
	TF_Nearest                                         = 0,
	TF_Linear                                          = 1,
	TF_MAX                                             = 2
};*/

// Enum Engine.Texture.TextureAddress
/*enum TextureAddress
{
	TA_Wrap                                            = 0,
	TA_Clamp                                           = 1,
	TA_Mirror                                          = 2,
	TA_MAX                                             = 3
};*/

// Enum Engine.Texture.TextureGroup
/*enum TextureGroup
{
	TEXTUREGROUP_World                                 = 0,
	TEXTUREGROUP_WorldNormalMap                        = 1,
	TEXTUREGROUP_Lightmap                              = 2,
	TEXTUREGROUP_Shadowmap                             = 3,
	TEXTUREGROUP_RenderTarget                          = 4,
	TEXTUREGROUP_Character_Diff                        = 5,
	TEXTUREGROUP_Character_Norm                        = 6,
	TEXTUREGROUP_Character_Spec                        = 7,
	TEXTUREGROUP_Environment                           = 8,
	TEXTUREGROUP_Environment01                         = 9,
	TEXTUREGROUP_Environment02                         = 10,
	TEXTUREGROUP_Environment03                         = 11,
	TEXTUREGROUP_VFX                                   = 12,
	TEXTUREGROUP_VFX01                                 = 13,
	TEXTUREGROUP_VFX02                                 = 14,
	TEXTUREGROUP_VFX03                                 = 15,
	TEXTUREGROUP_UI                                    = 16,
	TEXTUREGROUP_AmbientLightMap                       = 17,
	TEXTUREGROUP_Environment04                         = 18,
	TEXTUREGROUP_VFX04                                 = 19,
	TEXTUREGROUP_APL                                   = 20,
	TEXTUREGROUP_APL01                                 = 21,
	TEXTUREGROUP_APL02                                 = 22,
	TEXTUREGROUP_APL03                                 = 23,
	TEXTUREGROUP_Character                             = 24,
	TEXTUREGROUP_Promotional                           = 25,
	TEXTUREGROUP_ColorLookupTable                      = 26,
	TEXTUREGROUP_MAX                                   = 27
};*/

// Enum Engine.Texture.TextureMipGenSettings
/*enum TextureMipGenSettings
{
	TMGS_FromTextureGroup                              = 0,
	TMGS_SimpleAverage                                 = 1,
	TMGS_Sharpen0                                      = 2,
	TMGS_Sharpen1                                      = 3,
	TMGS_Sharpen2                                      = 4,
	TMGS_Sharpen3                                      = 5,
	TMGS_Sharpen4                                      = 6,
	TMGS_Sharpen5                                      = 7,
	TMGS_Sharpen6                                      = 8,
	TMGS_Sharpen7                                      = 9,
	TMGS_Sharpen8                                      = 10,
	TMGS_Sharpen9                                      = 11,
	TMGS_Sharpen10                                     = 12,
	TMGS_MAX                                           = 13
};*/

// Enum Engine.UIRoot.EUIWidgetFace
/*enum EUIWidgetFace
{
	UIFACE_Left                                        = 0,
	UIFACE_Top                                         = 1,
	UIFACE_Right                                       = 2,
	UIFACE_Bottom                                      = 3,
	UIFACE_MAX                                         = 4
};*/

// Enum Engine.UIRoot.EUIOrientation
/*enum EUIOrientation
{
	UIORIENT_Horizontal                                = 0,
	UIORIENT_Vertical                                  = 1,
	UIORIENT_MAX                                       = 2
};*/

// Enum Engine.UIRoot.EColumnHeaderState
/*enum EColumnHeaderState
{
	COLUMNHEADER_Normal                                = 0,
	COLUMNHEADER_PrimarySort                           = 1,
	COLUMNHEADER_SecondarySort                         = 2,
	COLUMNHEADER_MAX                                   = 3
};*/

// Enum Engine.WorldInfo.ENetMode
/*enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3,
	NM_MAX                                             = 4
};*/

// Enum Engine.WorldInfo.EConsoleType
/*enum EConsoleType
{
	CONSOLE_Any                                        = 0,
	CONSOLE_Xbox360                                    = 1,
	CONSOLE_PS3                                        = 2,
	CONSOLE_Mobile                                     = 3,
	CONSOLE_IPhone                                     = 4,
	CONSOLE_Tegra                                      = 5,
	CONSOLE_Dingo                                      = 6,
	CONSOLE_Orbis                                      = 7,
	CONSOLE_MAX                                        = 8
};*/

// Enum Engine.UIRoot.EInputPlatformType
/*enum EInputPlatformType
{
	IPT_PC                                             = 0,
	IPT                                                = 1,
	IPT_PS3                                            = 2,
	IPT_MAX                                            = 3
};*/

// Enum Engine.UIRoot.ERotationAnchor
/*enum ERotationAnchor
{
	RA_Absolute                                        = 0,
	RA_Center                                          = 1,
	RA_PivotLeft                                       = 2,
	RA_PivotRight                                      = 3,
	RA_PivotTop                                        = 4,
	RA_PivotBottom                                     = 5,
	RA_UpperLeft                                       = 6,
	RA_UpperRight                                      = 7,
	RA_LowerLeft                                       = 8,
	RA_LowerRight                                      = 9,
	RA_MAX                                             = 10
};*/

// Enum Engine.UIRoot.EUIAlignment
/*enum EUIAlignment
{
	UIALIGN_Left                                       = 0,
	UIALIGN_Center                                     = 1,
	UIALIGN_Right                                      = 2,
	UIALIGN_Default                                    = 3,
	UIALIGN_MAX                                        = 4
};*/

// Enum Engine.UIRoot.ETextAutoScaleMode
/*enum ETextAutoScaleMode
{
	UIAUTOSCALE_None                                   = 0,
	UIAUTOSCALE_Normal                                 = 1,
	UIAUTOSCALE_Justified                              = 2,
	UIAUTOSCALE_ResolutionBased                        = 3,
	UIAUTOSCALE_MAX                                    = 4
};*/

// Enum Engine.UIRoot.ETextClipMode
/*enum ETextClipMode
{
	CLIP_None                                          = 0,
	CLIP_Normal                                        = 1,
	CLIP_Ellipsis                                      = 2,
	CLIP_Wrap                                          = 3,
	CLIP_MAX                                           = 4
};*/

// Enum Engine.UIRoot.EUIAutoSizeConstraintType
/*enum EUIAutoSizeConstraintType
{
	UIAUTOSIZEREGION_Minimum                           = 0,
	UIAUTOSIZEREGION_Maximum                           = 1,
	UIAUTOSIZEREGION_MAX                               = 2
};*/

// Enum Engine.UIRoot.EUIDefaultPenColor
/*enum EUIDefaultPenColor
{
	UIPEN_White                                        = 0,
	UIPEN_Black                                        = 1,
	UIPEN_Grey                                         = 2,
	UIPEN_MAX                                          = 3
};*/

// Enum Engine.UIRoot.EUIAspectRatioConstraint
/*enum EUIAspectRatioConstraint
{
	UIASPECTRATIO_AdjustNone                           = 0,
	UIASPECTRATIO_AdjustWidth                          = 1,
	UIASPECTRATIO_AdjustHeight                         = 2,
	UIASPECTRATIO_MAX                                  = 3
};*/

// Enum Engine.UIRoot.EMaterialAdjustmentType
/*enum EMaterialAdjustmentType
{
	ADJUST_None                                        = 0,
	ADJUST_Normal                                      = 1,
	ADJUST_Justified                                   = 2,
	ADJUST_Bound                                       = 3,
	ADJUST_Stretch                                     = 4,
	ADJUST_MAX                                         = 5
};*/

// Enum Engine.UIRoot.EUIDataProviderFieldType
/*enum EUIDataProviderFieldType
{
	DATATYPE_Property                                  = 0,
	DATATYPE_Provider                                  = 1,
	DATATYPE_RangeProperty                             = 2,
	DATATYPE_NetIdProperty                             = 3,
	DATATYPE_Collection                                = 4,
	DATATYPE_ProviderCollection                        = 5,
	DATATYPE_MAX                                       = 6
};*/

// Enum Engine.UIRoot.ESplitscreenRenderMode
/*enum ESplitscreenRenderMode
{
	SPLITRENDER_Fullscreen                             = 0,
	SPLITRENDER_PlayerOwner                            = 1,
	SPLITRENDER_MAX                                    = 2
};*/

// Enum Engine.UIRoot.EEditBoxCharacterSet
/*enum EEditBoxCharacterSet
{
	CHARSET_All                                        = 0,
	CHARSET_NoSpecial                                  = 1,
	CHARSET_AlphaOnly                                  = 2,
	CHARSET_NumericOnly                                = 3,
	CHARSET_AlphaNumeric                               = 4,
	CHARSET_MAX                                        = 5
};*/

// Enum Engine.UIRoot.EUIExtentEvalType
/*enum EUIExtentEvalType
{
	UIEXTENTEVAL_Pixels                                = 0,
	UIEXTENTEVAL_PercentSelf                           = 1,
	UIEXTENTEVAL_PercentOwner                          = 2,
	UIEXTENTEVAL_PercentScene                          = 3,
	UIEXTENTEVAL_PercentViewport                       = 4,
	UIEXTENTEVAL_MAX                                   = 5
};*/

// Enum Engine.UIRoot.EPositionEvalType
/*enum EPositionEvalType
{
	EVALPOS_None                                       = 0,
	EVALPOS_PixelViewport                              = 1,
	EVALPOS_PixelScene                                 = 2,
	EVALPOS_PixelOwner                                 = 3,
	EVALPOS_PercentageViewport                         = 4,
	EVALPOS_PercentageOwner                            = 5,
	EVALPOS_PercentageScene                            = 6,
	EVALPOS_MAX                                        = 7
};*/

// Enum Engine.UIRoot.EUIDockPaddingEvalType
/*enum EUIDockPaddingEvalType
{
	UIPADDINGEVAL_Pixels                               = 0,
	UIPADDINGEVAL_PercentTarget                        = 1,
	UIPADDINGEVAL_PercentOwner                         = 2,
	UIPADDINGEVAL_PercentScene                         = 3,
	UIPADDINGEVAL_PercentViewport                      = 4,
	UIPADDINGEVAL_MAX                                  = 5
};*/

// Enum Engine.UIRoot.EUIPostProcessGroup
/*enum EUIPostProcessGroup
{
	UIPostProcess_None                                 = 0,
	UIPostProcess_Background                           = 1,
	UIPostProcess_Foreground                           = 2,
	UIPostProcess_BackgroundAndForeground              = 3,
	UIPostProcess_Dynamic                              = 4,
	UIPostProcess_MAX                                  = 5
};*/

// Enum Engine.UIRoot.EScreenInputMode
/*enum EScreenInputMode
{
	INPUTMODE_None                                     = 0,
	INPUTMODE_Locked                                   = 1,
	INPUTMODE_Selective                                = 2,
	INPUTMODE_MatchingOnly                             = 3,
	INPUTMODE_ActiveOnly                               = 4,
	INPUTMODE_Free                                     = 5,
	INPUTMODE_Simultaneous                             = 6,
	INPUTMODE_MAX                                      = 7
};*/

// Enum Engine.UIRoot.ENavigationLinkType
/*enum ENavigationLinkType
{
	NAVLINK_Automatic                                  = 0,
	NAVLINK_Manual                                     = 1,
	NAVLINK_MAX                                        = 2
};*/

// Enum Engine.UIRoot.EUIListElementState
/*enum EUIListElementState
{
	ELEMENT_Normal                                     = 0,
	ELEMENT_Active                                     = 1,
	ELEMENT_Selected                                   = 2,
	ELEMENT_UnderCursor                                = 3,
	ELEMENT_MAX                                        = 4
};*/

// Enum Engine.CoverGroup.ECoverGroupFillAction
/*enum ECoverGroupFillAction
{
	CGFA_Overwrite                                     = 0,
	CGFA_Add                                           = 1,
	CGFA_Remove                                        = 2,
	CGFA_Clear                                         = 3,
	CGFA_Cylinder                                      = 4,
	CGFA_MAX                                           = 5
};*/

// Enum Engine.CoverLink.ECoverAction
/*enum ECoverAction
{
	CA_Default                                         = 0,
	CA_BlindLeft                                       = 1,
	CA_BlindRight                                      = 2,
	CA_LeanLeft                                        = 3,
	CA_LeanRight                                       = 4,
	CA_PopUp                                           = 5,
	CA_BlindUp                                         = 6,
	CA_PeekLeft                                        = 7,
	CA_PeekRight                                       = 8,
	CA_PeekUp                                          = 9,
	CA_SwatTurn                                        = 10,
	CA_Aimback                                         = 11,
	CA_MAX                                             = 12
};*/

// Enum Engine.CoverLink.ECoverDirection
/*enum ECoverDirection
{
	CD_Default                                         = 0,
	CD_Left                                            = 1,
	CD_Right                                           = 2,
	CD_Up                                              = 3,
	CD_MAX                                             = 4
};*/

// Enum Engine.CoverLink.ECoverType
/*enum ECoverType
{
	CT_None                                            = 0,
	CT_Standing                                        = 1,
	CT_MidLevel                                        = 2,
	CT_MAX                                             = 3
};*/

// Enum Engine.CoverLink.ECoverLocationDescription
/*enum ECoverLocationDescription
{
	CoverDesc_None                                     = 0,
	CoverDesc_InWindow                                 = 1,
	CoverDesc_InDoorway                                = 2,
	CoverDesc_BehindCar                                = 3,
	CoverDesc_BehindTruck                              = 4,
	CoverDesc_OnTruck                                  = 5,
	CoverDesc_BehindBarrier                            = 6,
	CoverDesc_BehindColumn                             = 7,
	CoverDesc_BehindCrate                              = 8,
	CoverDesc_BehindWall                               = 9,
	CoverDesc_BehindStatue                             = 10,
	CoverDesc_BehindSandbags                           = 11,
	CoverDesc_MAX                                      = 12
};*/

// Enum Engine.CoverLink.EFireLinkID
/*enum EFireLinkID
{
	FLI_FireLink                                       = 0,
	FLI_RejectedFireLink                               = 1,
	FLI_MAX                                            = 2
};*/

// Enum Engine.StaticMeshComponent.LightMapEncodingType
/*enum LightMapEncodingType
{
	LMET_UE3                                           = 0,
	LMET_Vector                                        = 1,
	LMET_Simple                                        = 2,
	LMET_MAX                                           = 3
};*/

// Enum Engine.UIDataProvider.EProviderAccessType
/*enum EProviderAccessType
{
	ACCESS_ReadOnly                                    = 0,
	ACCESS_PerField                                    = 1,
	ACCESS_WriteAll                                    = 2,
	ACCESS_MAX                                         = 3
};*/

// Enum Engine.DecalComponent.EDecalTransform
/*enum EDecalTransform
{
	DecalTransform_OwnerAbsolute                       = 0,
	DecalTransform_OwnerRelative                       = 1,
	DecalTransform_SpawnRelative                       = 2,
	DecalTransform_MAX                                 = 3
};*/

// Enum Engine.DecalComponent.EFilterMode
/*enum EFilterMode
{
	FM_None                                            = 0,
	FM_Ignore                                          = 1,
	FM_Affect                                          = 2,
	FM_MAX                                             = 3
};*/

// Enum Engine.Material.EBlendMode
/*enum EBlendMode
{
	BLEND_Opaque                                       = 0,
	BLEND_Masked                                       = 1,
	BLEND_Translucent                                  = 2,
	BLEND_Additive                                     = 3,
	BLEND_Modulate                                     = 4,
	BLEND_SoftMasked                                   = 5,
	BLEND_AlphaComposite                               = 6,
	BLEND_MAX                                          = 7
};*/

// Enum Engine.Material.EMaterialLightingModel
/*enum EMaterialLightingModel
{
	MLM_Phong                                          = 0,
	MLM_NonDirectional                                 = 1,
	MLM_Unlit                                          = 2,
	MLM_SHPRT                                          = 3,
	MLM_Custom                                         = 4,
	MLM_Anisotropic                                    = 5,
	MLM_MAX                                            = 6
};*/

// Enum Engine.Material.EBIOPhysicalMaterialAutoEnum
/*enum EBIOPhysicalMaterialAutoEnum
{
	PHYM_Empty                                         = 0,
	PHYM_MAX                                           = 1
};*/

// Enum Engine.Material.EXbox360GammaQuality
/*enum EXbox360GammaQuality
{
	XGQ_Default                                        = 0,
	XGQ_High                                           = 1,
	XGQ_Low                                            = 2,
	XGQ_MAX                                            = 3
};*/

// Enum Engine.EngineTypes.ELightingBuildQuality
/*enum ELightingBuildQuality
{
	Quality_Preview                                    = 0,
	Quality_Medium                                     = 1,
	Quality_High                                       = 2,
	Quality_Production                                 = 3,
	Quality_MAX                                        = 4
};*/

// Enum Engine.DistributionFloatParameterBase.DistributionParamMode
/*enum DistributionParamMode
{
	DPM_Normal                                         = 0,
	DPM_Abs                                            = 1,
	DPM_Direct                                         = 2,
	DPM_MAX                                            = 3
};*/

// Enum Engine.DoorMarker.EDoorType
/*enum EDoorType
{
	DOOR_Shoot                                         = 0,
	DOOR_Touch                                         = 1,
	DOOR_MAX                                           = 2
};*/

// Enum Engine.ParticleSystem.EParticleSystemUpdateMode
/*enum EParticleSystemUpdateMode
{
	EPSUM_RealTime                                     = 0,
	EPSUM_FixedTime                                    = 1,
	EPSUM_MAX                                          = 2
};*/

// Enum Engine.ParticleSystem.ParticleSystemLODMethod
/*enum ParticleSystemLODMethod
{
	PARTICLESYSTEMLODMETHOD_Automatic                  = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet                  = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic          = 2,
	PARTICLESYSTEMLODMETHOD_MAX                        = 3
};*/

// Enum Engine.ParticleSystem.EParticleSystemOcclusionBoundsMethod
/*enum EParticleSystemOcclusionBoundsMethod
{
	EPSOBM_None                                        = 0,
	EPSOBM_ParticleBounds                              = 1,
	EPSOBM_CustomBounds                                = 2,
	EPSOBM_MAX                                         = 3
};*/

// Enum Engine.ParticleSystemComponent.EParticleSysParamType
/*enum EParticleSysParamType
{
	PSPT_None                                          = 0,
	PSPT_Scalar                                        = 1,
	PSPT_Vector                                        = 2,
	PSPT_Color                                         = 3,
	PSPT_Actor                                         = 4,
	PSPT_Material                                      = 5,
	PSPT_MAX                                           = 6
};*/

// Enum Engine.ParticleSystemComponent.ParticleReplayState
/*enum ParticleReplayState
{
	PRS_Disabled                                       = 0,
	PRS_Capturing                                      = 1,
	PRS_Replaying                                      = 2,
	PRS_MAX                                            = 3
};*/

// Enum Engine.ParticleSystemComponent.EParticleEventType
/*enum EParticleEventType
{
	EPET_Any                                           = 0,
	EPET_Spawn                                         = 1,
	EPET_Death                                         = 2,
	EPET_Collision                                     = 3,
	EPET_Kismet                                        = 4,
	EPET_MAX                                           = 5
};*/

// Enum Engine.Engine.EBioUnTexCompressSetting
/*enum EBioUnTexCompressSetting
{
	BioTCS_NvTT_NoCuda                                 = 0,
	BioTCS_NvTT_Cuda                                   = 1,
	BioTCS_NvTT_MAX                                    = 2
};*/

// Enum Engine.Engine.ETransitionType
/*enum ETransitionType
{
	TT_None                                            = 0,
	TT_Paused                                          = 1,
	TT_Loading                                         = 2,
	TT_Saving                                          = 3,
	TT_Connecting                                      = 4,
	TT_Precaching                                      = 5,
	TT_MAX                                             = 6
};*/

// Enum Engine.FileWriter.FWFileType
/*enum FWFileType
{
	FWFT_Log                                           = 0,
	FWFT_Stats                                         = 1,
	FWFT_HTML                                          = 2,
	FWFT_User                                          = 3,
	FWFT_Debug                                         = 4,
	FWFT_MAX                                           = 5
};*/

// Enum Engine.FluidInfluenceComponent.EInfluenceType
/*enum EInfluenceType
{
	Fluid_Flow                                         = 0,
	Fluid_Raindrops                                    = 1,
	Fluid_Wave                                         = 2,
	Fluid_Sphere                                       = 3,
	Fluid_MAX                                          = 4
};*/

// Enum Engine.ForceFeedbackWaveform.EWaveformFunction
/*enum EWaveformFunction
{
	WF_Constant                                        = 0,
	WF_LinearIncreasing                                = 1,
	WF_LinearDecreasing                                = 2,
	WF_Sin0to90                                        = 3,
	WF_Sin90to180                                      = 4,
	WF_Sin0to180                                       = 5,
	WF_Noise                                           = 6,
	WF_MAX                                             = 7
};*/

// Enum Engine.GameEngine.EFullyLoadPackageType
/*enum EFullyLoadPackageType
{
	FULLYLOAD_Map                                      = 0,
	FULLYLOAD_Game_PreLoadClass                        = 1,
	FULLYLOAD_Game_PostLoadClass                       = 2,
	FULLYLOAD_Always                                   = 3,
	FULLYLOAD_Mutator                                  = 4,
	FULLYLOAD_MAX                                      = 5
};*/

// Enum Engine.GameInfo.EStandbyType
/*enum EStandbyType
{
	STDBY_Rx                                           = 0,
	STDBY_Tx                                           = 1,
	STDBY_BadPing                                      = 2,
	STDBY_MAX                                          = 3
};*/

// Enum Engine.Settings.EPropertyValueMappingType
/*enum EPropertyValueMappingType
{
	PVMT_RawValue                                      = 0,
	PVMT_PredefinedValues                              = 1,
	PVMT_Ranged                                        = 2,
	PVMT_IdMapped                                      = 3,
	PVMT_MAX                                           = 4
};*/

// Enum Engine.GameViewportClient.ESplitScreenType
/*enum ESplitScreenType
{
	eSST_NONE                                          = 0,
	eSST_2P_HORIZONTAL                                 = 1,
	eSST_2P_VERTICAL                                   = 2,
	eSST_3P_FAVOR_TOP                                  = 3,
	eSST_3P_FAVOR_BOTTOM                               = 4,
	eSST_4P                                            = 5,
	eSST_MAX                                           = 6
};*/

// Enum Engine.GameViewportClient.ESafeZoneType
/*enum ESafeZoneType
{
	eSZ_TOP                                            = 0,
	eSZ_BOTTOM                                         = 1,
	eSZ_LEFT                                           = 2,
	eSZ_RIGHT                                          = 3,
	eSZ_MAX                                            = 4
};*/

// Enum Engine.Interface_NavMeshPathObstacle.EEdgeHandlingStatus
/*enum EEdgeHandlingStatus
{
	EHS_AddedBothDirs                                  = 0,
	EHS_Added0to1                                      = 1,
	EHS_Added1to0                                      = 2,
	EHS_AddedNone                                      = 3,
	EHS_MAX                                            = 4
};*/

// Enum Engine.InterpData.EBioBinkAsyncState
/*enum EBioBinkAsyncState
{
	BioBinkAsync_Closed                                = 0,
	BioBinkAsync_Preloading                            = 1,
	BioBinkAsync_PreloadComplete                       = 2,
	BioBinkAsync_Running                               = 3,
	BioBinkAsync_MAX                                   = 4
};*/

// Enum Engine.InterpGroup.ESFXFindByTagTypes
/*enum ESFXFindByTagTypes
{
	FindActorByTag                                     = 0,
	FindActorByNode                                    = 1,
	UseGroupActor                                      = 2,
	ESFXFindByTagTypes_MAX                             = 3
};*/

// Enum Engine.InterpTrackFaceFX.EBioAutoSetFXAnimTrack
/*enum EBioAutoSetFXAnimTrack
{
	FaceFXAnimTrack_Unset                              = 0,
	FaceFXAnimTrack_MAX                                = 1
};*/

// Enum Engine.InterpTrackFaceFX.EBioAutoSetFXAnimGroupTrack
/*enum EBioAutoSetFXAnimGroupTrack
{
	FaceFXAnimGroupTrack_Unset                         = 0,
	FaceFXAnimGroupTrack_MAX                           = 1
};*/

// Enum Engine.InterpTrackFaceFX.EBioAutoSetFXAnimSeqTrack
/*enum EBioAutoSetFXAnimSeqTrack
{
	FaceFXAnimSeqTrack_Unset                           = 0,
	FaceFXAnimSeqTrack_MAX                             = 1
};*/

// Enum Engine.InterpTrackToggle.ETrackToggleAction
/*enum ETrackToggleAction
{
	ETTA_Off                                           = 0,
	ETTA_On                                            = 1,
	ETTA_Toggle                                        = 2,
	ETTA_Trigger                                       = 3,
	ETTA_MAX                                           = 4
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackCondition
/*enum EVisibilityTrackCondition
{
	EVTC_Always                                        = 0,
	EVTC_GoreEnabled                                   = 1,
	EVTC_GoreDisabled                                  = 2,
	EVTC_MAX                                           = 3
};*/

// Enum Engine.InterpTrackVisibility.EVisibilityTrackAction
/*enum EVisibilityTrackAction
{
	EVTA_Hide                                          = 0,
	EVTA_Show                                          = 1,
	EVTA_Toggle                                        = 2,
	EVTA_MAX                                           = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveFrame
/*enum EInterpTrackMoveFrame
{
	IMF_World                                          = 0,
	IMF_RelativeToInitial                              = 1,
	IMF_AnchorObject                                   = 2,
	IMF_MAX                                            = 3
};*/

// Enum Engine.InterpTrackMove.EInterpTrackMoveRotMode
/*enum EInterpTrackMoveRotMode
{
	IMR_Keyframed                                      = 0,
	IMR_LookAtGroup                                    = 1,
	IMR_MAX                                            = 2
};*/

// Enum Engine.LevelStreamingVolume.EStreamingVolumeUsage
/*enum EStreamingVolumeUsage
{
	SVB_Loading                                        = 0,
	SVB_LoadingAndVisibility                           = 1,
	SVB_VisibilityBlockingOnLoad                       = 2,
	SVB_BlockingOnLoad                                 = 3,
	SVB_LoadingNotVisible                              = 4,
	SVB_MAX                                            = 5
};*/

// Enum Engine.PostProcessChain.EAddPostProcessEffectCombineType
/*enum EAddPostProcessEffectCombineType
{
	EAPPE_Override                                     = 0,
	EAPPE_Combine                                      = 1,
	EAPPE_MAX                                          = 2
};*/

// Enum Engine.MaterialExpressionAntialiasedTextureMask.ETextureColorChannel
/*enum ETextureColorChannel
{
	TCC_Red                                            = 0,
	TCC_Green                                          = 1,
	TCC_Blue                                           = 2,
	TCC_Alpha                                          = 3,
	TCC_MAX                                            = 4
};*/

// Enum Engine.MaterialExpressionCustom.ECustomMaterialOutputType
/*enum ECustomMaterialOutputType
{
	CMOT_Float1                                        = 0,
	CMOT_Float2                                        = 1,
	CMOT_Float3                                        = 2,
	CMOT_Float4                                        = 3,
	CMOT_MAX                                           = 4
};*/

// Enum Engine.MaterialExpressionSceneTexture.ESceneTextureType
/*enum ESceneTextureType
{
	SceneTex_Lighting                                  = 0,
	SceneTex_MAX                                       = 1
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransformSource
/*enum EMaterialVectorCoordTransformSource
{
	TRANSFORMSOURCE_World                              = 0,
	TRANSFORMSOURCE_Local                              = 1,
	TRANSFORMSOURCE_Tangent                            = 2,
	TRANSFORMSOURCE_MAX                                = 3
};*/

// Enum Engine.MaterialExpressionTransform.EMaterialVectorCoordTransform
/*enum EMaterialVectorCoordTransform
{
	TRANSFORM_World                                    = 0,
	TRANSFORM_View                                     = 1,
	TRANSFORM_Local                                    = 2,
	TRANSFORM_Tangent                                  = 3,
	TRANSFORM_MAX                                      = 4
};*/

// Enum Engine.MaterialExpressionTransformPosition.EMaterialPositionTransform
/*enum EMaterialPositionTransform
{
	TRANSFORMPOS_World                                 = 0,
	TRANSFORMPOS_MAX                                   = 1
};*/

// Enum Engine.Pawn.EPathSearchType
/*enum EPathSearchType
{
	PST_Default                                        = 0,
	PST_Breadth                                        = 1,
	PST_NewBestPathTo                                  = 2,
	PST_Constraint                                     = 3,
	PST_MAX                                            = 4
};*/

// Enum Engine.NxForceFieldGeneric.FFG_ForceFieldCoordinates
/*enum FFG_ForceFieldCoordinates
{
	FFG_CARTESIAN                                      = 0,
	FFG_SPHERICAL                                      = 1,
	FFG_CYLINDRICAL                                    = 2,
	FFG_TOROIDAL                                       = 3,
	FFG_MAX                                            = 4
};*/

// Enum Engine.NxGenericForceFieldBrush.FFB_ForceFieldCoordinates
/*enum FFB_ForceFieldCoordinates
{
	FFB_CARTESIAN                                      = 0,
	FFB_SPHERICAL                                      = 1,
	FFB_CYLINDRICAL                                    = 2,
	FFB_TOROIDAL                                       = 3,
	FFB_MAX                                            = 4
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchEntryType
/*enum EOnlineGameSearchEntryType
{
	OGSET_Property                                     = 0,
	OGSET_LocalizedSetting                             = 1,
	OGSET_ObjectProperty                               = 2,
	OGSET_MAX                                          = 3
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchSortType
/*enum EOnlineGameSearchSortType
{
	OGSSO_Ascending                                    = 0,
	OGSSO_Descending                                   = 1,
	OGSSO_MAX                                          = 2
};*/

// Enum Engine.OnlineGameSearch.EOnlineGameSearchComparisonType
/*enum EOnlineGameSearchComparisonType
{
	OGSCT_Equals                                       = 0,
	OGSCT_NotEquals                                    = 1,
	OGSCT_GreaterThan                                  = 2,
	OGSCT_GreaterThanEquals                            = 3,
	OGSCT_LessThan                                     = 4,
	OGSCT_LessThanEquals                               = 5,
	OGSCT_MAX                                          = 6
};*/

// Enum Engine.OnlinePlayerStorage.EOnlineProfilePropertyOwner
/*enum EOnlineProfilePropertyOwner
{
	OPPO_None                                          = 0,
	OPPO_OnlineService                                 = 1,
	OPPO_Game                                          = 2,
	OPPO_MAX                                           = 3
};*/

// Enum Engine.OnlinePlayerStorage.EOnlinePlayerStorageAsyncState
/*enum EOnlinePlayerStorageAsyncState
{
	OPAS_None                                          = 0,
	OPAS_Read                                          = 1,
	OPAS_Write                                         = 2,
	OPAS_FinishedRead                                  = 3,
	OPAS_FinishedWrite                                 = 4,
	OPAS_MAX                                           = 5
};*/

// Enum Engine.OnlineProfileSettings.EProfileSettingID
/*enum EProfileSettingID
{
	PSI_Unknown                                        = 0,
	PSI_ControllerVibration                            = 1,
	PSI_YInversion                                     = 2,
	PSI_GamerCred                                      = 3,
	PSI_GamerRep                                       = 4,
	PSI_VoiceMuted                                     = 5,
	PSI_VoiceThruSpeakers                              = 6,
	PSI_VoiceVolume                                    = 7,
	PSI_GamerPictureKey                                = 8,
	PSI_GamerMotto                                     = 9,
	PSI_GamerTitlesPlayed                              = 10,
	PSI_GamerAchievementsEarned                        = 11,
	PSI_GameDifficulty                                 = 12,
	PSI_ControllerSensitivity                          = 13,
	PSI_PreferredColor1                                = 14,
	PSI_PreferredColor2                                = 15,
	PSI_AutoAim                                        = 16,
	PSI_AutoCenter                                     = 17,
	PSI_MovementControl                                = 18,
	PSI_RaceTransmission                               = 19,
	PSI_RaceCameraLocation                             = 20,
	PSI_RaceBrakeControl                               = 21,
	PSI_RaceAcceleratorControl                         = 22,
	PSI_GameCredEarned                                 = 23,
	PSI_GameAchievementsEarned                         = 24,
	PSI_EndLiveIds                                     = 25,
	PSI_ProfileVersionNum                              = 26,
	PSI_ProfileSaveCount                               = 27,
	PSI_MAX                                            = 28
};*/

// Enum Engine.OnlineProfileSettings.EProfileDifficultyOptions
/*enum EProfileDifficultyOptions
{
	PDO_Normal                                         = 0,
	PDO_Easy                                           = 1,
	PDO_Hard                                           = 2,
	PDO_MAX                                            = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerSensitivityOptions
/*enum EProfileControllerSensitivityOptions
{
	PCSO_Medium                                        = 0,
	PCSO_Low                                           = 1,
	PCSO_High                                          = 2,
	PCSO_MAX                                           = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfilePreferredColorOptions
/*enum EProfilePreferredColorOptions
{
	PPCO_None                                          = 0,
	PPCO_Black                                         = 1,
	PPCO_White                                         = 2,
	PPCO_Yellow                                        = 3,
	PPCO_Orange                                        = 4,
	PPCO_Pink                                          = 5,
	PPCO_Red                                           = 6,
	PPCO_Purple                                        = 7,
	PPCO_Blue                                          = 8,
	PPCO_Green                                         = 9,
	PPCO_Brown                                         = 10,
	PPCO_Silver                                        = 11,
	PPCO_MAX                                           = 12
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoAimOptions
/*enum EProfileAutoAimOptions
{
	PAAO_Off                                           = 0,
	PAAO_On                                            = 1,
	PAAO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileAutoCenterOptions
/*enum EProfileAutoCenterOptions
{
	PACO_Off                                           = 0,
	PACO_On                                            = 1,
	PACO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileMovementControlOptions
/*enum EProfileMovementControlOptions
{
	PMCO_L_Thumbstick                                  = 0,
	PMCO_R_Thumbstick                                  = 1,
	PMCO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceTransmissionOptions
/*enum EProfileRaceTransmissionOptions
{
	PRTO_Auto                                          = 0,
	PRTO_Manual                                        = 1,
	PRTO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceCameraLocationOptions
/*enum EProfileRaceCameraLocationOptions
{
	PRCLO_Behind                                       = 0,
	PRCLO_Front                                        = 1,
	PRCLO_Inside                                       = 2,
	PRCLO_MAX                                          = 3
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceBrakeControlOptions
/*enum EProfileRaceBrakeControlOptions
{
	PRBCO_Trigger                                      = 0,
	PRBCO_Button                                       = 1,
	PRBCO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileRaceAcceleratorControlOptions
/*enum EProfileRaceAcceleratorControlOptions
{
	PRACO_Trigger                                      = 0,
	PRACO_Button                                       = 1,
	PRACO_MAX                                          = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileYInversionOptions
/*enum EProfileYInversionOptions
{
	PYIO_Off                                           = 0,
	PYIO_On                                            = 1,
	PYIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileXInversionOptions
/*enum EProfileXInversionOptions
{
	PXIO_Off                                           = 0,
	PXIO_On                                            = 1,
	PXIO_MAX                                           = 2
};*/

// Enum Engine.OnlineProfileSettings.EProfileControllerVibrationToggleOptions
/*enum EProfileControllerVibrationToggleOptions
{
	PCVTO_Off                                          = 0,
	PCVTO_IgnoreThis                                   = 1,
	PCVTO_IgnoreThis2                                  = 2,
	PCVTO_On                                           = 3,
	PCVTO_MAX                                          = 4
};*/

// Enum Engine.OnlineProfileSettings.EProfileVoiceThruSpeakersOptions
/*enum EProfileVoiceThruSpeakersOptions
{
	PVTSO_Off                                          = 0,
	PVTSO_On                                           = 1,
	PVTSO_Both                                         = 2,
	PVTSO_MAX                                          = 3
};*/

// Enum Engine.ParticleEmitter.EParticleBurstMethod
/*enum EParticleBurstMethod
{
	EPBM_Instant                                       = 0,
	EPBM_Interpolated                                  = 1,
	EPBM_MAX                                           = 2
};*/

// Enum Engine.ParticleEmitter.EParticleSubUVInterpMethod
/*enum EParticleSubUVInterpMethod
{
	PSUVIM_None                                        = 0,
	PSUVIM_Linear                                      = 1,
	PSUVIM_Linear_Blend                                = 2,
	PSUVIM_Random                                      = 3,
	PSUVIM_Random_Blend                                = 4,
	PSUVIM_MAX                                         = 5
};*/

// Enum Engine.ParticleEmitter.EEmitterRenderMode
/*enum EEmitterRenderMode
{
	ERM_Normal                                         = 0,
	ERM_Point                                          = 1,
	ERM_Cross                                          = 2,
	ERM_None                                           = 3,
	ERM_MAX                                            = 4
};*/

// Enum Engine.ParticleModule.EModuleType
/*enum EModuleType
{
	EPMT_General                                       = 0,
	EPMT_TypeData                                      = 1,
	EPMT_Beam                                          = 2,
	EPMT_Trail                                         = 3,
	EPMT_Spawn                                         = 4,
	EPMT_Required                                      = 5,
	EPMT_Event                                         = 6,
	EPMT_MAX                                           = 7
};*/

// Enum Engine.ParticleModule.EParticleSourceSelectionMethod
/*enum EParticleSourceSelectionMethod
{
	EPSSM_Random                                       = 0,
	EPSSM_Sequential                                   = 1,
	EPSSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleAttractorParticle.EAttractorParticleSelectionMethod
/*enum EAttractorParticleSelectionMethod
{
	EAPSM_Random                                       = 0,
	EAPSM_Sequential                                   = 1,
	EAPSM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetMethod
/*enum Beam2SourceTargetMethod
{
	PEB2STM_Default                                    = 0,
	PEB2STM_UserSet                                    = 1,
	PEB2STM_Emitter                                    = 2,
	PEB2STM_Particle                                   = 3,
	PEB2STM_Actor                                      = 4,
	PEB2STM_MAX                                        = 5
};*/

// Enum Engine.ParticleModuleBeamBase.Beam2SourceTargetTangentMethod
/*enum Beam2SourceTargetTangentMethod
{
	PEB2STTM_Direct                                    = 0,
	PEB2STTM_UserSet                                   = 1,
	PEB2STTM_Distribution                              = 2,
	PEB2STTM_Emitter                                   = 3,
	PEB2STTM_MAX                                       = 4
};*/

// Enum Engine.ParticleModuleBeamModifier.BeamModifierType
/*enum BeamModifierType
{
	PEB2MT_Source                                      = 0,
	PEB2MT_Target                                      = 1,
	PEB2MT_MAX                                         = 2
};*/

// Enum Engine.ParticleModuleCollisionBase.EParticleCollisionComplete
/*enum EParticleCollisionComplete
{
	EPCC_Kill                                          = 0,
	EPCC_Freeze                                        = 1,
	EPCC_HaltCollisions                                = 2,
	EPCC_FreezeTranslation                             = 3,
	EPCC_FreezeRotation                                = 4,
	EPCC_FreezeMovement                                = 5,
	EPCC_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleLocationEmitter.ELocationEmitterSelectionMethod
/*enum ELocationEmitterSelectionMethod
{
	ELESM_Random                                       = 0,
	ELESM_Sequential                                   = 1,
	ELESM_MAX                                          = 2
};*/

// Enum Engine.ParticleModuleLocationPrimitiveCylinder.CylinderHeightAxis
/*enum CylinderHeightAxis
{
	PMLPC_HEIGHTAXIS_X                                 = 0,
	PMLPC_HEIGHTAXIS_Y                                 = 1,
	PMLPC_HEIGHTAXIS_Z                                 = 2,
	PMLPC_HEIGHTAXIS_MAX                               = 3
};*/

// Enum Engine.ParticleModuleOrbit.EOrbitChainMode
/*enum EOrbitChainMode
{
	EOChainMode_Add                                    = 0,
	EOChainMode_Scale                                  = 1,
	EOChainMode_Link                                   = 2,
	EOChainMode_MAX                                    = 3
};*/

// Enum Engine.ParticleModuleOrientationAxisLock.EParticleAxisLock
/*enum EParticleAxisLock
{
	EPAL_NONE                                          = 0,
	EPAL_X                                             = 1,
	EPAL_Y                                             = 2,
	EPAL_Z                                             = 3,
	EPAL_NEGATIVE_X                                    = 4,
	EPAL_NEGATIVE_Y                                    = 5,
	EPAL_NEGATIVE_Z                                    = 6,
	EPAL_ROTATE_X                                      = 7,
	EPAL_ROTATE_Y                                      = 8,
	EPAL_ROTATE_Z                                      = 9,
	EPAL_MAX                                           = 10
};*/

// Enum Engine.ParticleModuleParameterDynamic.EEmitterDynamicParameterValue
/*enum EEmitterDynamicParameterValue
{
	EDPV_UserSet                                       = 0,
	EDPV_VelocityX                                     = 1,
	EDPV_VelocityY                                     = 2,
	EDPV_VelocityZ                                     = 3,
	EDPV_VelocityMag                                   = 4,
	EDPV_MAX                                           = 5
};*/

// Enum Engine.ParticleSpriteEmitter.EParticleScreenAlignment
/*enum EParticleScreenAlignment
{
	PSA_Square                                         = 0,
	PSA_Rectangle                                      = 1,
	PSA_Velocity                                       = 2,
	PSA_TypeSpecific                                   = 3,
	PSA_MAX                                            = 4
};*/

// Enum Engine.ParticleModuleRequired.EParticleSortMode
/*enum EParticleSortMode
{
	PSORTMODE_None                                     = 0,
	PSORTMODE_ViewProjDepth                            = 1,
	PSORTMODE_DistanceToView                           = 2,
	PSORTMODE_Age_OldestFirst                          = 3,
	PSORTMODE_Age_NewestFirst                          = 4,
	PSORTMODE_MAX                                      = 5
};*/

// Enum Engine.ParticleModuleRequired.EEmitterNormalsMode
/*enum EEmitterNormalsMode
{
	ENM_CameraFacing                                   = 0,
	ENM_Spherical                                      = 1,
	ENM_Cylindrical                                    = 2,
	ENM_MAX                                            = 3
};*/

// Enum Engine.ParticleModuleTrailSource.ETrail2SourceMethod
/*enum ETrail2SourceMethod
{
	PET2SRCM_Default                                   = 0,
	PET2SRCM_Particle                                  = 1,
	PET2SRCM_Actor                                     = 2,
	PET2SRCM_MAX                                       = 3
};*/

// Enum Engine.ParticleModuleTrailSpawn.ETrail2SpawnMethod
/*enum ETrail2SpawnMethod
{
	PET2SM_Emitter                                     = 0,
	PET2SM_Velocity                                    = 1,
	PET2SM_Distance                                    = 2,
	PET2SM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTrailTaper.ETrailTaperMethod
/*enum ETrailTaperMethod
{
	PETTM_None                                         = 0,
	PETTM_Full                                         = 1,
	PETTM_Partial                                      = 2,
	PETTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamMethod
/*enum EBeamMethod
{
	PEBM_Distance                                      = 0,
	PEBM_EndPoints                                     = 1,
	PEBM_EndPoints_Interpolated                        = 2,
	PEBM_UserSet_EndPoints                             = 3,
	PEBM_UserSet_EndPoints_Interpolated                = 4,
	PEBM_MAX                                           = 5
};*/

// Enum Engine.ParticleModuleTypeDataBeam.EBeamEndPointMethod
/*enum EBeamEndPointMethod
{
	PEBEPM_Calculated                                  = 0,
	PEBEPM_Distribution                                = 1,
	PEBEPM_Distribution_Constant                       = 2,
	PEBEPM_MAX                                         = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeam2Method
/*enum EBeam2Method
{
	PEB2M_Distance                                     = 0,
	PEB2M_Target                                       = 1,
	PEB2M_Branch                                       = 2,
	PEB2M_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataBeam2.EBeamTaperMethod
/*enum EBeamTaperMethod
{
	PEBTM_None                                         = 0,
	PEBTM_Full                                         = 1,
	PEBTM_Partial                                      = 2,
	PEBTM_MAX                                          = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshScreenAlignment
/*enum EMeshScreenAlignment
{
	PSMA_MeshFaceCameraWithRoll                        = 0,
	PSMA_MeshFaceCameraWithSpin                        = 1,
	PSMA_MeshFaceCameraWithLockedAxis                  = 2,
	PSMA_MAX                                           = 3
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingUpAxis
/*enum EMeshCameraFacingUpAxis
{
	CameraFacing_NoneUP                                = 0,
	CameraFacing_ZUp                                   = 1,
	CameraFacing_NegativeZUp                           = 2,
	CameraFacing_YUp                                   = 3,
	CameraFacing_NegativeYUp                           = 4,
	CameraFacing_MAX                                   = 5
};*/

// Enum Engine.ParticleModuleTypeDataMesh.EMeshCameraFacingOptions
/*enum EMeshCameraFacingOptions
{
	XAxisFacing_NoUp                                   = 0,
	XAxisFacing_ZUp                                    = 1,
	XAxisFacing_NegativeZUp                            = 2,
	XAxisFacing_YUp                                    = 3,
	XAxisFacing_NegativeYUp                            = 4,
	LockedAxis_ZAxisFacing                             = 5,
	LockedAxis_NegativeZAxisFacing                     = 6,
	LockedAxis_YAxisFacing                             = 7,
	LockedAxis_NegativeYAxisFacing                     = 8,
	VelocityAligned_ZAxisFacing                        = 9,
	VelocityAligned_NegativeZAxisFacing                = 10,
	VelocityAligned_YAxisFacing                        = 11,
	VelocityAligned_NegativeYAxisFacing                = 12,
	EMeshCameraFacingOptions_MAX                       = 13
};*/

// Enum Engine.ParticleModuleTypeDataMeshPhysX.EPhysXMeshRotationMethod
/*enum EPhysXMeshRotationMethod
{
	PMRM_Disabled                                      = 0,
	PMRM_Spherical                                     = 1,
	PMRM_Box                                           = 2,
	PMRM_LongBox                                       = 3,
	PMRM_FlatBox                                       = 4,
	PMRM_Velocity                                      = 5,
	PMRM_MAX                                           = 6
};*/

// Enum Engine.ParticleModuleTypeDataRibbon.ETrailsRenderAxisOption
/*enum ETrailsRenderAxisOption
{
	Trails_CameraUp                                    = 0,
	Trails_SourceUp                                    = 1,
	Trails_WorldUp                                     = 2,
	Trails_MAX                                         = 3
};*/

// Enum Engine.ProcBuildingRuleset.EProcBuildingAxis
/*enum EProcBuildingAxis
{
	EPBAxis_X                                          = 0,
	EPBAxis_Z                                          = 1,
	EPBAxis_MAX                                        = 2
};*/

// Enum Engine.ProcBuilding.EScopeEdge
/*enum EScopeEdge
{
	EPSA_Top                                           = 0,
	EPSA_Bottom                                        = 1,
	EPSA_Left                                          = 2,
	EPSA_Right                                         = 3,
	EPSA_None                                          = 4,
	EPSA_MAX                                           = 5
};*/

// Enum Engine.ProcBuilding.EPBCornerType
/*enum EPBCornerType
{
	EPBC_Default                                       = 0,
	EPBC_Chamfer                                       = 1,
	EPBC_Round                                         = 2,
	EPBC_MAX                                           = 3
};*/

// Enum Engine.ProcBuilding.EBuildingStatsBrowserColumns
/*enum EBuildingStatsBrowserColumns
{
	BSBC_Name                                          = 0,
	BSBC_Ruleset                                       = 1,
	BSBC_NumStaticMeshComps                            = 2,
	BSBC_NumInstancedStaticMeshComps                   = 3,
	BSBC_NumInstancedTris                              = 4,
	BSBC_LightmapMemBytes                              = 5,
	BSBC_ShadowmapMemBytes                             = 6,
	BSBC_LODDiffuseMemBytes                            = 7,
	BSBC_LODLightingMemBytes                           = 8,
	BSBC_MAX                                           = 9
};*/

// Enum Engine.PBRuleNodeEdgeAngle.EProcBuildingEdge
/*enum EProcBuildingEdge
{
	EPBE_Top                                           = 0,
	EPBE_Bottom                                        = 1,
	EPBE_Left                                          = 2,
	EPBE_Right                                         = 3,
	EPBE_MAX                                           = 4
};*/

// Enum Engine.PhysicalMaterial.EPhysEffectType
/*enum EPhysEffectType
{
	EPMET_Impact                                       = 0,
	EPMET_Slide                                        = 1,
	EPMET_MAX                                          = 2
};*/

// Enum Engine.PhysXDestructibleStructure.EPhysXDestructibleChunkState
/*enum EPhysXDestructibleChunkState
{
	DCS_StaticRoot                                     = 0,
	DCS_StaticChild                                    = 1,
	DCS_DynamicRoot                                    = 2,
	DCS_DynamicChild                                   = 3,
	DCS_Hidden                                         = 4,
	DCS_MAX                                            = 5
};*/

// Enum Engine.PhysXParticleSystem.ESimulationMethod
/*enum ESimulationMethod
{
	ESM_SPH                                            = 0,
	ESM_NO_PARTICLE_INTERACTION                        = 1,
	ESM_MIXED_MODE                                     = 2,
	ESM_MAX                                            = 3
};*/

// Enum Engine.PhysXParticleSystem.EPacketSizeMultiplier
/*enum EPacketSizeMultiplier
{
	EPSM                                               = 0,
	EPSM01                                             = 1,
	EPSM02                                             = 2,
	EPSM03                                             = 3,
	EPSM04                                             = 4,
	EPSM05                                             = 5,
	EPSM_MAX                                           = 6
};*/

// Enum Engine.SceneCaptureComponent.ESceneCaptureViewMode
/*enum ESceneCaptureViewMode
{
	SceneCapView_Lit                                   = 0,
	SceneCapView_Unlit                                 = 1,
	SceneCapView_LitNoShadows                          = 2,
	SceneCapView_Wire                                  = 3,
	SceneCapView_MAX                                   = 4
};*/

// Enum Engine.RB_BodySetup.EBioPartGroup
/*enum EBioPartGroup
{
	BIOPARTGROUP_NONE                                  = 0,
	BIOPARTGROUP_INHERIT_FROM_PARENT                   = 1,
	BIOPARTGROUP_HEAD                                  = 2,
	BIOPARTGROUP_LEFT_LEG                              = 3,
	BIOPARTGROUP_RIGHT_LEG                             = 4,
	BIOPARTGROUP_LEFT_ARM                              = 5,
	BIOPARTGROUP_RIGHT_ARM                             = 6,
	BIOPARTGROUP_TORSO                                 = 7,
	BIOPARTGROUP_SPECIAL                               = 8,
	BIOPARTGROUP_MAX                                   = 9
};*/

// Enum Engine.RB_BodySetup.ESleepFamily
/*enum ESleepFamily
{
	SF_Normal                                          = 0,
	SF_Sensitive                                       = 1,
	SF_MAX                                             = 2
};*/

// Enum Engine.RB_RadialForceActor.ERadialForceType
/*enum ERadialForceType
{
	RFT_Force                                          = 0,
	RFT_Impulse                                        = 1,
	RFT_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteFillAction
/*enum ERouteFillAction
{
	RFA_Overwrite                                      = 0,
	RFA_Add                                            = 1,
	RFA_Remove                                         = 2,
	RFA_Clear                                          = 3,
	RFA_MAX                                            = 4
};*/

// Enum Engine.Route.ERouteDirection
/*enum ERouteDirection
{
	ERD_Forward                                        = 0,
	ERD_Reverse                                        = 1,
	ERD_MAX                                            = 2
};*/

// Enum Engine.Route.ERouteType
/*enum ERouteType
{
	ERT_Linear                                         = 0,
	ERT_Loop                                           = 1,
	ERT_Circle                                         = 2,
	ERT_MAX                                            = 3
};*/

// Enum Engine.SeqAct_ActorFactory.EPointSelection
/*enum EPointSelection
{
	PS_Normal                                          = 0,
	PS_Random                                          = 1,
	PS_Reverse                                         = 2,
	PS_MAX                                             = 3
};*/

// Enum Engine.SeqAct_SetMesh.EMeshType
/*enum EMeshType
{
	MeshType_StaticMesh                                = 0,
	MeshType_SkeletalMesh                              = 1,
	MeshType_MAX                                       = 2
};*/

// Enum Engine.SequenceEvent.EWhoTriggers
/*enum EWhoTriggers
{
	WT_PlayerOnly                                      = 0,
	WT_PlayerOnlyLocal                                 = 1,
	WT_PlayerAndSquad                                  = 2,
	WT_Everyone                                        = 3,
	WT_TagList                                         = 4,
	WT_MAX                                             = 5
};*/

// Enum Engine.SeqEvent_ParticleEvent.EParticleEventOutputType
/*enum EParticleEventOutputType
{
	ePARTICLEOUT_Spawn                                 = 0,
	ePARTICLEOUT_Death                                 = 1,
	ePARTICLEOUT_Collision                             = 2,
	ePARTICLEOUT_Kismet                                = 3,
	ePARTICLEOUT_MAX                                   = 4
};*/

// Enum Engine.SFXSceneShopDataInstInterface.ESFXSceneDataProcessMode
/*enum ESFXSceneDataProcessMode
{
	SceneProcessMode_InitGroupInst                     = 0,
	SceneProcessMode_DontCare                          = 1,
	SceneProcessMode_MAX                               = 2
};*/

// Enum Engine.UberPostProcessEffect.EPostProcessAAType
/*enum EPostProcessAAType
{
	PostProcessAA_Off                                  = 0,
	PostProcessAA_FXAA0                                = 1,
	PostProcessAA_FXAA1                                = 2,
	PostProcessAA_FXAA2                                = 3,
	PostProcessAA_FXAA3                                = 4,
	PostProcessAA_FXAA4                                = 5,
	PostProcessAA_FXAA5                                = 6,
	PostProcessAA_MLAA                                 = 7,
	PostProcessAA_SFX_FXAA                             = 8,
	PostProcessAA_MAX                                  = 9
};*/

// Enum Engine.SkelControlBase.EBoneControlSpace
/*enum EBoneControlSpace
{
	BCS_WorldSpace                                     = 0,
	BCS_ActorSpace                                     = 1,
	BCS_ComponentSpace                                 = 2,
	BCS_ParentBoneSpace                                = 3,
	BCS_BoneSpace                                      = 4,
	BCS_OtherBoneSpace                                 = 5,
	BCS_BaseMeshSpace                                  = 6,
	BCS_MAX                                            = 7
};*/

// Enum Engine.SkelControlSpline.ESplineControlRotMode
/*enum ESplineControlRotMode
{
	SCR_NoChange                                       = 0,
	SCR_AlongSpline                                    = 1,
	SCR_Interpolate                                    = 2,
	SCR_MAX                                            = 3
};*/

// Enum Engine.SkeletalMesh.SoftBodyBoneType
/*enum SoftBodyBoneType
{
	SOFTBODYBONE_Fixed                                 = 0,
	SOFTBODYBONE_BreakableAttachment                   = 1,
	SOFTBODYBONE_TwoWayAttachment                      = 2,
	SOFTBODYBONE_MAX                                   = 3
};*/

// Enum Engine.SkeletalMesh.ClothBoneType
/*enum ClothBoneType
{
	CLOTHBONE_Fixed                                    = 0,
	CLOTHBONE_BreakableAttachment                      = 1,
	CLOTHBONE_TearLine                                 = 2,
	CLOTHBONE_MAX                                      = 3
};*/

// Enum Engine.SkeletalMesh.ClothMovementScaleGen
/*enum ClothMovementScaleGen
{
	ECMDM_DistToFixedVert                              = 0,
	ECMDM_VertexBoneWeight                             = 1,
	ECMDM_Empty                                        = 2,
	ECMDM_MAX                                          = 3
};*/

// Enum Engine.SkeletalMesh.TriangleSortOption
/*enum TriangleSortOption
{
	TRISORT_None                                       = 0,
	TRISORT_CenterRadialDistance                       = 1,
	TRISORT_Random                                     = 2,
	TRISORT_Tootle                                     = 3,
	TRISORT_MergeContiguous                            = 4,
	TRISORT_Custom                                     = 5,
	TRISORT_MAX                                        = 6
};*/

// Enum Engine.SoundNodeWave.EDecompressionType
/*enum EDecompressionType
{
	DTYPE_Setup                                        = 0,
	DTYPE_Invalid                                      = 1,
	DTYPE_Preview                                      = 2,
	DTYPE_Native                                       = 3,
	DTYPE_RealTime                                     = 4,
	DTYPE_Procedural                                   = 5,
	DTYPE_Xenon                                        = 6,
	DTYPE_MAX                                          = 7
};*/

// Enum Engine.SpeedTreeComponent.ESpeedTreeMeshType
/*enum ESpeedTreeMeshType
{
	STMT_MinMinusOne                                   = 0,
	STMT_Branches1                                     = 1,
	STMT_Branches2                                     = 2,
	STMT_Fronds                                        = 3,
	STMT_LeafCards                                     = 4,
	STMT_LeafMeshes                                    = 5,
	STMT_Billboards                                    = 6,
	STMT_Max                                           = 7
};*/

// Enum Engine.SVehicleWheel.EWheelSide
/*enum EWheelSide
{
	SIDE_None                                          = 0,
	SIDE_Left                                          = 1,
	SIDE_Right                                         = 2,
	SIDE_MAX                                           = 3
};*/

// Enum Engine.TerrainMaterial.ETerrainMappingType
/*enum ETerrainMappingType
{
	TMT_Auto                                           = 0,
	TMT_XY                                             = 1,
	TMT_XZ                                             = 2,
	TMT_YZ                                             = 3,
	TMT_MAX                                            = 4
};*/

// Enum Engine.TextureFlipBook.TextureFlipBookMethod
/*enum TextureFlipBookMethod
{
	TFBM_UL_ROW                                        = 0,
	TFBM_UL_COL                                        = 1,
	TFBM_UR_ROW                                        = 2,
	TFBM_UR_COL                                        = 3,
	TFBM_LL_ROW                                        = 4,
	TFBM_LL_COL                                        = 5,
	TFBM_LR_ROW                                        = 6,
	TFBM_LR_COL                                        = 7,
	TFBM_RANDOM                                        = 8,
	TFBM_MAX                                           = 9
};*/

// Enum Engine.TextureMovie.EMovieStreamSource
/*enum EMovieStreamSource
{
	MovieStream_File                                   = 0,
	MovieStream_Memory                                 = 1,
	MovieStream_MAX                                    = 2
};*/

// Enum Engine.UIAnimation.EUIAnimationLoopMode
/*enum EUIAnimationLoopMode
{
	UIANIMLOOP_None                                    = 0,
	UIANIMLOOP_Continuous                              = 1,
	UIANIMLOOP_Bounce                                  = 2,
	UIANIMLOOP_MAX                                     = 3
};*/

// Enum Engine.UIAnimation.EUIAnimationInterpMode
/*enum EUIAnimationInterpMode
{
	UIANIMMODE_Linear                                  = 0,
	UIANIMMODE_EaseIn                                  = 1,
	UIANIMMODE_EaseOut                                 = 2,
	UIANIMMODE_EaseInOut                               = 3,
	UIANIMMODE_MAX                                     = 4
};*/

// Enum Engine.UIAnimation.EUIAnimType
/*enum EUIAnimType
{
	EAT_None                                           = 0,
	EAT_Position                                       = 1,
	EAT_PositionOffset                                 = 2,
	EAT_RelPosition                                    = 3,
	EAT_Rotation                                       = 4,
	EAT_RelRotation                                    = 5,
	EAT_Color                                          = 6,
	EAT_Opacity                                        = 7,
	EAT_Visibility                                     = 8,
	EAT_Scale                                          = 9,
	EAT_Left                                           = 10,
	EAT_Top                                            = 11,
	EAT_Right                                          = 12,
	EAT_Bottom                                         = 13,
	EAT_PPBloom                                        = 14,
	EAT_PPBlurSampleSize                               = 15,
	EAT_PPBlurAmount                                   = 16,
	EAT_MAX                                            = 17
};*/

// Enum Engine.UIAnimation.EUIAnimNotifyType
/*enum EUIAnimNotifyType
{
	EANT_WidgetFunction                                = 0,
	EANT_SceneFunction                                 = 1,
	EANT_KismetEvent                                   = 2,
	EANT_Sound                                         = 3,
	EANT_MAX                                           = 4
};*/

// Enum Engine.UIComp_DrawComponents.EFadeType
/*enum EFadeType
{
	EFT_None                                           = 0,
	EFT_Fading                                         = 1,
	EFT_Pulsing                                        = 2,
	EFT_MAX                                            = 3
};*/

// Enum Engine.UICalloutButtonPanel.ECalloutButtonLayoutType
/*enum ECalloutButtonLayoutType
{
	CBLT_None                                          = 0,
	CBLT_DockLeft                                      = 1,
	CBLT_DockRight                                     = 2,
	CBLT_Centered                                      = 3,
	CBLT_Justified                                     = 4,
	CBLT_MAX                                           = 5
};*/

// Enum Engine.UIList.ECellAutoSizeMode
/*enum ECellAutoSizeMode
{
	CELLAUTOSIZE_None                                  = 0,
	CELLAUTOSIZE_Uniform                               = 1,
	CELLAUTOSIZE_Constrain                             = 2,
	CELLAUTOSIZE_AdjustList                            = 3,
	CELLAUTOSIZE_MAX                                   = 4
};*/

// Enum Engine.UIList.ECellLinkType
/*enum ECellLinkType
{
	LINKED_None                                        = 0,
	LINKED_Rows                                        = 1,
	LINKED_Columns                                     = 2,
	LINKED_MAX                                         = 3
};*/

// Enum Engine.UIList.EListWrapBehavior
/*enum EListWrapBehavior
{
	LISTWRAP_None                                      = 0,
	LISTWRAP_Smooth                                    = 1,
	LISTWRAP_Jump                                      = 2,
	LISTWRAP_MAX                                       = 3
};*/

// Enum Engine.UIContextMenu.EContextMenuItemType
/*enum EContextMenuItemType
{
	CMIT_Normal                                        = 0,
	CMIT_Submenu                                       = 1,
	CMIT_Separator                                     = 2,
	CMIT_Check                                         = 3,
	CMIT_Radio                                         = 4,
	CMIT_MAX                                           = 5
};*/

// Enum Engine.UIDataProvider_MenuItem.EMenuOptionType
/*enum EMenuOptionType
{
	MENUOT_ComboReadOnly                               = 0,
	MENUOT_ComboNumeric                                = 1,
	MENUOT_CheckBox                                    = 2,
	MENUOT_Slider                                      = 3,
	MENUOT_Spinner                                     = 4,
	MENUOT_EditBox                                     = 5,
	MENUOT_CollectionCheckBox                          = 6,
	MENUOT_CollapsingList                              = 7,
	MENUOT_MAX                                         = 8
};*/

// Enum Engine.UIDataStore_OnlineStats.EStatsFetchType
/*enum EStatsFetchType
{
	SFT_Player                                         = 0,
	SFT_CenteredOnPlayer                               = 1,
	SFT_Friends                                        = 2,
	SFT_TopRankings                                    = 3,
	SFT_MAX                                            = 4
};*/

// Enum Engine.UISafeRegionPanel.ESafeRegionType
/*enum ESafeRegionType
{
	ESRT_FullRegion                                    = 0,
	ESRT_TextSafeRegion                                = 1,
	ESRT_MAX                                           = 2
};*/

// Enum Engine.Weapon.EWeaponFireType
/*enum EWeaponFireType
{
	EWFT_InstantHit                                    = 0,
	EWFT_Projectile                                    = 1,
	EWFT_Custom                                        = 2,
	EWFT_None                                          = 3,
	EWFT_MAX                                           = 4
};*/


/*
# ========================================================================================= #
# Classes
# ========================================================================================= #
*/

// Class Engine.Engine
// 0x0842 (0x08AA - 0x0068)
class UEngine : public USubsystem
{
public:
	struct FString                                     TinyFontName;                                     		// 0x0068 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     SmallFontName;                                    		// 0x0078 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     MediumFontName;                                   		// 0x0088 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LargeFontName;                                    		// 0x0098 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     SubtitleFontName;                                 		// 0x00A8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<class UFont*>                        AdditionalFonts;                                  		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      AdditionalFontNames;                              		// 0x00C8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ConsoleClassName;                                 		// 0x00D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GameViewportClientClassName;                      		// 0x00E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DataStoreClientClassName;                         		// 0x00F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LocalPlayerClassName;                             		// 0x0108 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultMaterialName;                              		// 0x0118 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultDecalMaterialName;                         		// 0x0128 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultTextureName;                               		// 0x0138 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     WireframeMaterialName;                            		// 0x0148 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     EmissiveTexturedMaterialName;                     		// 0x0158 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GeomMaterialName;                                 		// 0x0168 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultFogVolumeMaterialName;                     		// 0x0178 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     TickMaterialName;                                 		// 0x0188 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     CrossMaterialName;                                		// 0x0198 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VisColorationMaterialInChunkName;                 		// 0x01A8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VisColorationMaterialLoadChunkName;               		// 0x01B8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VisColorationMaterialVisibleChunkName;            		// 0x01C8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VisColorationMaterialMasterMapName;               		// 0x01D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VisColorationMaterialUnloadedName;                		// 0x01E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     BioColorChunkMaterialName;                        		// 0x01F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     BioTranslucentVolumeMaterialName;                 		// 0x0208 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LevelColorationLitMaterialName;                   		// 0x0218 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LevelColorationUnlitMaterialName;                 		// 0x0228 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LightingTexelDensityName;                         		// 0x0238 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ShadedLevelColorationLitMaterialName;             		// 0x0248 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ShadedLevelColorationUnlitMaterialName;           		// 0x0258 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     RemoveSurfaceMaterialName;                        		// 0x0268 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorMaterialName;                          		// 0x0278 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;        		// 0x0288 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;     		// 0x0298 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;          		// 0x02A8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;        		// 0x02B8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;         		// 0x02C8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     HeatmapMaterialName;                              		// 0x02D8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     BoneWeightMaterialName;                           		// 0x02E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     TangentColorMaterialName;                         		// 0x02F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ProcBuildingSimpleMaterialName;                   		// 0x0308 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     BuildingQuadStaticMeshName;                       		// 0x0318 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FColor>                       LightComplexityColors;                            		// 0x0328 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FLinearColor>                 ShaderComplexityColors;                           		// 0x0338 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FStatColorMapping>            StatColorMappings;                                		// 0x0348 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     EditorBrushMaterialName;                          		// 0x0358 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultPhysMaterialName;                          		// 0x0368 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     TerrainErrorMaterialName;                         		// 0x0378 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultOnlineSubsystemName;                       		// 0x0388 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultPostProcessName;                           		// 0x0398 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;             		// 0x03A8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ThumbnailParticleSystemPostProcessName;           		// 0x03B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ThumbnailMaterialPostProcessName;                 		// 0x03C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultUIScenePostProcessName;                    		// 0x03D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultUICaretMaterialName;                       		// 0x03E8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     SceneCaptureReflectActorMaterialName;             		// 0x03F8 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     SceneCaptureCubeActorMaterialName;                		// 0x0408 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ScreenDoorNoiseTextureName;                       		// 0x0418 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     RandomAngleTextureName;                           		// 0x0428 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     RandomNormalTextureName;                          		// 0x0438 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     RandomNormalTextureName2;                         		// 0x0448 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     WeightMapPlaceholderTextureName;                  		// 0x0458 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LightMapDensityTextureName;                       		// 0x0468 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     LightMapDensityNormalName;                        		// 0x0478 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DefaultSoundName;                                 		// 0x0488 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<class ULocalPlayer*>                 GamePlayers;                                      		// 0x0498 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      DeferredCommands;                                 		// 0x04A8 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      NextFrameDeferredCommands;                        		// 0x04B8 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     ScoutClassName;                                   		// 0x04C8 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FBioLayerDetails>             m_BioLayerDetails;                                		// 0x04D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TransitionDescription;                            		// 0x04E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TransitionGameType;                               		// 0x04F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDropNoteInfo>                PendingDroppedNotes;                              		// 0x0508 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     DynamicCoverMeshComponentName;                    		// 0x0518 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FName>                        IgnoreSimulatedFuncWarnings;                      		// 0x0528 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      ConsoleClass;                                     		// 0x0538 (0x0008) [0x0000000000000000]              
	class UClass*                                      GameViewportClientClass;                          		// 0x0540 (0x0008) [0x0000000000000000]              
	class UClass*                                      DataStoreClientClass;                             		// 0x0548 (0x0008) [0x0000000000000000]              
	class UClass*                                      LocalPlayerClass;                                 		// 0x0550 (0x0008) [0x0000000000000000]              
	class UClass*                                      OnlineSubsystemClass;                             		// 0x0558 (0x0008) [0x0000000000000000]              
	struct FPointer                                    RemoteControlExec;                                		// 0x0560 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    MobileMaterialEmulator;                           		// 0x0568 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FLinearColor                                LightingOnlyBrightness;                           		// 0x0570 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensityVertexMappedColor;                 		// 0x0580 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                LightMapDensitySelectedColor;                     		// 0x0590 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                DefaultSelectedMaterialColor;                     		// 0x05A0 (0x0010) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FLinearColor                                SelectedMaterialColor;                            		// 0x05B0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	struct FLinearColor                                UnselectedMaterialColor;                          		// 0x05C0 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	class UFont*                                       TinyFont;                                         		// 0x05D0 (0x0008) [0x0000000000000000]              
	class UFont*                                       SmallFont;                                        		// 0x05D8 (0x0008) [0x0000000000000000]              
	class UFont*                                       MediumFont;                                       		// 0x05E0 (0x0008) [0x0000000000000000]              
	class UFont*                                       LargeFont;                                        		// 0x05E8 (0x0008) [0x0000000000000000]              
	class UFont*                                       SubtitleFont;                                     		// 0x05F0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   DefaultMaterial;                                  		// 0x05F8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   DefaultDecalMaterial;                             		// 0x0600 (0x0008) [0x0000000000000000]              
	class UTexture*                                    DefaultTexture;                                   		// 0x0608 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   WireframeMaterial;                                		// 0x0610 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   EmissiveTexturedMaterial;                         		// 0x0618 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   GeomMaterial;                                     		// 0x0620 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   DefaultFogVolumeMaterial;                         		// 0x0628 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   TickMaterial;                                     		// 0x0630 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   CrossMaterial;                                    		// 0x0638 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VisColorationMaterialInChunk;                     		// 0x0640 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VisColorationMaterialLoadChunk;                   		// 0x0648 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VisColorationMaterialVisibleChunk;                		// 0x0650 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VisColorationMaterialMasterMap;                   		// 0x0658 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VisColorationMaterialUnloaded;                    		// 0x0660 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   BioColorChunkMaterial;                            		// 0x0668 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   BioTranslucentVolumeMaterial;                     		// 0x0670 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   LevelColorationLitMaterial;                       		// 0x0678 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   LevelColorationUnlitMaterial;                     		// 0x0680 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   LightingTexelDensityMaterial;                     		// 0x0688 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                 		// 0x0690 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;               		// 0x0698 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   RemoveSurfaceMaterial;                            		// 0x06A0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorMaterial;                              		// 0x06A8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;            		// 0x06B0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;         		// 0x06B8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;              		// 0x06C0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;            		// 0x06C8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;             		// 0x06D0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   HeatmapMaterial;                                  		// 0x06D8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   BoneWeightMaterial;                               		// 0x06E0 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   TangentColorMaterial;                             		// 0x06E8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   ProcBuildingSimpleMaterial;                       		// 0x06F0 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 BuildingQuadStaticMesh;                           		// 0x06F8 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   EditorBrushMaterial;                              		// 0x0700 (0x0008) [0x0000000000000000]              
	class UPhysicalMaterial*                           DefaultPhysMaterial;                              		// 0x0708 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   TerrainErrorMaterial;                             		// 0x0710 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           DefaultPostProcess;                               		// 0x0718 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                 		// 0x0720 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;               		// 0x0728 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                     		// 0x0730 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           DefaultUIScenePostProcess;                        		// 0x0738 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   DefaultUICaretMaterial;                           		// 0x0740 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                 		// 0x0748 (0x0008) [0x0000000000000000]              
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                    		// 0x0750 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  ScreenDoorNoiseTexture;                           		// 0x0758 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  RandomAngleTexture;                               		// 0x0760 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  RandomNormalTexture;                              		// 0x0768 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  RandomNormalTexture2;                             		// 0x0770 (0x0008) [0x0000000000000000]              
	class UTexture*                                    WeightMapPlaceholderTexture;                      		// 0x0778 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  LightMapDensityTexture;                           		// 0x0780 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  LightMapDensityNormal;                            		// 0x0788 (0x0008) [0x0000000000000000]              
	class USoundNodeWave*                              DefaultSound;                                     		// 0x0790 (0x0008) [0x0000000000000000]              
	class UClient*                                     Client;                                           		// 0x0798 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UGameViewportClient*                         GameViewport;                                     		// 0x07A0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UDebugManager*                               DebugManager;                                     		// 0x07A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UBioTestFramework*                           m_pUnitTestFramework;                             		// 0x07B0 (0x0008) [0x0000000000000000]              
	int                                                PostDepthOnHair;                                  		// 0x07B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                EnableHairVelocityPass;                           		// 0x07BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ProcBuildingLODColorTexelsPerWorldUnit;           		// 0x07C0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              ProcBuildingLODLightingTexelsPerWorldUnit;        		// 0x07C4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxProcBuildingLODColorTextureSize;               		// 0x07C8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxProcBuildingLODLightingTextureSize;            		// 0x07CC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxRMSDForCombiningMappings;                      		// 0x07D0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxPixelShaderAdditiveComplexityCount;            		// 0x07D4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTextureDensity;                                		// 0x07D8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealTextureDensity;                              		// 0x07DC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTextureDensity;                                		// 0x07E0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                TexelDensityViewFlags;                            		// 0x07E4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinLightMapDensity;                               		// 0x07E8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              IdealLightMapDensity;                             		// 0x07EC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxLightMapDensity;                               		// 0x07F0 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityGrayscaleScale;              		// 0x07F4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              RenderLightMapDensityColorScale;                  		// 0x07F8 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                TerrainMaterialMaxTextureCount;                   		// 0x07FC (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                TerrainTessellationCheckCount;                    		// 0x0800 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TerrainTessellationCheckDistance;                 		// 0x0804 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TimeBetweenPurgingPendingKillObjects;             		// 0x0808 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                TickCycles;                                       		// 0x080C (0x0004) [0x0000000000000000]              
	int                                                GameCycles;                                       		// 0x0810 (0x0004) [0x0000000000000000]              
	int                                                ClientCycles;                                     		// 0x0814 (0x0004) [0x0000000000000000]              
	float                                              MaxVarianceShadowAttenuation;                     		// 0x0818 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxSmoothedFrameRate;                             		// 0x081C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MinSmoothedFrameRate;                             		// 0x0820 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct FColor                                      C_WorldBox;                                       		// 0x0824 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushWire;                                      		// 0x0828 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_AddWire;                                        		// 0x082C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SubtractWire;                                   		// 0x0830 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_SemiSolidWire;                                  		// 0x0834 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_NonSolidWire;                                   		// 0x0838 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_WireBackground;                                 		// 0x083C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_ScaleBoxHi;                                     		// 0x0840 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_VolumeCollision;                                		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BSPCollision;                                   		// 0x0848 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_OrthoBackground;                                		// 0x084C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_Volume;                                         		// 0x0850 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      C_BrushShape;                                     		// 0x0854 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StreamingDistanceFactor;                          		// 0x0858 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MeshLODRange;                                     		// 0x085C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraRotationThreshold;                          		// 0x0860 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CameraTranslationThreshold;                       		// 0x0864 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PrimitiveProbablyVisibleTime;                     		// 0x0868 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentUnoccludedRequeries;                       		// 0x086C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxOcclusionPixelsFraction;                       		// 0x0870 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxFluidNumVerts;                                 		// 0x0874 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              FluidSimulationTimeLimit;                         		// 0x0878 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResize;                                		// 0x087C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleResizeWarn;                            		// 0x0880 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleVertexMemory;                          		// 0x0884 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxParticleSpriteCount;                           		// 0x0888 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxParticleSubUVCount;                            		// 0x088C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                BeginUPTryCount;                                  		// 0x0890 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              NetClientTicksPerSecond;                          		// 0x0894 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTrackedOcclusionIncrement;                     		// 0x0898 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TrackedOcclusionStepSize;                         		// 0x089C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableTranslucentHairPass : 1;                   		// 0x08A0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      UseProcBuildingLODTextureCropping : 1;            		// 0x08A0 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      ForcePowerOfTwoProcBuildingLODTextures : 1;       		// 0x08A0 (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCombineSimilarMappings : 1;                      		// 0x08A0 (0x0004) [0x0000000000044000] [0x00000008] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderLightMapDensityGrayscale : 1;              		// 0x08A0 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUseSound : 1;                                    		// 0x08A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bKeyLightShadowsOnly : 1;                         		// 0x08A0 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUseTextureStreaming : 1;                         		// 0x08A0 (0x0004) [0x0000000000004001] [0x00000080] ( CPF_Edit | CPF_Config )
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                 		// 0x08A0 (0x0004) [0x0000000000004001] [0x00000100] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesEnabled : 1;                            		// 0x08A0 (0x0004) [0x0000000000004001] [0x00000200] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSubtitlesForcedOff : 1;                          		// 0x08A0 (0x0004) [0x0000000000004001] [0x00000400] ( CPF_Edit | CPF_Config )
	unsigned long                                      bSmoothFrameRate : 1;                             		// 0x08A0 (0x0004) [0x0000000000004000] [0x00000800] ( CPF_Config )
	unsigned long                                      HACK_UseTickFrequency : 1;                        		// 0x08A0 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShouldGenerateSimpleLightmaps : 1;               		// 0x08A0 (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bForceStaticTerrain : 1;                          		// 0x08A0 (0x0004) [0x0000000000004001] [0x00004000] ( CPF_Edit | CPF_Config )
	unsigned long                                      DisplayLazyLoadErrors : 1;                        		// 0x08A0 (0x0004) [0x0000000000004000] [0x00008000] ( CPF_Config )
	unsigned long                                      m_bSaveInitialized : 1;                           		// 0x08A0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x08A0 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bUsePostProcessEffects : 1;                       		// 0x08A0 (0x0004) [0x0000000000004000] [0x00040000] ( CPF_Config )
	unsigned long                                      bOnScreenKismetWarnings : 1;                      		// 0x08A0 (0x0004) [0x0000000000004000] [0x00080000] ( CPF_Config )
	unsigned long                                      bEnableKismetLogging : 1;                         		// 0x08A0 (0x0004) [0x0000000000004000] [0x00100000] ( CPF_Config )
	unsigned long                                      bAllowMatureLanguage : 1;                         		// 0x08A0 (0x0004) [0x0000000000004000] [0x00200000] ( CPF_Config )
	unsigned long                                      bRenderTerrainCollisionAsOverlay : 1;             		// 0x08A0 (0x0004) [0x0000000000004000] [0x00400000] ( CPF_Config )
	unsigned long                                      bDisablePhysXHardwareSupport : 1;                 		// 0x08A0 (0x0004) [0x0000000000004000] [0x00800000] ( CPF_Config )
	unsigned long                                      bPauseOnLossOfFocus : 1;                          		// 0x08A0 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bCheckParticleRenderSize : 1;                     		// 0x08A0 (0x0004) [0x0000000000044000] [0x02000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableColorClear : 1;                            		// 0x08A0 (0x0004) [0x0000000000044002] [0x04000000] ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAreConstraintsDirty : 1;                         		// 0x08A0 (0x0004) [0x0000000000002000] [0x08000000] ( CPF_Transient )
	unsigned long                                      bHasPendingGlobalReattach : 1;                    		// 0x08A0 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned long                                      bUseMobileEmulation : 1;                          		// 0x08A0 (0x0004) [0x0000000000002000] [0x20000000] ( CPF_Transient )
	unsigned long                                      bEnableOnScreenDebugMessages : 1;                 		// 0x08A0 (0x0004) [0x0000000000044000] [0x40000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;          		// 0x08A0 (0x0004) [0x0000000000002000] [0x80000000] ( CPF_Transient )
	unsigned long                                      bSuppressMapWarnings : 1;                         		// 0x08A4 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCookSeparateSharedMPGameContent : 1;             		// 0x08A4 (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned char                                      BioUnTexCompressSetting;                          		// 0x08A8 (0x0001) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	unsigned char                                      TransitionType;                                   		// 0x08A9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void FlushAsyncLoading ( );
	void GetMemoryStatus ( int* allocated, int* available );
	void BioShowDebugMessageBox ( struct FString sMessage );
	class UEngine* GetEngine ( );
	void AddOverlayWrapped ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth );
	void AddOverlay ( class UFont* Font, struct FString Text, float X, float Y, float ScaleX, float ScaleY, unsigned long bIsCentered );
	void RemoveAllOverlays ( );
	void StopMovie ( unsigned long bDelayStopUntilGameHasRendered, unsigned long bSFXForceStop );
	bool PlayLoadMapMovie ( );
	struct FString GetLastMovieName ( );
	class UAudioDevice* GetAudioDevice ( );
	bool IsSplitScreen ( );
	class UFont* GetAdditionalFont ( int AdditionalFontIndex );
	class UFont* GetSubtitleFont ( );
	class UFont* GetLargeFont ( );
	class UFont* GetMediumFont ( );
	class UFont* GetSmallFont ( );
	class UFont* GetTinyFont ( );
	struct FString GetBuildDate ( );
	class AWorldInfo* GetCurrentWorldInfo ( );
	bool IsGame ( );
	bool IsEditor ( );
	bool IsShip ( );
};

// Class Engine.GameEngine
// 0x0173 (0x0A1D - 0x08AA)
class UGameEngine : public UEngine
{
public:
	struct FURL                                        LastURL;                                          		// 0x08AC (0x0058) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FURL                                        LastRemoteURL;                                    		// 0x0904 (0x0058) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     PendingLevelPlayerControllerClassName;            		// 0x095C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FString>                      ServerActors;                                     		// 0x096C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     TravelURL;                                        		// 0x097C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        LevelsToLoadForPendingMapChange;                  		// 0x098C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class ULevel*>                       LoadedLevelsForPendingMapChange;                  		// 0x099C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     PendingMapChangeFailureDescription;               		// 0x09AC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FLevelStreamingStatus>        PendingLevelStreamingStatusUpdates;               		// 0x09BC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UObjectReferencer*>            ObjectReferencers;                                		// 0x09CC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FFullyLoadedPackagesInfo>     PackagesToFullyLoad;                              		// 0x09DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FNamedNetDriver>              NamedNetDrivers;                                  		// 0x09EC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UPendingLevel*                               GPendingLevel;                                    		// 0x09FC (0x0008) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSubsystem;                                  		// 0x0A04 (0x0008) [0x0000000000000000]              
	float                                              MaxDeltaTime;                                     		// 0x0A0C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                m_nSkipFrames;                                    		// 0x0A10 (0x0004) [0x0000000000000000]              
	int                                                NumPendingNonLatentOcclusionFrames;               		// 0x0A14 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bWorldWasLoadedThisTick : 1;                      		// 0x0A18 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldCommitPendingMapChange : 1;                		// 0x0A18 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;           		// 0x0A18 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned char                                      TravelType;                                       		// 0x0A1C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetDisconnectFallbackMap ( );
	struct FString GetDefaultLobbyMap ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	bool ShouldUseNonLatentOcclusion ( );
	void TriggerLargeOcclusionChange ( );
	void SkipFrames ( int nFrames );
	void DestroyNamedNetDriver ( struct FName NetDriverName );
	bool CreateNamedNetDriver ( struct FName NetDriverName );
};

// Class Engine.Actor
// 0x020E (0x026E - 0x0060)
class AActor : public UObject
{
public:
	struct TArray<class UActorComponent*>              Components;                                       		// 0x0060 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class USFXModule*>                   Modules;                                          		// 0x0070 (0x0010) [0x1040000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UActorComponent*>              AllComponents;                                    		// 0x0080 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FSFXTextureRefCount>          PrimedTextures;                                   		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FTimerData>                   Timers;                                           		// 0x00A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       Touching;                                         		// 0x00B0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       Children;                                         		// 0x00C0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       Attached;                                         		// 0x00D0 (0x0010) [0x0040000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class USequenceEvent*>               GeneratedEvents;                                  		// 0x00E0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class USeqAct_Latent*>               LatentActions;                                    		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      MessageClass;                                     		// 0x0100 (0x0008) [0x0000000000000000]              
	struct FVector                                     location;                                         		// 0x0108 (0x000C) [0x0040000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FRotator                                    Rotation;                                         		// 0x0114 (0x000C) [0x0040000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	struct FVector                                     DrawScale3D;                                      		// 0x0120 (0x000C) [0x0040000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	struct FVector                                     PrePivot;                                         		// 0x012C (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Velocity;                                         		// 0x0138 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     Acceleration;                                     		// 0x0144 (0x000C) [0x0000000000000000]              
	struct FVector                                     AngularVelocity;                                  		// 0x0150 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RelativeLocation;                                 		// 0x015C (0x000C) [0x0040000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RelativeRotation;                                 		// 0x0168 (0x000C) [0x0040000000000022]              ( CPF_Const | CPF_Net )
	struct FRotator                                    RotationRate;                                     		// 0x0174 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Owner;                                            		// 0x0180 (0x0008) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	class AActor*                                      Base;                                             		// 0x0188 (0x0008) [0x0040000000000023]              ( CPF_Edit | CPF_Const | CPF_Net )
	class APawn*                                       Instigator;                                       		// 0x0190 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AWorldInfo*                                  WorldInfo;                                        		// 0x0198 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       Tag;                                              		// 0x01A0 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	struct FName                                       UniqueTag;                                        		// 0x01A8 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	struct FName                                       InitialState;                                     		// 0x01B0 (0x0008) [0x0000000000000000]              
	struct FName                                       Group;                                            		// 0x01B8 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	class UAnimNodeSequence*                           LatentSeqNode;                                    		// 0x01C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x01C8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      BaseSkelComponent;                                		// 0x01D0 (0x0008) [0x0040000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BaseBoneName;                                     		// 0x01D8 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         CollisionComponent;                               		// 0x01E0 (0x0008) [0x00000000040A0009]              ( CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class AActor*                                      PendingTouch;                                     		// 0x01E8 (0x0008) [0x0000000000000000]              
	int                                                NextModuleNetIndex;                               		// 0x01F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              DrawScale;                                        		// 0x01F4 (0x0004) [0x0040000200000023]              ( CPF_Edit | CPF_Const | CPF_Net | CPF_Interp )
	struct FRenderCommandFence                         DetachFence;                                      		// 0x01F8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CustomTimeDilation;                               		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                NetTag;                                           		// 0x0200 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NetUpdateTime;                                    		// 0x0204 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetUpdateFrequency;                               		// 0x0208 (0x0004) [0x0000000000000000]              
	float                                              NetPriority;                                      		// 0x020C (0x0004) [0x0000000000000000]              
	float                                              LastNetUpdateTime;                                		// 0x0210 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastTick;                                		// 0x0214 (0x0004) [0x0000000000000000]              
	float                                              TickFrequency;                                    		// 0x0218 (0x0004) [0x0000000000000000]              
	float                                              TickFrequencyAtEndDistance;                       		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TickFrequencyDecreaseDistanceStart;               		// 0x0220 (0x0004) [0x0000000000000000]              
	float                                              TickFrequencyDecreaseDistanceEnd;                 		// 0x0224 (0x0004) [0x0000000000000000]              
	float                                              TickFrequencyLastSeenTimeBeforeForcingMaxTickFrequency;		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              LifeSpan;                                         		// 0x022C (0x0004) [0x0000000000000000]              
	float                                              CreationTime;                                     		// 0x0230 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LastRenderTime;                                   		// 0x0234 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRenderTimeInMasterView;                       		// 0x0238 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LatentFloat;                                      		// 0x023C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OverlapTag;                                       		// 0x0240 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              m_fGravityScaling;                                		// 0x0244 (0x0004) [0x0000000000000000]              
	float                                              DensityScaling;                                   		// 0x0248 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ActorTickBreakGroup;                              		// 0x024C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              m_fPhysicsThreshold;                              		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioObstruction;                                 		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioOcclusion;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatic : 1;                                      		// 0x025C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bHidden : 1;                                      		// 0x025C (0x0004) [0x0040000000000023] [0x00000002] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bNoDelete : 1;                                    		// 0x025C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDeleteMe : 1;                                    		// 0x025C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bTicked : 1;                                      		// 0x025C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x025C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bTickIsDisabled : 1;                              		// 0x025C (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWorldGeometry : 1;                               		// 0x025C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                        		// 0x025C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bOrientOnSlope : 1;                               		// 0x025C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x025C (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bPushedByEncroachers : 1;                         		// 0x025C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDestroyedByInterpActor : 1;                      		// 0x025C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                  		// 0x025C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bIsMoving : 1;                                    		// 0x025C (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bAlwaysEncroachCheck : 1;                         		// 0x025C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasAlternateTargetLocation : 1;                  		// 0x025C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCanStepUpOn : 1;                                 		// 0x025C (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bNetTemporary : 1;                                		// 0x025C (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bOnlyRelevantToOwner : 1;                         		// 0x025C (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bNetDirty : 1;                                    		// 0x025C (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bAlwaysRelevant : 1;                              		// 0x025C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bReplicateInstigator : 1;                         		// 0x025C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bReplicateMovement : 1;                           		// 0x025C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bSkipActorPropertyReplication : 1;                		// 0x025C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bUpdateSimulatedPosition : 1;                     		// 0x025C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bTearOff : 1;                                     		// 0x025C (0x0004) [0x0000000000000020] [0x04000000] ( CPF_Net )
	unsigned long                                      bOnlyDirtyReplication : 1;                        		// 0x025C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bDontReplicateBaseRotation : 1;                   		// 0x025C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                		// 0x025C (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bDemoRecording : 1;                               		// 0x025C (0x0004) [0x0000000000002000] [0x40000000] ( CPF_Transient )
	unsigned long                                      bDemoOwner : 1;                                   		// 0x025C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bForceDemoRelevant : 1;                           		// 0x0260 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNetInitialRotation : 1;                          		// 0x0260 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bReplicateRigidBodyLocation : 1;                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bKillDuringLevelTransition : 1;                   		// 0x0260 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bExchangedRoles : 1;                              		// 0x0260 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1; 		// 0x0260 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDebug : 1;                                       		// 0x0260 (0x0004) [0x0040000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPostRenderIfNotVisible : 1;                      		// 0x0260 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bForceNetUpdate : 1;                              		// 0x0260 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bPendingNetUpdate : 1;                            		// 0x0260 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHardAttach : 1;                                  		// 0x0260 (0x0004) [0x0040000000000023] [0x00000400] ( CPF_Edit | CPF_Const | CPF_Net )
	unsigned long                                      bIgnoreBaseRotation : 1;                          		// 0x0260 (0x0004) [0x0040000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bShadowParented : 1;                              		// 0x0260 (0x0004) [0x0040000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bCanBeAdheredTo : 1;                              		// 0x0260 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanBeFrictionedTo : 1;                           		// 0x0260 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bBioSnapToBase : 1;                               		// 0x0260 (0x0004) [0x0040000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      m_bBioBoneDependsOnBaseSkel : 1;                  		// 0x0260 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHurtEntry : 1;                                   		// 0x0260 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bGameRelevant : 1;                                		// 0x0260 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bMovable : 1;                                     		// 0x0260 (0x0004) [0x0000000000000002] [0x00080000] ( CPF_Const )
	unsigned long                                      bDestroyInPainVolume : 1;                         		// 0x0260 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bCanBeDamaged : 1;                                		// 0x0260 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bShouldBaseAtStartup : 1;                         		// 0x0260 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bPendingDelete : 1;                               		// 0x0260 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCanTeleport : 1;                                 		// 0x0260 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bAlwaysTick : 1;                                  		// 0x0260 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bBlocksNavigation : 1;                            		// 0x0260 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0260 (0x0004) [0x0040000000002003] [0x08000000] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned long                                      bCollideWhenPlacing : 1;                          		// 0x0260 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bCollideActors : 1;                               		// 0x0260 (0x0004) [0x0000000000000022] [0x20000000] ( CPF_Const | CPF_Net )
	unsigned long                                      bCollideWorld : 1;                                		// 0x0260 (0x0004) [0x0000000000000020] [0x40000000] ( CPF_Net )
	unsigned long                                      bCollideComplex : 1;                              		// 0x0260 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bBlockActors : 1;                                 		// 0x0264 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bProjTarget : 1;                                  		// 0x0264 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bBlocksTeleport : 1;                              		// 0x0264 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bMoveIgnoresDestruction : 1;                      		// 0x0264 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x0264 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCollideAsEncroacher : 1;                         		// 0x0264 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                		// 0x0264 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bComponentOutsideWorld : 1;                       		// 0x0264 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRigidBodyWasAwake : 1;                           		// 0x0264 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCallRigidBodyWakeEvents : 1;                     		// 0x0264 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bBounce : 1;                                      		// 0x0264 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bJustTeleported : 1;                              		// 0x0264 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bLevelStreamingStasisApplied : 1;                 		// 0x0264 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bNetInitial : 1;                                  		// 0x0264 (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bNetOwner : 1;                                    		// 0x0264 (0x0004) [0x0000000000000022] [0x00004000] ( CPF_Const | CPF_Net )
	unsigned long                                      bHiddenEd : 1;                                    		// 0x0264 (0x0004) [0x0040000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHiddenEdGroup : 1;                               		// 0x0264 (0x0004) [0x0040000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHiddenEdCustom : 1;                              		// 0x0264 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bEdShouldSnap : 1;                                		// 0x0264 (0x0004) [0x0040000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bTempEditor : 1;                                  		// 0x0264 (0x0004) [0x0000000000002002] [0x00080000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPathColliding : 1;                               		// 0x0264 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bPathTemp : 1;                                    		// 0x0264 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      bScriptInitialized : 1;                           		// 0x0264 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bLockLocation : 1;                                		// 0x0264 (0x0004) [0x0040000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bForceAllowKismetModification : 1;                		// 0x0264 (0x0004) [0x0000000000000002] [0x01000000] ( CPF_Const )
	unsigned long                                      bTickDuringPlayersOnly : 1;                       		// 0x0264 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bNoTick : 1;                                      		// 0x0264 (0x0004) [0x0040000000000000] [0x04000000] 
	unsigned long                                      m_bWasInVehicleTransition : 1;                    		// 0x0264 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      m_bAlwaysCollide : 1;                             		// 0x0264 (0x0004) [0x0000000000000002] [0x10000000] ( CPF_Const )
	unsigned long                                      OverridePhysMat : 1;                              		// 0x0264 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned char                                      Physics;                                          		// 0x0268 (0x0001) [0x0040000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RemoteRole;                                       		// 0x0269 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      Role;                                             		// 0x026A (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      CollisionType;                                    		// 0x026B (0x0001) [0x0040000000002003]              ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      ReplicatedCollisionType;                          		// 0x026C (0x0001) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x026D (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector LocalToWorld ( struct FVector vLocal );
	void eventBioBaseRemovedFromWorld ( );
	void BioRestoreFromStasis ( );
	void BioApplyStasis ( struct FString Cause );
	void eventPlayFootStepSound ( int FootDown );
	void eventSFXSetAudioComponentRTPCs ( class UActorComponent* pWwiseAudioComponent );
	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool ImpactWithPower ( unsigned char Resistance, class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, float Damage, struct FVector Force, class UClass* DamageType );
	unsigned char GetPowerResistance ( class APawn* Caster, struct FVector HitLocation, struct FVector HitNormal, class UClass* DamageType, float* Damage, struct FVector* Force, class AActor** TargetOverride );
	void RemoveSFXModuleIndex ( int nIndex );
	void RemoveSFXModule ( class USFXModule* oModule );
	void AddSFXModule ( class USFXModule* oModule, unsigned long bUserModule );
	void StopAllSounds ( );
	bool WillOverlap ( struct FVector PosA, struct FVector VelA, struct FVector PosB, struct FVector VelB, float StepSize, float Radius, float* Time );
	struct FVector GetAvoidanceVector ( struct FVector GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, struct TArray<class AActor*>* Obstacles );
	bool IsClient ( );
	bool IsServer ( );
	bool IsOwningClient ( );
	void eventReplicationEnded ( );
	void eventPostDemoRewind ( );
	void eventAnimTreeUpdated ( class USkeletalMeshComponent* SkelMesh );
	bool SupportsKismetModification ( class USequenceOp* AskingOp, struct FString* Reason );
	void eventTrailsNotifyEnd ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotifyTick ( class UAnimNotify_Trails* AnimNotifyData );
	void eventTrailsNotify ( class UAnimNotify_Trails* AnimNotifyData );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void GetAimAdhesionExtent ( float* Width, float* Height, struct FVector* Center );
	void GetAimFrictionExtent ( float* Width, float* Height, struct FVector* Center );
	bool IsInPersistentLevel ( );
	void SetActive ( unsigned long bActive );
	class USFXModule* GetModule ( class UClass* ModuleClass );
	void eventExceededPhysicsThreshold ( class AActor* instigatedBy );
	void eventOnRigidBodySpringOverextension ( class URB_BodyInstance* BodyInstance );
	struct FGuid GetPackageGuid ( struct FName PackageName );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventRootMotionExtracted ( class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta );
	void eventRootMotionModeChanged ( class USkeletalMeshComponent* SkelComp );
	void eventPostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void NativePostRenderFor ( class APlayerController* PC, class UCanvas* Canvas, struct FVector CameraPosition, struct FVector CameraDir );
	void SetHUDLocation ( struct FVector NewHUDLocation );
	void eventOnRanOver ( class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PickedUpBy ( class APawn* P );
	void eventSpawnedByKismet ( );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	void FindGoodEndView ( class APlayerController* PC, struct FRotator* GoodRotation );
	void NotifyLocalPlayerTeamReceived ( );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	unsigned char eventScriptGetTeamNum ( );
	unsigned char GetTeamNum ( );
	void PawnBaseDied ( );
	bool IsPlayerOwned ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool IsStationary ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishMovementControl ( class UInterpGroup* InInterpGroup );
	void eventBeginMovementControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventOnAnimPlay ( class UAnimNodeSequence* SeqNode );
	void eventOnAnimEnd ( class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnAttachToActor ( class USeqAct_AttachToActor* Action );
	void BioEnqueueDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void eventBioDoKismetAttachment ( class AActor* InAttachment, unsigned long bInDetach, unsigned long bInHardAttach, struct FName InBoneName, unsigned long bInUseRelativeOffset, struct FVector InRelativeOffset, unsigned long bInUseRelativeRotation, struct FRotator InRelativeRotation );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void OnChangeCollision ( class USeqAct_ChangeCollision* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnSetBlockRigidBody ( class USeqAct_SetBlockRigidBody* Action );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	void BlockForTextureStreaming ( );
	bool TexturePrestreamIsRequired ( );
	void PrestreamTextures ( float Seconds, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventShutDown ( );
	void SetNetUpdateTime ( float NewUpdateTime );
	void eventForceNetRelevant ( );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClearLatentAction ( class UClass* actionClass, unsigned long bAborted, class USeqAct_Latent* exceptionAction, unsigned long bCancelled );
	bool FindEventsOfClass ( class UClass* EventClass, unsigned long bIncludeDisabled, struct TArray<class USequenceEvent*>* out_EventList );
	bool ActivateEventClass ( class UClass* InClass, class AActor* inInstigator, unsigned long bTest, struct TArray<class USequenceEvent*>* EventList, struct TArray<int>* ActivateIndices, struct TArray<class USequenceEvent*>* ActivatedEvents );
	bool TriggerGlobalEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	bool TriggerEventClass ( class UClass* InEventClass, class AActor* inInstigator, int ActivateIndex, unsigned long bTest, struct TArray<class USequenceEvent*>* ActivatedEvents );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	bool CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation, float CullDistance );
	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	bool CanSplash ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	bool IsInPain ( );
	bool IsInVolume ( class AVolume* aVolume );
	void eventReset ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventModifyHearSoundComponent ( class UAudioComponent* AC );
	struct FString GetPhysicsName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetDebugName ( );
	void MatchStarting ( );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void ReplaceText ( struct FString Replace, struct FString With, struct FString* Text );
	struct FString GetHumanReadableName ( );
	struct FString GetItemName ( struct FString FullName );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void eventEndViewTarget ( class APlayerController* PC );
	void eventBecomeViewTarget ( class APlayerController* PC );
	bool CheckForErrors ( );
	void eventDebugFreezeGame ( class AActor* ActorToLookAt );
	float GetGravityZ ( );
	void CheckHitInfo ( class UPrimitiveComponent* FallBackComponent, struct FVector Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation );
	void eventTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void eventTakeDamage ( float DamageAmount, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void KilledBy ( class APawn* EventInstigator );
	bool HurtRadius ( float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool StopsProjectile ( class AProjectile* P );
	void eventNotifySkelControlBeyondLimit ( class USkelControlLookAt* LookAt );
	void eventConstraintBrokenNotify ( class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance );
	void eventSetInitialState ( );
	void eventPostBeginPlay ( );
	void eventBroadcastLocalizedTeamMessage ( int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalizedMessage ( class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventPreBeginPlay ( );
	bool FindActorsOfClass ( class UClass* ActorClass, struct TArray<class AActor*>* out_Actors );
	bool MoveActorToFloor ( );
	class APlayerController* GetALocalPlayerController ( );
	void LocalPlayerControllers ( class UClass* BaseClass, class APlayerController** PC );
	void AllOwnedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	void ComponentList ( class UClass* BaseClass, class UActorComponent** out_Component );
	void OverlappingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, class AActor** out_Actor );
	void CollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleCollidingActors ( class UClass* BaseClass, float Radius, struct FVector Loc, unsigned long bIgnoreHidden, struct FVector Extent, unsigned long bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo );
	void VisibleActors ( class UClass* BaseClass, float Radius, struct FVector Loc, class AActor** Actor );
	void TraceActors ( class UClass* BaseClass, struct FVector End, struct FVector Start, struct FVector Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo );
	void TouchingActors ( class UClass* BaseClass, unsigned long bReverse, class AActor** Actor );
	void BasedActors ( class UClass* BaseClass, class AActor** Actor );
	void ChildActors ( class UClass* BaseClass, class AActor** Actor );
	void DynamicActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	void AllActors ( class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor );
	struct FString GetURLMap ( );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	bool PreTeleport ( class ATeleporter* InTeleporter );
	struct FVector GetDestination ( class AController* C );
	bool SuggestTossVelocity ( struct FVector Destination, struct FVector Start, float TossSpeed, float BaseTossZ, float DesiredZPct, struct FVector CollisionSize, float TerminalVelocity, float OverrideGravityZ, unsigned long bOnlyTraceUp, struct FVector* TossVelocity );
	bool PlayerCanSeeMe ( );
	void MakeNoise ( float Loudness, struct FName NoiseType );
	void StopSound ( class UWwiseBaseSoundObject* InSoundEvent );
	void PlaySound ( class UWwiseBaseSoundObject* InSoundCue, unsigned long bNotReplicated, unsigned long bNoRepToOwner, unsigned long bStopWhenOwnerDestroyed, struct FVector SoundLocation, unsigned long bNoRepToRelevant );
	class UAudioComponent* CreateAudioComponent ( class USoundCue* InSoundCue, unsigned long bPlay, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation, unsigned long bAttachToSelf );
	void ResetTimerTimeDilation ( struct FName TimerName, class UObject* inObj );
	void ModifyTimerTimeDilation ( struct FName TimerName, float InTimerTimeDilation, class UObject* inObj );
	float GetRemainingTimeForTimer ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerRate ( struct FName TimerFuncName, class UObject* inObj );
	float GetTimerCount ( struct FName inTimerFunc, class UObject* inObj );
	bool IsTimerActive ( struct FName inTimerFunc, class UObject* inObj );
	void PauseTimer ( unsigned long bPause, struct FName inTimerFunc, class UObject* inObj );
	void ClearAllTimers ( class UObject* inObj );
	void ClearTimer ( struct FName inTimerFunc, class UObject* inObj );
	void SetTimer ( float InRate, unsigned long inbLoop, struct FName inTimerFunc, class UObject* inObj );
	void eventTornOff ( );
	bool Destroy ( );
	class AActor* Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* ActorTemplate, unsigned long bNoCollisionFail, unsigned long bFindSafeLocation );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	void GetComponentsBoundingBox ( struct FBox* ActorBox );
	bool IsOverlapping ( class AActor* A );
	bool ContainsPoint ( struct FVector Spot );
	bool FindSpot ( struct FVector BoxExtent, struct FVector* SpotLocation );
	bool TraceAllPhysicsAssetInteractions ( class USkeletalMeshComponent* SkelMeshComp, struct FVector EndTrace, struct FVector StartTrace, struct FVector Extent, struct TArray<struct FImpactInfo>* out_Hits );
	bool FastTrace ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector BoxExtent, unsigned long bTraceBullet );
	bool PointCheckComponent ( class UPrimitiveComponent* InComponent, struct FVector PointLocation, struct FVector PointExtent );
	bool TraceComponent ( class UPrimitiveComponent* InComponent, struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, unsigned long bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	class AActor* Trace ( struct FVector TraceEnd, struct FVector TraceStart, unsigned long bTraceActors, struct FVector Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo );
	void VolumeBasedDestroy ( class APhysicsVolume* PV );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool UsedBy ( class APawn* User );
	bool eventOverRotated ( struct FRotator* out_Desired, struct FRotator* out_Actual );
	bool ClampRotation ( struct FRotator rBase, struct FRotator rUpperLimits, struct FRotator rLowerLimits, struct FRotator* out_Rot );
	void eventOnSleepRBPhysics ( );
	void eventOnWakeRBPhysics ( );
	void eventRanInto ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void eventCollisionChanged ( );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventBaseChange ( );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventUnTouch ( class AActor* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void eventTimer ( );
	void eventTick ( float DeltaTime );
	void eventLostChild ( class AActor* Other );
	void eventGainedChild ( class AActor* Other );
	void eventDestroyed ( );
	void SetTickIsDisabled ( unsigned long bInDisabled );
	void SetTickGroup ( unsigned char NewTickGroup );
	void ReattachComponent ( class UActorComponent* ComponentToReattach );
	void DetachComponent ( class UActorComponent* ExComponent );
	void AttachComponent ( class UActorComponent* NewComponent );
	void UnClock ( float* Time );
	void Clock ( float* Time );
	void SetPhysics ( unsigned char newPhysics );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetHidden ( unsigned long bNewHidden );
	void ChartData ( struct FString DataName, float DataValue );
	void FlushDebugStrings ( );
	void DrawDebugFrustrum ( unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines, struct FMatrix* FrustumToWorld );
	void DrawDebugString ( struct FVector TextLocation, struct FString Text, class AActor* TestBaseActor, struct FColor TextColor, float Duration );
	void DrawDebugCone ( struct FVector Origin, struct FVector Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, struct FColor DrawColor, unsigned long bPersistentLines );
	void DrawDebugCylinder ( struct FVector Start, struct FVector End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugSphere ( struct FVector Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
	void DrawDebugStar ( struct FVector Position, float Size, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugBox ( struct FVector Center, struct FVector Extent, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void DrawDebugPoint ( struct FVector Position, float Size, struct FLinearColor PointColor, unsigned long bPersistentLines );
	void DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B, unsigned long bPersistentLines );
	void FlushPersistentDebugLines ( );
	struct FVector GetBasedPosition ( struct FBasedPosition BP );
	void SetBasedPosition ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	struct FVector BP2Vect ( struct FBasedPosition BP );
	void Vect2BP ( struct FVector pos, class AActor* ForcedBase, struct FBasedPosition* BP );
	void SetForcedInitialReplicatedProperty ( class UProperty* PropToReplicate, unsigned long bAdd );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	bool IsOwnedBy ( class AActor* TestActor );
	class AActor* GetBaseMost ( );
	bool IsBasedOn ( class AActor* TestActor );
	void FindBase ( );
	void SetOwner ( class AActor* NewOwner );
	void SetBase ( class AActor* NewBase, struct FVector NewFloor, class USkeletalMeshComponent* SkelComp, struct FName AttachName );
	float GetTerminalVelocity ( );
	void AutonomousPhysics ( float DeltaSeconds );
	bool MoveSmooth ( struct FVector Delta );
	int fixedTurn ( int Current, int Desired, int DeltaRate );
	void SetHardAttach ( unsigned long bNewHardAttach );
	bool SetRelativeLocation ( struct FVector NewLocation );
	bool SetRelativeRotation ( struct FRotator NewRotation );
	void SetZone ( unsigned long bForceRefresh );
	unsigned char MovingWhichWay ( float* Amount );
	bool SetRotation ( struct FRotator NewRotation );
	bool SetLocation ( struct FVector NewLocation, unsigned long bDebugFailure );
	bool Move ( struct FVector Delta );
	void SetDrawScale3D ( struct FVector NewScale3D );
	void SetDrawScale ( float NewScale );
	void SetCollisionType ( unsigned char NewCollisionType );
	void SetCollisionSize ( float NewRadius, float NewHeight );
	void SetCollision ( unsigned long bNewColActors, unsigned long bNewBlockActors, unsigned long bNewIgnoreEncroachers );
	void FinishAnim ( class UAnimNodeSequence* SeqNode );
	void Sleep ( float Seconds );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ForceUpdateComponents ( unsigned long bCollisionUpdate, unsigned long bTransformOnly );
};

// Class Engine.Brush
// 0x001F (0x028D - 0x026E)
class ABrush : public AActor
{
public:
	class UModel*                                      Brush;                                            		// 0x0270 (0x0008) [0x000000000000000A]              ( CPF_Const | CPF_ExportObject )
	class UBrushComponent*                             BrushComponent;                                   		// 0x0278 (0x0008) [0x00000000040A000A]              ( CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	struct FColor                                      BrushColor;                                       		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PolyFlags;                                        		// 0x0284 (0x0004) [0x0000000000000000]              
	unsigned long                                      bColored : 1;                                     		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSolidWhenSelected : 1;                           		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPlaceableFromClassBrowser : 1;                   		// 0x0288 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      CsgOper;                                          		// 0x028C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BrushShape
// 0x0003 (0x0290 - 0x028D)
class ABrushShape : public ABrush
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Volume
// 0x0027 (0x02B4 - 0x028D)
class AVolume : public ABrush
{
public:
	struct FString                                     LocationName;                                     		// 0x0290 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class AActor*                                      AssociatedActor;                                  		// 0x02A0 (0x0008) [0x0000000000000000]              
	int                                                LocationPriority;                                 		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LocationNameStrref;                               		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForcePawnWalk : 1;                               		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessAllActors : 1;                            		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bConsiderWhilePathBuilding : 1;                   		// 0x02B0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventProcessActorSetVolume ( class AActor* Other );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	struct FString GetLocationStringFor ( class APlayerReplicationInfo* PRI );
	void eventPostBeginPlay ( );
	bool ScriptLineCheck ( struct FVector* End, struct FVector* Start, struct FVector* Extent );
	bool EncompassesPoint ( struct FVector Loc );
	bool Encompasses ( class AActor* Other );
};

// Class Engine.BlockingVolume
// 0x0014 (0x02C8 - 0x02B4)
class ABlockingVolume : public AVolume
{
public:
	struct TArray<struct FName>                        lstAffectedActors;                                		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bBlockCamera : 1;                                 		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInclusionaryList : 1;                            		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSafeFall : 1;                                    		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.DynamicBlockingVolume
// 0x0004 (0x02CC - 0x02C8)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ADynamicBlockingVolume_FCheckpointRecord* Record );
	void eventPostBeginPlay ( );
};

// Class Engine.CullDistanceVolume
// 0x0014 (0x02C8 - 0x02B4)
class ACullDistanceVolume : public AVolume
{
public:
	struct TArray<struct FCullDistanceSizePair>        CullDistances;                                    		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bEnabled : 1;                                     		// 0x02C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreamingVolume
// 0x0019 (0x02CD - 0x02B4)
class ALevelStreamingVolume : public AVolume
{
public:
	struct TArray<class ULevelStreaming*>              StreamingLevels;                                  		// 0x02B4 (0x0010) [0x0000000001420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	float                                              TestVolumeDistance;                               		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEditorPreVisOnly : 1;                            		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisabled : 1;                                    		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTestDistanceToVolume : 1;                        		// 0x02C8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      StreamingUsage;                                   		// 0x02CC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ALevelStreamingVolume_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.LightmassImportanceVolume
// 0x0000 (0x02B4 - 0x02B4)
class ALightmassImportanceVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PathBlockingVolume
// 0x0000 (0x02B4 - 0x02B4)
class APathBlockingVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysicsVolume
// 0x0050 (0x0304 - 0x02B4)
class APhysicsVolume : public AVolume
{
public:
	class UClass*                                      DamageType;                                       		// 0x02B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ZoneVelocity;                                     		// 0x02BC (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	class AInfo*                                       PainTimer;                                        		// 0x02C8 (0x0008) [0x0000000000000000]              
	class AController*                                 DamageInstigator;                                 		// 0x02D0 (0x0008) [0x0000000000000000]              
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x02D8 (0x0008) [0x0000000000000000]              
	float                                              GroundFriction;                                   		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminalVelocity;                                 		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamagePerSec;                                     		// 0x02E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                Priority;                                         		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidFriction;                                    		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PainInterval;                                     		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RigidBodyDamping;                                 		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDampingForce;                                  		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityAffectsWalking : 1;                      		// 0x0300 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPainCausing : 1;                                 		// 0x0300 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAIShouldIgnorePain : 1;                          		// 0x0300 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEntryPain : 1;                                   		// 0x0300 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      BACKUP_bPainCausing : 1;                          		// 0x0300 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDestructive : 1;                                 		// 0x0300 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNoInventory : 1;                                 		// 0x0300 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMoveProjectiles : 1;                             		// 0x0300 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bBounceVelocity : 1;                              		// 0x0300 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNeutralZone : 1;                                 		// 0x0300 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                    		// 0x0300 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPhysicsOnContact : 1;                            		// 0x0300 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bWaterVolume : 1;                                 		// 0x0300 (0x0004) [0x0000000000000000] [0x00001000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APhysicsVolume_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetDamageInstigator ( class USeqAct_SetDamageInstigator* Action );
	void NotifyPawnBecameViewTarget ( class APawn* P, class APlayerController* PC );
	void ModifyPlayer ( class APawn* PlayerPawn );
	void CausePainTo ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void TimerPop ( class AVolumeTimer* T );
	void eventCollisionChanged ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void eventPawnLeavingVolume ( class APawn* Other );
	void eventPawnEnteredVolume ( class APawn* Other );
	void eventActorLeavingVolume ( class AActor* Other );
	void eventActorEnteredVolume ( class AActor* Other );
	void eventPhysicsChangedFor ( class AActor* Other );
	void Reset ( );
	void Destroyed ( );
	void eventPostBeginPlay ( );
	float GetRBPhysicsGravityScaling ( );
	struct FVector GetZoneVelocityForActor ( class AActor* TheActor );
	float GetGravityZ ( );
};

// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0304 - 0x0304)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDestroyed ( );
};

// Class Engine.GravityVolume
// 0x0008 (0x030C - 0x0304)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                         		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LadderVolume
// 0x0040 (0x0344 - 0x0304)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                          		// 0x0304 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LookDir;                                          		// 0x0310 (0x000C) [0x0000000000000000]              
	struct FVector                                     ClimbDir;                                         		// 0x031C (0x000C) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x0328 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PendingClimber;                                   		// 0x0330 (0x0008) [0x0000000000000000]              
	class UArrowComponent*                             WallDirArrow;                                     		// 0x0338 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bNoPhysicalLadder : 1;                            		// 0x0340 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoPath : 1;                                    		// 0x0340 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowLadderStrafing : 1;                         		// 0x0340 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPhysicsChangedFor ( class AActor* Other );
	void eventPawnLeavingVolume ( class APawn* P );
	void eventPawnEnteredVolume ( class APawn* P );
	bool InUse ( class APawn* Ignored );
	void eventPostBeginPlay ( );
};

// Class Engine.PortalVolume
// 0x0010 (0x02C4 - 0x02B4)
class APortalVolume : public AVolume
{
public:
	struct TArray<class APortalTeleporter*>            Portals;                                          		// 0x02B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PostProcessVolume
// 0x00F0 (0x03A4 - 0x02B4)
class APostProcessVolume : public AVolume
{
public:
	struct FPostProcessSettings                        Settings;                                         		// 0x02B4 (0x00E0) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class APostProcessVolume*                          NextLowerPriorityVolume;                          		// 0x0394 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	float                                              Priority;                                         		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x03A0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.ReverbVolume
// 0x0040 (0x02F4 - 0x02B4)
class AReverbVolume : public AVolume
{
public:
	struct FInteriorSettings                           AmbientZoneSettings;                              		// 0x02B4 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FReverbSettings                             Settings;                                         		// 0x02D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class AReverbVolume*                               NextLowerPriorityVolume;                          		// 0x02E8 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	float                                              Priority;                                         		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TriggerVolume
// 0x0000 (0x02B4 - 0x02B4)
class ATriggerVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

// Class Engine.DroppedPickup
// 0x001E (0x028C - 0x026E)
class ADroppedPickup : public AActor
{
public:
	class UClass*                                      InventoryClass;                                   		// 0x0270 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class AInventory*                                  Inventory;                                        		// 0x0278 (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            PickupCache;                                      		// 0x0280 (0x0008) [0x0000000000000000]              
	unsigned long                                      bFadeOut : 1;                                     		// 0x0288 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float DetourWeight ( class APawn* Other, float PathWeight );
	void eventEncroachedBy ( class AActor* Other );
	void eventSetPickupParticles ( class UParticleSystemComponent* PickupParticles );
	void eventSetPickupMesh ( class UPrimitiveComponent* PickupMesh );
	void Reset ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventDestroyed ( );
	void RemoveFromNavigation ( );
	void AddToNavigation ( );
};

// Class Engine.DynamicSMActor
// 0x004A (0x02B8 - 0x026E)
class ADynamicSMActor : public AActor
{
public:
	struct FVector                                     ReplicatedMeshTranslation;                        		// 0x0270 (0x000C) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	struct FRotator                                    ReplicatedMeshRotation;                           		// 0x027C (0x000C) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	struct FVector                                     ReplicatedMeshScale3D;                            		// 0x0288 (0x000C) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0294 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x029C (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UStaticMesh*                                 ReplicatedMesh;                                   		// 0x02A4 (0x0008) [0x0000000100002020]              ( CPF_Net | CPF_Transient | CPF_RepNotify )
	class UMaterialInterface*                          ReplicatedMaterial;                               		// 0x02AC (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x02B4 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bPawnCanBaseOn : 1;                               		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSafeBaseIfAsleep : 1;                            		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetLightEnvironmentToNotBeDynamic ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	bool CanBasePawn ( class APawn* P );
	void SetStaticMesh ( class UStaticMesh* NewMesh, struct FVector NewTranslation, struct FRotator NewRotation, struct FVector NewScale3D );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnSetMesh ( class USeqAct_SetMesh* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

// Class Engine.InterpActor
// 0x004C (0x0304 - 0x02B8)
class AInterpActor : public ADynamicSMActor
{
public:
	class ANavigationPoint*                            MyMarker;                                         		// 0x02B8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   OpenSound;                                        		// 0x02C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpeningAmbientSound;                              		// 0x02C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   OpenedSound;                                      		// 0x02D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   CloseSound;                                       		// 0x02D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosingAmbientSound;                              		// 0x02E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ClosedSound;                                      		// 0x02E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAudioComponent*                             AmbientSoundComponent;                            		// 0x02F0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MaxZVelocity;                                     		// 0x02F8 (0x0004) [0x0000000000000000]              
	float                                              StayOpenTime;                                     		// 0x02FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0300 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bMonitorMover : 1;                                		// 0x0300 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bMonitorZVelocity : 1;                            		// 0x0300 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                		// 0x0300 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;             		// 0x0300 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bStopOnEncroach : 1;                              		// 0x0300 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;         		// 0x0300 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bIsLift : 1;                                      		// 0x0300 (0x0004) [0x0000000000000000] [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AInterpActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void ShutDown ( );
	void eventInterpolationChanged ( class USeqAct_Interp* InterpAction );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void PlayMovingSound ( unsigned long bClosing );
	void FinishedOpen ( );
	void Restart ( );
	void eventDetach ( class AActor* Other );
	void eventAttach ( class AActor* Other );
	void eventRanInto ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void SetShadowParentOnAllAttachedComponents ( );
	void eventPostBeginPlay ( );
};

// Class Engine.Emitter
// 0x0016 (0x0284 - 0x026E)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                          		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0278 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bDestroyOnSystemFinish : 1;                       		// 0x0280 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPostUpdateTickGroup : 1;                         		// 0x0280 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNoVFXSound : 1;                                  		// 0x0280 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0280 (0x0004) [0x0000000100000020] [0x00000008] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HideSelf ( );
	void ApplyCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AEmitter_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnSetParticleSysParam ( class USeqAct_SetParticleSysParam* Action );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void ShutDown ( );
	void OnParticleEventGenerator ( class USeqAct_ParticleEventGenerator* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnParticleSystemFinished ( class UParticleSystemComponent* FinishedComponent );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
	void ResetPSC ( );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

// Class Engine.EmitterPool
// 0x0072 (0x02E0 - 0x026E)
class AEmitterPool : public AActor
{
public:
	struct TArray<class UParticleSystemComponent*>     PoolComponents;                                   		// 0x0270 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UParticleSystemComponent*>     ActiveComponents;                                 		// 0x0280 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FEmitterBaseInfo>             RelativePSCs;                                     		// 0x0290 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct TArray<class UStaticMeshComponent*>         FreeSMComponents;                                 		// 0x02A0 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UMaterialInstanceConstant*>    FreeMatInstConsts;                                		// 0x02B0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UParticleSystemComponent*                    PSCTemplate;                                      		// 0x02C0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                MaxActiveEffects;                                 		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_ReductionTime;                            		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              SMC_MIC_CurrentReductionTime;                     		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IdealStaticMeshComponents;                        		// 0x02D4 (0x0004) [0x0000000000000000]              
	int                                                IdealMaterialInstanceConstants;                   		// 0x02D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLogPoolOverflow : 1;                             		// 0x02DC (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bLogPoolOverflowList : 1;                         		// 0x02DC (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UParticleSystemComponent* SpawnEmitterCustomLifetime ( class UParticleSystem* EmitterTemplate );
	class UParticleSystemComponent* SpawnEmitterMeshAttachment ( class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, struct FName AttachPointName, unsigned long bAttachToSocket, struct FVector RelativeLoc, struct FRotator RelativeRot );
	class UParticleSystemComponent* SpawnEmitter ( class UParticleSystem* EmitterTemplate, struct FVector SpawnLocation, struct FRotator SpawnRotation, class AActor* AttachToActor, unsigned long bInheritScaleFromBase );
	class UParticleSystemComponent* GetPooledComponent ( class UParticleSystem* EmitterTemplate );
	class UMaterialInstanceConstant* GetFreeMatInstConsts ( unsigned long bCreateNewObject );
	void FreeMaterialInstanceConstants ( class UStaticMeshComponent* SMC );
	class UStaticMeshComponent* GetFreeStaticMeshComponent ( unsigned long bCreateNewObject );
	void FreeStaticMeshComponents ( class UParticleSystemComponent* PSC );
	void ReturnToPool ( class UParticleSystemComponent* PSC );
	void ClearPoolComponents ( );
	void OnParticleSystemFinished ( class UParticleSystemComponent* PSC );
};

// Class Engine.HUD
// 0x033A (0x05A8 - 0x026E)
class AHUD : public AActor
{
public:
	struct FHudLocalizedMessage                        LocalMessages[ 0x8 ];                             		// 0x0270 (0x0280) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       PostRenderedActors;                               		// 0x04F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FConsoleMessage>              ConsoleMessages;                                  		// 0x0500 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        DebugDisplay;                                     		// 0x0510 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FKismetDrawTextInfo>          KismetTextInfo;                                   		// 0x0520 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class APlayerController*                           PlayerOwner;                                      		// 0x0530 (0x0008) [0x0000000000000000]              
	class AHUD*                                        HudOwner;                                         		// 0x0538 (0x0008) [0x0000000000000000]              
	class APlayerReplicationInfo*                      ViewedInfo;                                       		// 0x0540 (0x0008) [0x0000000000000000]              
	class AScoreboard*                                 Scoreboard;                                       		// 0x0548 (0x0008) [0x0000000000000000]              
	class UCanvas*                                     Canvas;                                           		// 0x0550 (0x0008) [0x0000000000000000]              
	struct FColor                                      WhiteColor;                                       		// 0x0558 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      GreenColor;                                       		// 0x055C (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FColor                                      RedColor;                                         		// 0x0560 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              HudCanvasScale;                                   		// 0x0564 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FColor                                      ConsoleColor;                                     		// 0x0568 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConsoleMessageCount;                              		// 0x056C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConsoleFontSize;                                  		// 0x0570 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MessageFontOffset;                                		// 0x0574 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxHUDAreaMessageCount;                           		// 0x0578 (0x0004) [0x0000000000000000]              
	float                                              ConsoleMessagePosX;                               		// 0x057C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConsoleMessagePosY;                               		// 0x0580 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastHUDRenderTime;                                		// 0x0584 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RenderDelta;                                      		// 0x0588 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeX;                                            		// 0x058C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SizeY;                                            		// 0x0590 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterX;                                          		// 0x0594 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CenterY;                                          		// 0x0598 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioX;                                           		// 0x059C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RatioY;                                           		// 0x05A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      LostFocusPaused : 1;                              		// 0x05A4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bShowHUD : 1;                                     		// 0x05A4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bShowGameHUD : 1;                                 		// 0x05A4 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bShowScores : 1;                                  		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShowDebugInfo : 1;                               		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bShowGameDebug : 1;                               		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bShowBadConnectionAlert : 1;                      		// 0x05A4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bMessageBeep : 1;                                 		// 0x05A4 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowOverlays : 1;                                		// 0x05A4 (0x0004) [0x0000000000000000] [0x00000100] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnLostFocusPause ( unsigned long enable );
	void PlayerOwnerDied ( );
	struct FColor GetRYGColorRamp ( float Pct );
	class UFont* GetFontSizeIndex ( int FontSize );
	void DisplayKismetMessages ( );
	void DisplayLocalMessages ( );
	void DrawMessageText ( struct FHudLocalizedMessage LocalMessage, float ScreenX, float ScreenY );
	void DrawMessage ( int i, float PosY, float* dx, float* DY );
	void GetScreenCoords ( float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage );
	void AddLocalizedMessage ( int Index, class UClass* InMessageClass, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, int MessageCount, class UObject* OptionalObject );
	void LocalizedMessage ( class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI, struct FString CriticalString, int Switch, float Position, float Lifetime, int FontSize, struct FColor DrawColor, class UObject* OptionalObject );
	void AddConsoleMessage ( struct FString M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime );
	void DisplayConsoleMessages ( );
	void Message ( class APlayerReplicationInfo* PRI, struct FString Msg, struct FName msgType, float Lifetime );
	void ClearMessage ( struct FHudLocalizedMessage* M );
	void DisplayBadConnectionAlert ( );
	void DrawEngineHUD ( );
	void DrawDemoHUD ( );
	void DrawHUD ( );
	void eventPostRender ( );
	void PreCalcValues ( );
	void DrawRoute ( class APawn* Target );
	void FXStop ( class UClass* aClass );
	void FXPlay ( class UClass* aClass, struct FString FXAnimPath );
	bool ShouldDisplayDebug ( struct FName DebugType );
	void ShowDebug ( struct FName DebugType );
	void ShowGameDebug ( );
	void SetShowScores ( unsigned long bNewValue );
	void ShowScores ( );
	void ShowHUD ( );
	void ToggleHUD ( );
	void AddPostRenderedActor ( class AActor* A );
	void RemovePostRenderedActor ( class AActor* A );
	void DrawActorOverlays ( struct FVector Viewpoint, struct FRotator ViewRotation );
	void eventDestroyed ( );
	void SpawnScoreBoard ( class UClass* ScoringType );
	void eventPostBeginPlay ( );
	void Draw2DLine ( int X1, int Y1, int X2, int Y2, struct FColor LineColor );
	void Draw3DLine ( struct FVector Start, struct FVector End, struct FColor LineColor );
};

// Class Engine.Info
// 0x0002 (0x0270 - 0x026E)
class AInfo : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AutoTestManager
// 0x00C4 (0x0334 - 0x0270)
class AAutoTestManager : public AInfo
{
public:
	struct TArray<struct FString>                      AutomatedMapTestingList;                          		// 0x0270 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;     		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AutomatedMapTestingTransitionMap;                 		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskDescription;                          		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTaskParameter;                            		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SentinelTagDesc;                                  		// 0x02C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FVector>                      SentinelTravelArray;                              		// 0x02D0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      CommandsToRunAtEachTravelTheWorldNode;            		// 0x02E0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CommandStringToExec;                              		// 0x02F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class APlayerController*                           SentinelPC;                                       		// 0x0300 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                AutomatedPerfRemainingTime;                       		// 0x0308 (0x0004) [0x0000000000000000]              
	int                                                AutomatedTestingMapIndex;                         		// 0x030C (0x0004) [0x0000000000000000]              
	int                                                NumAutomatedMapTestingCycles;                     		// 0x0310 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                NumberOfMatchesPlayed;                            		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                NumMapListCyclesDone;                             		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                SentinelNavigationIdx;                            		// 0x031C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SentinelIdx;                                      		// 0x0320 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumRotationsIncrement;                            		// 0x0324 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TravelPointsIncrement;                            		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumMinutesPerMap;                                 		// 0x032C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bAutomatedPerfTesting : 1;                        		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoContinueToNextRound : 1;                     		// 0x0330 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                		// 0x0330 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bAutomatedTestingWithOpen : 1;                    		// 0x0330 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bCheckingForFragmentation : 1;                    		// 0x0330 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCheckingForMemLeaks : 1;                         		// 0x0330 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bDoingASentinelRun : 1;                           		// 0x0330 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;          		// 0x0330 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CheckForSentinelRun ( );
	void StartMatch ( );
	struct FString GetNextAutomatedTestingMap ( );
	void IncrementNumberOfMatchesPlayed ( );
	void IncrementAutomatedTestingMapIndex ( );
	void CloseAutomatedMapTestTimer ( );
	void StartAutomatedMapTestTimerWorker ( );
	void eventStartAutomatedMapTestTimer ( );
	void DoTimeBasedSentinelStatGathering ( );
	void DoSentinel_ViewDependentMemoryAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_PerfAtSpecificLocation ( struct FVector* InLocation, struct FRotator* InRotation );
	void DoSentinel_MemoryAtSpecificLocation ( struct FVector InLocation, struct FRotator InRotation );
	void GetTravelLocations ( struct FName LevelName, class APlayerController* PC, struct TArray<struct FVector>* TravelPoints );
	void HandlePerLoadedMapAudioStats ( );
	void DoSentinelActionPerLoadedMap ( );
	void DoTravelTheWorld ( );
	void EndSentinelRun ( unsigned char RunResult );
	void AddSentinelPerTimePeriodStats ( struct FVector InLocation, struct FRotator InRotation );
	void BeginSentinelRun ( struct FString TaskDescription, struct FString TaskParameter, struct FString TagDesc );
	void InitializeOptions ( struct FString Options );
	void eventTimer ( );
	void eventPostBeginPlay ( );
};

// Class Engine.CoverGroup
// 0x0018 (0x0288 - 0x0270)
class ACoverGroup : public AInfo
{
public:
	struct TArray<struct FActorReference>              CoverLinkRefs;                                    		// 0x0270 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              AutoSelectRadius;                                 		// 0x0280 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoSelectHeight;                                 		// 0x0284 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
	void ToggleGroup ( );
	void DisableGroup ( );
	void EnableGroup ( );
};

// Class Engine.FileWriter
// 0x001D (0x028D - 0x0270)
class AFileWriter : public AInfo
{
public:
	struct FString                                     Filename;                                         		// 0x0270 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    ArchivePtr;                                       		// 0x0280 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bFlushEachWrite : 1;                              		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bWantsAsyncWrites : 1;                            		// 0x0288 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned char                                      FileType;                                         		// 0x028C (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventDestroyed ( );
	void Logf ( struct FString logString );
	void CloseFile ( );
	bool OpenFile ( struct FString InFilename, unsigned char InFileType, struct FString InExtension, unsigned long bUnique, unsigned long bIncludeTimeStamp );
};

// Class Engine.FileLog
// 0x0003 (0x0290 - 0x028D)
class AFileLog : public AFileWriter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CloseLog ( );
	void OpenLog ( struct FString LogFileName, struct FString extension, unsigned long bUnique );
};

// Class Engine.GameInfo
// 0x022C (0x049C - 0x0270)
class AGameInfo : public AInfo
{
public:
	struct FString                                     CauseEventCommand;                                		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugLocString;                                     		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     BugRotString;                                     		// 0x0290 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class APlayerController*>            PendingArbitrationPCs;                            		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class APlayerController*>            ArbitrationPCs;                                   		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     DefaultPlayerName;                                		// 0x02C0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GameName;                                         		// 0x02D0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<class APlayerReplicationInfo*>       InactivePRIArray;                                 		// 0x02E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FScriptDelegate>              Pausers;                                          		// 0x02F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ServerOptions;                                    		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FGameClassShortName>          GameInfoClassAliases;                             		// 0x0310 (0x0010) [0x0000000000404003]              ( CPF_Edit | CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DefaultGameType;                                  		// 0x0320 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FGameTypePrefix>              DefaultMapPrefixes;                               		// 0x0330 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FGameTypePrefix>              CustomMapPrefixes;                                		// 0x0340 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultPawnClass;                                 		// 0x0360 (0x0008) [0x0000000000000000]              
	class UClass*                                      ScoreBoardType;                                   		// 0x0368 (0x0008) [0x0000000000000000]              
	class UClass*                                      HUDType;                                          		// 0x0370 (0x0008) [0x0000000000000000]              
	class UClass*                                      DeathMessageClass;                                		// 0x0378 (0x0008) [0x0000000000000000]              
	class UClass*                                      GameMessageClass;                                 		// 0x0380 (0x0008) [0x0000000000000000]              
	class UClass*                                      AccessControlClass;                               		// 0x0388 (0x0008) [0x0000000000000000]              
	class UClass*                                      BroadcastHandlerClass;                            		// 0x0390 (0x0008) [0x0000000000000000]              
	class UClass*                                      AutoTestManagerClass;                             		// 0x0398 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayerControllerClass;                            		// 0x03A0 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x03A8 (0x0008) [0x0000000000000000]              
	class UClass*                                      GameReplicationInfoClass;                         		// 0x03B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      OnlineStatsWriteClass;                            		// 0x03B8 (0x0008) [0x0000000000000000]              
	class UClass*                                      OnlineGameSettingsClass;                          		// 0x03C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x03C8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x03D0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class AMutator*                                    BaseMutator;                                      		// 0x03D8 (0x0008) [0x0000000000000000]              
	class AAccessControl*                              AccessControl;                                    		// 0x03E0 (0x0008) [0x0000000000000000]              
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x03E8 (0x0008) [0x0000000000000000]              
	class AAutoTestManager*                            MyAutoTestManager;                                		// 0x03F0 (0x0008) [0x0000000000000000]              
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x03F8 (0x0008) [0x0000000000000000]              
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x0400 (0x0008) [0x0000000000000000]              
	class ACoverReplicator*                            CoverReplicatorBase;                              		// 0x0408 (0x0008) [0x0000000000000000]              
	float                                              ArbitrationHandshakeTimeout;                      		// 0x0410 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameDifficulty;                                   		// 0x0414 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                GoreLevel;                                        		// 0x0418 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              GameSpeed;                                        		// 0x041C (0x0004) [0x0000000000000000]              
	int                                                MaxSpectators;                                    		// 0x0420 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxSpectatorsAllowed;                             		// 0x0424 (0x0004) [0x0000000000000000]              
	int                                                NumSpectators;                                    		// 0x0428 (0x0004) [0x0000000000000000]              
	int                                                MaxPlayers;                                       		// 0x042C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxPlayersAllowed;                                		// 0x0430 (0x0004) [0x0000000000000000]              
	int                                                NumPlayers;                                       		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                NumBots;                                          		// 0x0438 (0x0004) [0x0000000000000000]              
	int                                                NumTravellingPlayers;                             		// 0x043C (0x0004) [0x0000000000000000]              
	int                                                CurrentID;                                        		// 0x0440 (0x0004) [0x0000000000000000]              
	float                                              FearCostFallOff;                                  		// 0x0444 (0x0004) [0x0000000000000000]              
	int                                                GoalScore;                                        		// 0x0448 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxLives;                                         		// 0x044C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TimeLimit;                                        		// 0x0450 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              MaxIdleTime;                                      		// 0x0454 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MaxTimeMargin;                                    		// 0x0458 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              TimeMarginSlack;                                  		// 0x045C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MinTimeMargin;                                    		// 0x0460 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                LeaderboardId;                                    		// 0x0464 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ArbitratedLeaderboardId;                          		// 0x0468 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                AdjustedNetSpeed;                                 		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              LastNetSpeedUpdateTime;                           		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                TotalNetBandwidth;                                		// 0x0474 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MinDynamicBandwidth;                              		// 0x0478 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxDynamicBandwidth;                              		// 0x047C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              StandbyRxCheatTime;                               		// 0x0480 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              StandbyTxCheatTime;                               		// 0x0484 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                BadPingThreshold;                                 		// 0x0488 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForRxStandby;                       		// 0x048C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentMissingForTxStandby;                       		// 0x0490 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PercentForBadPing;                                		// 0x0494 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bRestartLevel : 1;                                		// 0x0498 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPauseable : 1;                                   		// 0x0498 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTeamGame : 1;                                    		// 0x0498 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bGameEnded : 1;                                   		// 0x0498 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bOverTime : 1;                                    		// 0x0498 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bDelayedStart : 1;                                		// 0x0498 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWaitingToStartMatch : 1;                         		// 0x0498 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bChangeLevels : 1;                                		// 0x0498 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bAlreadyChanged : 1;                              		// 0x0498 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdminCanPause : 1;                               		// 0x0498 (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bGameRestarted : 1;                               		// 0x0498 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bLevelChange : 1;                                 		// 0x0498 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bKickLiveIdlers : 1;                              		// 0x0498 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bUsingArbitration : 1;                            		// 0x0498 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                 		// 0x0498 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bNeedsEndGameHandshake : 1;                       		// 0x0498 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                  		// 0x0498 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                    		// 0x0498 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bFixedPlayerStart : 1;                            		// 0x0498 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bDoFearCostFallOff : 1;                           		// 0x0498 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      ShowSplashScreen : 1;                             		// 0x0498 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bUseSeamlessTravel : 1;                           		// 0x0498 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bHasNetworkError : 1;                             		// 0x0498 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bRequiresPushToTalk : 1;                          		// 0x0498 (0x0004) [0x0000000000000002] [0x00800000] ( CPF_Const )
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                    		// 0x0498 (0x0004) [0x0000000000004000] [0x01000000] ( CPF_Config )
	unsigned long                                      bHasStandbyCheatTriggered : 1;                    		// 0x0498 (0x0004) [0x0000000000000000] [0x02000000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventStandbyCheatDetected ( unsigned char StandbyType );
	void EnableStandbyCheatDetection ( unsigned long bIsEnabled );
	void BeginBVT ( struct FString TagDesc );
	bool CheckForSentinelRun ( );
	bool ShouldAutoContinueToNextRound ( );
	bool IsDoingASentinelRun ( );
	bool IsCheckingForMemLeaks ( );
	bool IsCheckingForFragmentation ( );
	bool IsAutomatedPerfTesting ( );
	void DoTravelTheWorld ( );
	void TellClientsToTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void TellClientsToReturnToPartyHost ( );
	void OnServerCreateComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServer ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char errorCode );
	void ClearAutoLoginDelegates ( );
	bool ProcessServerLogin ( );
	void eventMatineeCancelled ( );
	void RecalculateSkillRating ( );
	void UpdateGameplayMuteList ( class APlayerController* PC );
	void NotifyArbitratedMatchEnd ( );
	bool MatchIsInProgress ( );
	void ArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void RegisterServerForArbitration ( );
	void StartArbitratedMatch ( );
	void StartArbitrationRegistration ( );
	void ProcessClientRegistrationCompletion ( class APlayerController* PC, unsigned long bWasSuccessful );
	void UpdateGameSettingsCounts ( );
	void SetSeamlessTravelViewTarget ( class APlayerController* PC );
	void eventHandleSeamlessTravelPlayer ( class AController** C );
	void UpdateGameSettings ( );
	void eventPostSeamlessTravel ( );
	void SwapPlayerControllers ( class APlayerController* OldPC, class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList );
	void OverridePRI ( class APlayerController* PC, class APlayerReplicationInfo* OldPRI );
	bool FindInactivePRI ( class APlayerController* PC );
	void AddInactivePRI ( class APlayerReplicationInfo* PRI, class APlayerController* PC );
	void eventPostCommitMapChange ( );
	void eventPreCommitMapChange ( struct FString PreviousMapName, struct FString NextMapName );
	bool AllowPausing ( class APlayerController* PC );
	bool AllowCheats ( class APlayerController* P );
	bool AllowMutator ( struct FString MutatorClassName );
	bool PlayerCanRestart ( class APlayerController* aPlayer );
	bool PlayerCanRestartGame ( class APlayerController* aPlayer );
	void KillBots ( );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void ModifyScoreKill ( class AController* Killer, class AController* Other );
	void ScoreKill ( class AController* Killer, class AController* Other );
	bool CheckScore ( class APlayerReplicationInfo* Scorer );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	void AddObjectiveScore ( class APlayerReplicationInfo* Scorer, int Score );
	float RatePlayerStart ( class APlayerStart* P, unsigned char Team, class AController* Player );
	class APlayerStart* ChoosePlayerStart ( class AController* Player, unsigned char InTeam );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	bool ShouldSpawnAtStartSpot ( class AController* Player );
	void EndLogging ( struct FString Reason );
	void EndOnlineGame ( );
	void PerformEndGameHandling ( );
	void EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void WriteOnlinePlayerScores ( );
	void WriteOnlineStats ( );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool CheckModifiedEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	void eventBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type );
	void eventBroadcast ( class AActor* Sender, struct FString Msg, struct FName Type );
	void RestartGame ( );
	bool GetTravelType ( );
	struct FString GetNextMap ( );
	void SendPlayer ( class APlayerController* aPlayer, struct FString URL );
	unsigned char PickTeam ( unsigned char Current, class AController* C );
	bool ChangeTeam ( class AController* Other, int N, unsigned long bNewTeam );
	void ChangeName ( class AController* Other, struct FString S, unsigned long bNameChange );
	void DiscardInventory ( class APawn* Other, class AController* Killer );
	bool PickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup );
	bool ShouldRespawn ( class APickupFactory* Other );
	bool CheckRelevance ( class AActor* Other );
	void ReduceDamage ( class APawn* injured, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	bool CanSpectate ( class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget );
	void KickBan ( struct FString S );
	void Kick ( struct FString S );
	struct FString ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage );
	void BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType );
	bool PreventDeath ( class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void Killed ( class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void SetPlayerDefaults ( class APawn* PlayerPawn );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventAddDefaultInventory ( class APawn* P );
	void eventAcceptInventory ( class APawn* PlayerPawn );
	void UnregisterPlayer ( class APlayerController* PC );
	void Logout ( class AController* Exiting );
	void eventPreExit ( );
	int CalculatedNetSpeed ( );
	void UpdateNetSpeeds ( );
	void eventPostLogin ( class APlayerController* NewPlayer );
	void GenericPlayerInitialization ( class AController* C );
	void ReplicateStreamingStatus ( class APlayerController* PC );
	class UClass* GetDefaultPlayerClass ( class AController* C );
	class APawn* SpawnDefaultPawnFor ( class AController* NewPlayer, class ANavigationPoint* StartSpot, unsigned long bNoCollisionFail );
	void RestartPlayer ( class AController* NewPlayer );
	void StartBots ( );
	void StartHumans ( );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void StartOnlineGame ( );
	void StartMatch ( );
	class APlayerController* eventLogin ( struct FString Portal, struct FString Options, struct FUniqueNetId UniqueId, struct FString* ErrorMessage );
	class APlayerController* SpawnPlayerController ( struct FVector SpawnLocation, struct FRotator SpawnRotation );
	int GetNextPlayerID ( );
	bool AtCapacity ( unsigned long bSpectator );
	void eventPreLogin ( struct FString Options, struct FString Address, struct FString* ErrorMessage );
	bool RequiresPassword ( );
	class APlayerController* ProcessClientTravel ( struct FGuid NextMapGuid, unsigned long bSeamless, unsigned long bAbsolute, struct FString* URL );
	void ProcessServerTravel ( struct FString URL, unsigned long bAbsolute );
	void RemoveMutator ( class AMutator* MutatorToRemove );
	void AddMutator ( struct FString mutname, unsigned long bUserAdded );
	void eventNotifyPendingConnectionLost ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	class UClass* eventSetGameType ( struct FString MapName, struct FString Options, struct FString Portal );
	struct FString eventGetDefaultGameClassPath ( struct FString MapName, struct FString Options, struct FString Portal );
	int GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );
	bool HasOption ( struct FString Options, struct FString InKey );
	struct FString ParseOption ( struct FString Options, struct FString InKey );
	void GetKeyValue ( struct FString Pair, struct FString* Key, struct FString* Value );
	bool GrabOption ( struct FString* Options, struct FString* Result );
	void SetGameSpeed ( float T );
	void DebugPause ( );
	void ForceClearUnpauseDelegates ( class AActor* PauseActor );
	void eventClearPause ( );
	bool SetPause ( class APlayerController* PC, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	int GetServerPort ( );
	int GetNumPlayers ( );
	struct FString GetNetworkNumber ( );
	void InitGameReplicationInfo ( );
	void eventForceKickPlayer ( class APlayerController* PC, struct FString KickReason );
	void eventKickIdler ( class APlayerController* PC );
	void eventGameEnding ( );
	void NotifyNavigationChanged ( class ANavigationPoint* N );
	void DoNavFearCostFallOff ( );
	void eventTimer ( );
	void ResetLevel ( );
	bool ShouldReset ( class AActor* ActorToReset );
	void Reset ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void eventPostBeginPlay ( );
	class ACoverReplicator* GetCoverReplicator ( );
	bool UseLowGore ( class AWorldInfo* WI );
	struct FString FindPlayerByID ( int PlayerID );
	void eventPreBeginPlay ( );
	bool GetMapCommonPackageName ( struct FString* InFilename, struct FString* OutCommonPackageName );
	bool GetSupportedGameTypes ( unsigned long bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType );
};

// Class Engine.MCPTools
// 0x0000 (0x049C - 0x049C)
class AMCPTools : public AGameInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoLoggedIn ( );
	void eventInitGame ( struct FString Options, struct FString* ErrorMessage );
	void RegisterServer ( );
};

// Class Engine.Mutator
// 0x001C (0x028C - 0x0270)
class AMutator : public AInfo
{
public:
	struct TArray<struct FString>                      GroupNames;                                       		// 0x0270 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AMutator*                                    NextMutator;                                      		// 0x0280 (0x0008) [0x0000000000000000]              
	unsigned long                                      bUserAdded : 1;                                   		// 0x0288 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NetDamage ( int OriginalDamage, class APawn* injured, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum );
	void ScoreKill ( class AController* Killer, class AController* Killed );
	void ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );
	bool PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	bool OverridePickupQuery ( class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup );
	bool CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );
	bool HandleRestartGame ( );
	class ANavigationPoint* FindPlayerStart ( class AController* Player, unsigned char InTeam, struct FString IncomingName );
	void GetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList );
	void InitMutator ( struct FString Options, struct FString* ErrorMessage );
	void DriverLeftVehicle ( class AVehicle* V, class APawn* P );
	bool CanLeaveVehicle ( class AVehicle* V, class APawn* P );
	void DriverEnteredVehicle ( class AVehicle* V, class APawn* P );
	void NotifyLogin ( class AController* NewPlayer );
	void NotifyLogout ( class AController* Exiting );
	struct FString ParseChatPercVar ( class AController* Who, struct FString Cmd );
	void GetServerPlayers ( struct FServerResponseLine* ServerState );
	void GetServerDetails ( struct FServerResponseLine* ServerState );
	bool CheckReplacement ( class AActor* Other );
	bool CheckRelevance ( class AActor* Other );
	bool IsRelevant ( class AActor* Other );
	bool AlwaysKeep ( class AActor* Other );
	void AddMutator ( class AMutator* M );
	void ModifyPlayer ( class APawn* Other );
	void ModifyLogin ( struct FString* Portal, struct FString* Options );
	void Mutate ( struct FString MutateString, class APlayerController* Sender );
	void eventDestroyed ( );
	bool MutatorIsAllowed ( );
	void eventPreBeginPlay ( );
};

// Class Engine.PotentialClimbWatcher
// 0x0000 (0x0270 - 0x0270)
class APotentialClimbWatcher : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTick ( float DeltaTime );
};

// Class Engine.Route
// 0x001D (0x028D - 0x0270)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0270 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FActorReference>              RouteList;                                        		// 0x0278 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FudgeFactor;                                      		// 0x0288 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RouteType;                                        		// 0x028C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int MoveOntoRoutePath ( class APawn* P, unsigned char RouteDirection, float DistFudgeFactor );
	int ResolveRouteIndex ( int idx, unsigned char RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse );
};

// Class Engine.WindPointSource
// 0x0008 (0x0278 - 0x0270)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                        		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ZoneInfo
// 0x0014 (0x0284 - 0x0270)
class AZoneInfo : public AInfo
{
public:
	class UClass*                                      KillZDamageType;                                  		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              KillZ;                                            		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftKill;                                         		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftKillZ : 1;                                   		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WorldInfo
// 0x0546 (0x07CA - 0x0284)
class AWorldInfo : public AZoneInfo
{
public:
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;            		// 0x0284 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        DefaultPostProcessSettings;                       		// 0x028C (0x00E0) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct FMap_Mirror                                 ScreenMessages;                                   		// 0x036C (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FScreenMessageString>         PriorityScreenMessages;                           		// 0x03B4 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<class APortalVolume*>                PortalVolumes;                                    		// 0x03C4 (0x0010) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AEnvironmentVolume*>           EnvironmentVolumes;                               		// 0x03D4 (0x0010) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class ULevelStreaming*>              StreamingLevels;                                  		// 0x03E4 (0x0010) [0x0000000004420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FString>                      DeferredExecs;                                    		// 0x03F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ComputerName;                                     		// 0x0404 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     EngineVersion;                                    		// 0x0414 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MinNetVersion;                                    		// 0x0424 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FNetViewer>                   ReplicationViewers;                               		// 0x0434 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     NextURL;                                          		// 0x0444 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       GameTypesSupportedOnThisMap;                      		// 0x0454 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      ClientDestroyedActorContent;                      		// 0x0464 (0x0010) [0x0000000000420002]              ( CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FName>                        PreparingLevelNames;                              		// 0x0474 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     Title;                                            		// 0x0484 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Author;                                           		// 0x0494 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     EmitterPoolClassPath;                             		// 0x04A4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     DecalManagerClassPath;                            		// 0x04B4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     FractureManagerClassPath;                         		// 0x04C4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     ParticleEventManagerClassPath;                    		// 0x04D4 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FCompartmentRunList>          CompartmentRunFrames;                             		// 0x04E4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x04F4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathConstraintCache
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x053C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathGoalEvaluatorCache
	struct FPhysXSceneProperties                       PhysicsProperties;                                		// 0x0584 (0x003C) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                       		// 0x05C0 (0x0024) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FMusicTrackStruct                           CurrentMusicTrack;                                		// 0x05E4 (0x001C) [0x0000000000002000]              ( CPF_Transient )
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                             		// 0x0600 (0x001C) [0x0000000100002020]              ( CPF_Net | CPF_Transient | CPF_RepNotify )
	struct FPhysXVerticalProperties                    VerticalProperties;                               		// 0x061C (0x0014) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	struct FReverbSettings                             DefaultReverbSettings;                            		// 0x0630 (0x0010) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	struct FVector                                     DefaultColorScale;                                		// 0x0640 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FApexModuleDestructibleSettings             DestructibleSettings;                             		// 0x064C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                 		// 0x0658 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	class AReverbVolume*                               HighestPriorityReverbVolume;                      		// 0x0660 (0x0008) [0x0000000001002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       WaitForStartKey;                                  		// 0x0668 (0x0008) [0x0000000000000000]              
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x0670 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0678 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  HDRCalibrationTexture;                            		// 0x0680 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  WireframeTexture;                                 		// 0x0688 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  WhiteSquareTexture;                               		// 0x0690 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  LargeVertex;                                      		// 0x0698 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  BSPVertex;                                        		// 0x06A0 (0x0008) [0x0000000000000000]              
	class AGameReplicationInfo*                        GRI;                                              		// 0x06A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AGameInfo*                                   Game;                                             		// 0x06B0 (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            NavigationPointList;                              		// 0x06B8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AController*                                 ControllerList;                                   		// 0x06C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       PawnList;                                         		// 0x06C8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  CoverList;                                        		// 0x06D0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class APylon*                                      PylonList;                                        		// 0x06D8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class AProjectile*                                 ProjectileList;                                   		// 0x06E0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       CommittedPersistentLevelName;                     		// 0x06E8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UObjectReferencer*                           PersistentMapForcedObjects;                       		// 0x06F0 (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             MusicComp;                                        		// 0x06F8 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AEmitterPool*                                MyEmitterPool;                                    		// 0x0700 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ADecalManager*                               MyDecalManager;                                   		// 0x0708 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AFractureManager*                            MyFractureManager;                                		// 0x0710 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AParticleEventManager*                       MyParticleEventManager;                           		// 0x0718 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                  		// 0x0720 (0x0008) [0x0000000000000000]              
	class UPhysicsLODVerticalDestructible*             DestructibleVertical;                             		// 0x0728 (0x0008) [0x0000000000000000]              
	class ACrowdPopulationManagerBase*                 PopulationManager;                                		// 0x0730 (0x0008) [0x0000000000000000]              
	class UMapInfo*                                    MyMapInfo;                                        		// 0x0738 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              SquintModeKernelSize;                             		// 0x0740 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              TimeDilation;                                     		// 0x0744 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              DemoPlayTimeDilation;                             		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              TimeSeconds;                                      		// 0x074C (0x0004) [0x0000000000000000]              
	float                                              GameTimeSeconds;                                  		// 0x0750 (0x0004) [0x0000000000000000]              
	float                                              RealTimeSeconds;                                  		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              AudioTimeSeconds;                                 		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              DeltaSeconds;                                     		// 0x075C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PauseDelay;                                       		// 0x0760 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RealTimeToUnPause;                                		// 0x0764 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              StallZ;                                           		// 0x0768 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WorldGravityZ;                                    		// 0x076C (0x0004) [0x0000000000002020]              ( CPF_Net | CPF_Transient )
	float                                              DefaultGravityZ;                                  		// 0x0770 (0x0004) [0x0000000000044002]              ( CPF_Const | CPF_Config | CPF_GlobalConfig )
	float                                              GlobalGravityZ;                                   		// 0x0774 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPhysicsGravityScaling;                          		// 0x0778 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MoveRepSize;                                      		// 0x077C (0x0004) [0x0000000000000000]              
	float                                              NextSwitchCountdown;                              		// 0x0780 (0x0004) [0x0000000000000000]              
	int                                                PackedLightAndShadowMapTextureSize;               		// 0x0784 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPhysicsDeltaTime;                              		// 0x0788 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPhysicsSubsteps;                               		// 0x078C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DefaultSkinWidth;                                 		// 0x0790 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ApexLODResourceBudget;                            		// 0x0794 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fInputLockTimer;                                		// 0x0798 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ParticleLODDistanceMultiplayerBias;               		// 0x079C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ChanceOfPhysicsChunkOverride;                     		// 0x07A0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxExplosionChunkSize;                            		// 0x07A4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MaxDamageChunkSize;                               		// 0x07A8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              FractureExplosionVelScale;                        		// 0x07AC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MaxNumFacturedChunksToSpawnInAFrame;              		// 0x07B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumFacturedChunksSpawnedThisFrame;                		// 0x07B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FracturedMeshWeaponDamage;                        		// 0x07B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              CharacterLightingContrastFactor;                  		// 0x07BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPersistPostProcessToNextLevel : 1;               		// 0x07C0 (0x0004) [0x0000000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      bStreamingLevelsModified : 1;                     		// 0x07C0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bWaitingForStreamingLoadIdle : 1;                 		// 0x07C0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bWaitingForStreamingLoadVisibleComplete : 1;      		// 0x07C0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMapHasDLEsOutsideOfImportanceVolume : 1;         		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bMapHasPathingErrors : 1;                         		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPlayersOnly : 1;                                 		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPlayersOnlyPending : 1;                          		// 0x07C0 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bDropDetail : 1;                                  		// 0x07C0 (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bAggressiveLOD : 1;                               		// 0x07C0 (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned long                                      bStartup : 1;                                     		// 0x07C0 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bPathsRebuilt : 1;                                		// 0x07C0 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasPathNodes : 1;                                		// 0x07C0 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bIsMenuLevel : 1;                                 		// 0x07C0 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsLobbyLevel : 1;                                		// 0x07C0 (0x0004) [0x0000000000002002] [0x00040000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsUIWorld : 1;                                   		// 0x07C0 (0x0004) [0x0000000000002002] [0x00080000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseConsoleInput : 1;                             		// 0x07C0 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                 		// 0x07C0 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x07C0 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bHighPriorityLoading : 1;                         		// 0x07C0 (0x0004) [0x0000000000000020] [0x00800000] ( CPF_Net )
	unsigned long                                      bHighPriorityLoadingLocal : 1;                    		// 0x07C0 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bUseProcBuildingRulesetOverride : 1;              		// 0x07C0 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                		// 0x07C0 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bShowDebugText : 1;                               		// 0x07C0 (0x0004) [0x0000000000006000] [0x08000000] ( CPF_Transient | CPF_Config )
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;          		// 0x07C0 (0x0004) [0x0000000000004001] [0x10000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitExplosionChunkSize : 1;                     		// 0x07C0 (0x0004) [0x0000000000004001] [0x20000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bLimitDamageChunkSize : 1;                        		// 0x07C0 (0x0004) [0x0000000000004001] [0x40000000] ( CPF_Edit | CPF_Config )
	unsigned long                                      bAllowModulateBetterShadows : 1;                  		// 0x07C0 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bAllowLightEnvSphericalHarmonicLights : 1;        		// 0x07C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncreaseFogNearPrecision : 1;                    		// 0x07C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      NetMode;                                          		// 0x07C8 (0x0001) [0x0000000000000000]              
	unsigned char                                      NextTravelType;                                   		// 0x07C9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AEnvironmentVolume* FindEnvironmentVolume ( struct FVector TestLocation );
	bool IsShippingBuild ( );
	bool IsFinalReleaseDebugConsoleBuild ( );
	bool IsShippingPCBuild ( );
	class AWorldInfo* GetWorldInfo ( );
	struct FWorldFractureSettings GetWorldFractureSettings ( );
	void DoMemoryTracking ( );
	bool GetDemoRewindPoints ( struct TArray<int>* OutRewindPoints );
	void GetDemoFrameInfo ( int* CurrentFrame, int* TotalFrames );
	bool IsPlayingDemo ( );
	bool IsRecordingDemo ( );
	unsigned char GetDetailMode ( );
	struct FString GetMapName ( unsigned long bIncludePrefix );
	void SetMapInfo ( class UMapInfo* NewMapInfo );
	bool GetInputLock ( float fDuration );
	class UMapInfo* GetMapInfo ( );
	void SetSeamlessTravelMidpointPause ( unsigned long bNowPaused );
	bool IsInSeamlessTravel ( );
	void SeamlessTravel ( struct FString URL, unsigned long bAbsolute, struct FGuid MapPackageGuid );
	void CommitMapChange ( );
	void CancelPendingMapChange ( );
	bool IsMapChangeReady ( );
	bool IsPreparingMapChange ( );
	void PrepareMapChange ( struct TArray<struct FName>* LevelNames );
	void NotifyMatchStarted ( unsigned long bShouldActivateLevelStartupEvents, unsigned long bShouldActivateLevelBeginningEvents, unsigned long bShouldActivateLevelLoadedEvents );
	void AllPawns ( class UClass* BaseClass, struct FVector TestLocation, float TestRadius, class APawn** P );
	void AllControllers ( class UClass* BaseClass, class AController** C );
	void NavigationPointCheck ( struct FVector Point, struct FVector Extent, struct TArray<class ANavigationPoint*>* Navs, struct TArray<class UReachSpec*>* Specs );
	void RadiusNavigationPoints ( class UClass* BaseClass, struct FVector Point, float Radius, class ANavigationPoint** N );
	void AllNavigationPoints ( class UClass* BaseClass, class ANavigationPoint** N );
	void PauseGame ( unsigned long bPause );
	void Reset ( );
	void PostBeginPlay ( );
	void PreBeginPlay ( );
	void ThisIsNeverExecuted ( class ADefaultPhysicsVolume* P );
	void eventServerTravel ( struct FString URL, unsigned long bAbsolute, unsigned long bShouldSkipGameNotify );
	class UClass* GetGameClass ( );
	struct FString GetAddressURL ( );
	void VerifyNavList ( );
	void RescheduleGarbageCollectionTimer ( float maxdelay );
	void DelayGarbageCollection ( );
	void ForceGarbageCollection ( unsigned long bFullPurge );
	bool IsPlayInEditor ( );
	bool IsConsoleBuild ( unsigned char ConsoleType );
	bool IsDemoBuild ( );
	struct FString GetLocalURL ( );
	void SetLevelRBGravity ( struct FVector NewGrav );
	struct TArray<class USequence*> GetAllRootSequences ( );
	class USequence* GetGameSequence ( );
	float GetGravityZ ( );
	void UpdateMusicTrack ( struct FMusicTrackStruct NewMusicTrack );
	bool IsMenuLevel ( struct FString MapName );
	void AddOnScreenDebugMessage ( int Key, float TimeToDisplay, struct FColor DisplayColor, struct FString DebugMessage );
	void eventReplicatedEvent ( struct FName VarName );
	class UNavMeshPathGoalEvaluator* GetNavMeshPathGoalEvaluatorFromCache ( class UClass* GoalEvalClass, class UNavigationHandle* Requestor );
	class UNavMeshPathConstraint* GetNavMeshPathConstraintFromCache ( class UClass* ConstraintClass, class UNavigationHandle* Requestor );
	void ReleaseCachedConstraintsAndEvaluators ( );
};

// Class Engine.Inventory
// 0x0076 (0x02E4 - 0x026E)
class AInventory : public AActor
{
public:
	struct FString                                     ItemName;                                         		// 0x0270 (0x0010) [0x0000000040408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PickupMessage;                                    		// 0x0280 (0x0010) [0x0000000040408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     PickupForce;                                      		// 0x0290 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      DroppedPickupClass;                               		// 0x02A0 (0x0008) [0x0000000000000000]              
	class AInventory*                                  Inventory;                                        		// 0x02A8 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AInventoryManager*                           InvManager;                                       		// 0x02B0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class USoundCue*                                   PickupSound;                                      		// 0x02B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         DroppedPickupMesh;                                		// 0x02C0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         PickupFactoryMesh;                                		// 0x02C8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    DroppedPickupParticles;                           		// 0x02D0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RespawnTime;                                      		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDesireability;                                 		// 0x02DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bRenderOverlays : 1;                              		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReceiveOwnerEvents : 1;                          		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDropOnDeath : 1;                                 		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDelayedSpawn : 1;                                		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPredictRespawns : 1;                             		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OwnerEvent ( struct FName EventName );
	struct FString GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01 );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void ItemRemovedFromInvManager ( );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	void GivenTo ( class APawn* thisPawn, unsigned long bDoNotActivate );
	void AnnouncePickup ( class APawn* Other );
	void GiveTo ( class APawn* Other );
	float DetourWeight ( class APawn* Other, float PathWeight );
	float BotDesireability ( class AActor* PickupHolder, class APawn* P, class AController* C );
	void eventDestroyed ( );
	struct FString GetHumanReadableName ( );
	void ActiveRenderOverlays ( class AHUD* H );
	void RenderOverlays ( class AHUD* H );
};

// Class Engine.Weapon
// 0x00CD (0x03B1 - 0x02E4)
class AWeapon : public AInventory
{
public:
	struct TArray<struct FName>                        FiringStatesArray;                                		// 0x02E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       WeaponFireTypes;                                  		// 0x02F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       WeaponProjectiles;                                		// 0x0304 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<float>                               FireInterval;                                     		// 0x0314 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<float>                               Spread;                                           		// 0x0324 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<float>                               InstantHitDamage;                                 		// 0x0334 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<float>                               InstantHitMomentum;                               		// 0x0344 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       InstantHitDamageTypes;                            		// 0x0354 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       ShouldFireOnRelease;                              		// 0x0364 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     FireOffset;                                       		// 0x0374 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMeshComponent*                              Mesh;                                             		// 0x0380 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AAIController*                               AIController;                                     		// 0x0388 (0x0008) [0x0000008000000000]              
	float                                              EquipTime;                                        		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PutDownTime;                                      		// 0x0394 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WeaponRange;                                      		// 0x0398 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DefaultAnimSpeed;                                 		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Priority;                                         		// 0x03A0 (0x0004) [0x0000000040004000]              ( CPF_Config | CPF_EditInlineNotify )
	float                                              AIRating;                                         		// 0x03A4 (0x0004) [0x0000000000000000]              
	float                                              CachedMaxRange;                                   		// 0x03A8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bWeaponPutDown : 1;                               		// 0x03AC (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanThrow : 1;                                    		// 0x03AC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWasOptionalSet : 1;                              		// 0x03AC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bWasDoNotActivate : 1;                            		// 0x03AC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bInstantHit : 1;                                  		// 0x03AC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bMeleeWeapon : 1;                                 		// 0x03AC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      CurrentFireMode;                                  		// 0x03B0 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CacheAIController ( );
	void WeaponIsDown ( );
	bool StillFiring ( unsigned char FireMode );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( unsigned char FireMode );
	void NotifyWeaponFired ( unsigned char FireMode );
	void HandleFinishedFiring ( );
	bool TryPutDown ( );
	struct FVector eventGetPhysicalFireStartLoc ( struct FVector AimDir );
	struct FVector eventGetMuzzleLoc ( );
	void CustomFire ( );
	class AProjectile* ProjectileFire ( );
	void ProcessInstantHit ( unsigned char FiringMode, struct FImpactInfo Impact, int NumHits );
	void InstantFire ( );
	bool PassThroughDamage ( class AActor* HitActor );
	struct FImpactInfo CalcWeaponFire ( struct FVector StartTrace, struct FVector EndTrace, struct FVector Extent, struct TArray<struct FImpactInfo>* ImpactList );
	class AActor* GetTraceOwner ( );
	float eventGetTraceRange ( );
	struct FRotator GetAdjustedAim ( struct FVector StartFireLoc );
	void FireAmmunition ( );
	void FireModeUpdated ( unsigned char FiringMode, unsigned long bViaReplication );
	void SetCurrentFireMode ( unsigned char FiringModeNum );
	void SendToFiringState ( unsigned char FireModeNum );
	void ForceEndFire ( );
	void EndFire ( unsigned char FireModeNum );
	void ServerStopFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void BeginFire ( unsigned char FireModeNum );
	void ServerStartFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void WeaponCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot );
	void ClientWeaponSet ( unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ClientGivenTo ( class APawn* NewOwner, unsigned long bDoNotActivate );
	float AdjustFOVAngle ( float FOVAngle );
	void GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );
	void DetachWeapon ( );
	void AttachWeaponTo ( class USkeletalMeshComponent* MeshCpnt, struct FName SocketName );
	void ClearFlashLocation ( );
	void SetFlashLocation ( struct FVector HitLocation );
	void ClearFlashCount ( );
	void IncrementFlashCount ( );
	void WeaponEmpty ( );
	bool DenyPickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void PutDownWeapon ( );
	void Activate ( );
	void TimeWeaponEquipping ( );
	void TimeWeaponPutDown ( );
	void RefireCheckTimer ( );
	void TimeWeaponFiring ( unsigned char FireModeNum );
	float GetFireInterval ( unsigned char FireModeNum );
	void PlayFiringSound ( );
	void StopFireEffects ( unsigned char FireModeNum );
	void PlayFireEffects ( unsigned char FireModeNum, struct FVector HitLocation );
	void StopWeaponAnimation ( );
	void PlayWeaponAnimation ( struct FName Sequence, float fDesiredDuration, unsigned long bLoop, class USkeletalMeshComponent* SkelMesh );
	void WeaponPlaySound ( class USoundCue* Sound, float NoiseLoudness );
	class UAnimNodeSequence* GetWeaponAnimNodeSeq ( );
	bool FireOnRelease ( );
	float SuggestDefenseStyle ( );
	float SuggestAttackStyle ( );
	bool CanAttack ( class AActor* Other );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool FocusOnLeader ( unsigned long bLeaderFiring );
	bool RecommendRangedAttack ( );
	float GetWeaponRating ( );
	float RelativeStrengthVersus ( class APawn* P, float Dist );
	float GetAIRating ( );
	float GetDamageRadius ( );
	float MaxRange ( );
	struct FRotator AddSpread ( struct FRotator BaseAim );
	class UClass* GetProjectileClass ( );
	void ClearAllPendingFire ( );
	void ClearPendingFire ( int FireMode );
	void SetPendingFire ( int FireMode );
	bool PendingFire ( int FireMode );
	int GetPendingFireLength ( );
	bool HasAnyAmmo ( );
	bool HasAmmo ( unsigned char FireModeNum, int Amount );
	int AddAmmo ( int Amount );
	void ConsumeAmmo ( unsigned char FireModeNum );
	void GetWeaponDebug ( struct TArray<struct FString>* DebugInfo );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool DenyClientWeaponSet ( );
	bool eventIsFiring ( );
	void ClientWeaponThrown ( );
	bool CanThrow ( );
	void DropFrom ( struct FVector StartLocation, struct FVector StartVelocity );
	bool DoOverridePrevWeapon ( );
	bool DoOverrideNextWeapon ( );
	void HolderDied ( );
	bool IsActiveWeapon ( );
	void ItemRemovedFromInvManager ( );
	void eventDestroyed ( );
};

// Class Engine.InventoryManager
// 0x002E (0x029C - 0x026E)
class AInventoryManager : public AActor
{
public:
	struct TArray<int>                                 PendingFire;                                      		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AInventory*                                  InventoryChain;                                   		// 0x0280 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class AWeapon*                                     PendingWeapon;                                    		// 0x0288 (0x0008) [0x0000000000000000]              
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                      		// 0x0290 (0x0008) [0x0000000000000000]              
	unsigned long                                      bMustHoldWeapon : 1;                              		// 0x0298 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateController ( );
	void ClientSyncWeapon ( class AWeapon* NewWeapon );
	void ClientWeaponSet ( class AWeapon* NewWeapon, unsigned long bOptionalSet, unsigned long bDoNotActivate );
	void ChangedWeapon ( );
	bool CancelWeaponChange ( );
	void SetPendingWeapon ( class AWeapon* DesiredWeapon );
	void InternalSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void ServerSetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void SetCurrentWeapon ( class AWeapon* DesiredWeapon );
	void NextWeapon ( );
	void PrevWeapon ( );
	void SwitchToBestWeapon ( unsigned long bForceADifferentWeapon );
	class AWeapon* GetBestWeapon ( unsigned long bForceADifferentWeapon );
	float GetWeaponRatingFor ( class AWeapon* W );
	bool IsActiveWeapon ( class AWeapon* ThisWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void DrawHUD ( class AHUD* H );
	void OwnerEvent ( struct FName EventName );
	void OwnerDied ( );
	int ModifyDamage ( int Damage, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType );
	void eventDiscardInventory ( );
	void RemoveClassFromInventory ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	void RemoveFromInventory ( class AInventory* ItemToRemove );
	bool AddInventory ( class AInventory* NewItem, unsigned long bDoNotActivate );
	class AInventory* CreateInventory ( class UClass* NewInventoryItemClass, unsigned long bDoNotActivate );
	class AInventory* eventFindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	bool HandlePickupQuery ( class UClass* ItemClass, class AActor* Pickup );
	void eventDestroyed ( );
	void SetupFor ( class APawn* P );
	void InventoryActors ( class UClass* BaseClass, class AInventory** Inv );
	void ClearAllPendingFire ( class AWeapon* InWeapon );
	bool IsPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void ClearPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	void SetPendingFire ( class AWeapon* InWeapon, int InFiringMode );
	int GetPendingFireLength ( class AWeapon* InWeapon );
	void eventPostBeginPlay ( );
};

// Class Engine.Keypoint
// 0x0002 (0x0270 - 0x026E)
class AKeypoint : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TargetPoint
// 0x0000 (0x0270 - 0x0270)
class ATargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialInstanceActor
// 0x000A (0x0278 - 0x026E)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MatineeActor
// 0x001B (0x0289 - 0x026E)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                     		// 0x0270 (0x0008) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	float                                              PlayRate;                                         		// 0x0278 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              Position;                                         		// 0x027C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              ClientSidePositionErrorTolerance;                 		// 0x0280 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0284 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0284 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bPaused : 1;                                      		// 0x0284 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned char                                      SFXReplicationTriggerDummy;                       		// 0x0288 (0x0001) [0x0000000000000020]              ( CPF_Net )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckPriorityRefresh ( );
	void eventUpdate ( );
};

// Class Engine.NavigationPoint
// 0x0106 (0x0374 - 0x026E)
class ANavigationPoint : public AActor
{
public:
	struct FNavigationOctreeObject                     NavOctreeObject;                                  		// 0x0270 (0x003C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UReachSpec*>                   PathList;                                         		// 0x02AC (0x0010) [0x0000000004620003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FActorReference>              Volumes;                                          		// 0x02BC (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FDebugNavCost>                CostArray;                                        		// 0x02CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FGuid                                       NavGuid;                                          		// 0x02DC (0x0010) [0x0000000000220003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x02EC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            nextOrdered;                                      		// 0x02F4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            prevOrdered;                                      		// 0x02FC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            previousPath;                                     		// 0x0304 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ADroppedPickup*                              InventoryCache;                                   		// 0x030C (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0314 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FCylinder                                   MaxPathSize;                                      		// 0x031C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class USpriteComponent*                            GoodSprite;                                       		// 0x0324 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BadSprite;                                        		// 0x032C (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APawn*                                       AnchoredPawn;                                     		// 0x0334 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                visitedWeight;                                    		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                bestPathWeight;                                   		// 0x0340 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                Cost;                                             		// 0x0344 (0x0004) [0x0000000000000000]              
	int                                                ExtraCost;                                        		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TransientCost;                                    		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FearCost;                                         		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InventoryDist;                                    		// 0x0354 (0x0004) [0x0000000000000000]              
	float                                              LastDetourWeight;                                 		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NetworkID;                                        		// 0x035C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              LastAnchoredPawnTime;                             		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PathfindTag;                                      		// 0x0364 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ApproximateLineOfFire;                            		// 0x0368 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEndPoint : 1;                                    		// 0x036C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bTransientEndPoint : 1;                           		// 0x036C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHideEditorPaths : 1;                             		// 0x036C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bCanReach : 1;                                    		// 0x036C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNoPathWarnings : 1;                              		// 0x036C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bBlocked : 1;                                     		// 0x036C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bOneWayPath : 1;                                  		// 0x036C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bNeverUseStrafing : 1;                            		// 0x036C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAlwaysUseStrafing : 1;                           		// 0x036C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceNoStrafing : 1;                             		// 0x036C (0x0004) [0x0000000000000002] [0x00000200] ( CPF_Const )
	unsigned long                                      bAutoBuilt : 1;                                   		// 0x036C (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bSpecialMove : 1;                                 		// 0x036C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bNoAutoConnect : 1;                               		// 0x036C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bNotBased : 1;                                    		// 0x036C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bPathsChanged : 1;                                		// 0x036C (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bDestinationOnly : 1;                             		// 0x036C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSourceOnly : 1;                                  		// 0x036C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bSpecialForced : 1;                               		// 0x036C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bMustBeReachable : 1;                             		// 0x036C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bBlockable : 1;                                   		// 0x036C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bFlyingPreferred : 1;                             		// 0x036C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bMayCausePain : 1;                                		// 0x036C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x036C (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )
	unsigned long                                      bVehicleDestination : 1;                          		// 0x036C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMakeSourceOnly : 1;                              		// 0x036C (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bMustTouchToReach : 1;                            		// 0x036C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bCanWalkOnToReach : 1;                            		// 0x036C (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bBuildLongPaths : 1;                              		// 0x036C (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bBlockedForVehicles : 1;                          		// 0x036C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned long                                      bPreferredVehiclePath : 1;                        		// 0x036C (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bRequiresPrecisionMovement : 1;                   		// 0x036C (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bHasCrossLevelPaths : 1;                          		// 0x036C (0x0004) [0x0000000000000002] [0x80000000] ( CPF_Const )
	unsigned long                                      bShouldSaveForCheckpoint : 1;                     		// 0x0370 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDebugAbbrev ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventShutDown ( );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsOnDifferentNetwork ( class ANavigationPoint* Nav );
	bool GetAllNavInRadius ( class AActor* ChkActor, struct FVector ChkPoint, float Radius, unsigned long bSkipBlocked, int inNetworkID, struct FCylinder MinSize, struct TArray<class ANavigationPoint*>* out_NavList );
	class ANavigationPoint* GetNearestNavToPoint ( class AActor* ChkActor, struct FVector ChkPoint, class UClass* RequiredClass, struct TArray<class ANavigationPoint*> ExcludeList );
	class ANavigationPoint* GetNearestNavToActor ( class AActor* ChkActor, class UClass* RequiredClass, struct TArray<class ANavigationPoint*> ExcludeList, float MinDist );
	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	int eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );
	bool CanTeleport ( class AActor* A );
	bool IsUsableAnchorFor ( class APawn* P );
	class UReachSpec* GetReachSpecTo ( class ANavigationPoint* Nav, class UClass* SpecClass );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
};

// Class Engine.CoverLink
// 0x0095 (0x0409 - 0x0374)
class ACoverLink : public ANavigationPoint
{
public:
	struct TArray<struct FCoverSlot>                   Slots;                                            		// 0x0374 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FDynamicLinkInfo>             DynamicLinkInfos;                                 		// 0x0384 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class APawn*>                        Claims;                                           		// 0x0394 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     CircularOrigin;                                   		// 0x03A4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     StandingLeanOffset;                               		// 0x03B0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     CrouchLeanOffset;                                 		// 0x03BC (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     PopupOffset;                                      		// 0x03C8 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class ACoverLink*                                  NextCoverLink;                                    		// 0x03D4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              InvalidateDistance;                               		// 0x03DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFireLinkDist;                                  		// 0x03E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CircularRadius;                                   		// 0x03E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AlignDist;                                        		// 0x03E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AutoCoverSlotInterval;                            		// 0x03EC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              StandHeight;                                      		// 0x03F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MidHeight;                                        		// 0x03F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SlipDist;                                         		// 0x03F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TurnDist;                                         		// 0x03FC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              DangerScale;                                      		// 0x0400 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      GLOBAL_bUseSlotMarkers : 1;                       		// 0x0404 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisabled : 1;                                    		// 0x0404 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bClaimAllSlots : 1;                               		// 0x0404 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoSort : 1;                                    		// 0x0404 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bAutoAdjust : 1;                                  		// 0x0404 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCircular : 1;                                    		// 0x0404 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bLooped : 1;                                      		// 0x0404 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPlayerOnly : 1;                                  		// 0x0404 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDynamicCover : 1;                                		// 0x0404 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDebug_FireLinks : 1;                             		// 0x0404 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDebug_ExposedLinks : 1;                          		// 0x0404 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bDebug_DangerLinks : 1;                           		// 0x0404 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned char                                      LocationDescription;                              		// 0x0408 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDebugAbbrev ( );
	unsigned char GetLocationDescription ( int SlotIdx );
	struct FString eventGetDebugString ( int SlotIdx );
	int AddCoverSlot ( struct FVector SlotLocation, struct FRotator SlotRotation, int SlotIdx, unsigned long bForceSlotUpdate );
	void eventTick ( float DeltaTime );
	void eventRemovedFromWorld ( );
	bool GetCoverTurnTarget ( int SlotIdx, int Direction, struct FCoverInfo* out_Info );
	bool GetSwatTurnTarget ( int SlotIdx, int Direction, struct FCoverInfo* out_Info );
	void eventShutDown ( );
	void ApplyCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ANavigationPoint_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* inAction );
	bool IsEnabled ( );
	bool AutoAdjustSlot ( int SlotIdx, unsigned long bOnlyCheckLeans );
	void OnModifyCover ( class USeqAct_ModifyCover* Action );
	void NotifySlotOwnerCoverDisabled ( int SlotIdx );
	void eventSetSlotEnabled ( int SlotIdx, unsigned long bEnable );
	void eventSetDisabled ( unsigned long bNewDisabled );
	void GetSlotActions ( int SlotIdx, struct TArray<unsigned char>* Actions );
	bool HasFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned long bAllowFallbackLinks );
	bool GetFireLinkTo ( int SlotIdx, struct FCoverInfo ChkCover, unsigned char ChkAction, unsigned char ChkType, int* out_FireLinkIdx, struct TArray<int>* out_Items );
	bool AllowLeftTransition ( int SlotIdx );
	bool AllowRightTransition ( int SlotIdx );
	int GetSlotIdxToRight ( int SlotIdx, int Cnt );
	int GetSlotIdxToLeft ( int SlotIdx, int Cnt );
	bool IsRightEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsLeftEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool IsEdgeSlot ( int SlotIdx, unsigned long bIgnoreLeans );
	bool FindSlots ( struct FVector CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx );
	bool IsStationarySlot ( int SlotIdx );
	bool IsValidClaim ( class APawn* ChkClaim, int SlotIdx, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	bool eventUnClaim ( class APawn* OldClaim, int SlotIdx, unsigned long bUnclaimAll );
	bool eventClaim ( class APawn* NewClaim, int SlotIdx );
	void eventSetInvalidUntil ( int SlotIdx, float TimeToBecomeValid );
	bool IsExposedTo ( int SlotIdx, struct FCoverInfo ChkSlot, float* out_ExposedScale );
	class ACoverSlotMarker* GetSlotMarker ( int SlotIdx );
	struct FVector GetSlotViewPoint ( int SlotIdx, unsigned char Type, unsigned char Action );
	struct FRotator GetSlotRotation ( int SlotIdx, unsigned long bForceUseOffset );
	struct FVector GetSlotLocation ( int SlotIdx, unsigned long bForceUseOffset );
	void UnPackFireLinkInteractionInfo ( unsigned char PackedByte, unsigned char* SrcType, unsigned char* SrcAction, unsigned char* DestType, unsigned char* DestAction );
	unsigned char PackFireLinkInteractionInfo ( unsigned char SrcType, unsigned char SrcAction, unsigned char DestType, unsigned char DestAction );
	bool GetFireLinkTargetCoverInfo ( int SlotIdx, int FireLinkIdx, unsigned char ArrayID, struct FCoverInfo* out_Info );
};

// Class Engine.SFXDynamicCoverLink
// 0x000B (0x0414 - 0x0409)
class ASFXDynamicCoverLink : public ACoverLink
{
public:
	class AActor*                                      m_aContainingActor;                               		// 0x040C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CoverSlotMarker
// 0x0010 (0x0384 - 0x0374)
class ACoverSlotMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x0374 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bLastChoice : 1;                                  		// 0x0380 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIgnoreSizeLimits : 1;                            		// 0x0380 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDebugString ( );
	struct FString eventGetDebugAbbrev ( );
	bool IsValidClaim ( class APawn* ChkClaim, unsigned long bSkipTeamCheck, unsigned long bSkipOverlapCheck );
	void SetSlotEnabled ( unsigned long bEnable );
	struct FRotator GetSlotRotation ( );
	struct FVector GetSlotLocation ( );
};

// Class Engine.SFXDynamicCoverSlotMarker
// 0x0000 (0x0384 - 0x0384)
class ASFXDynamicCoverSlotMarker : public ACoverSlotMarker
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DoorMarker
// 0x0015 (0x0389 - 0x0374)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                           		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      DoorTrigger;                                      		// 0x037C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                   		// 0x0384 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitiallyClosed : 1;                             		// 0x0384 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockedWhenClosed : 1;                           		// 0x0384 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDoorOpen : 1;                                    		// 0x0384 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTempDisabledCollision : 1;                       		// 0x0384 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned char                                      DoorType;                                         		// 0x0388 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	bool ProceedWithMove ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void MoverClosed ( );
	void MoverOpened ( );
	void eventPostBeginPlay ( );
};

// Class Engine.DynamicAnchor
// 0x0008 (0x037C - 0x0374)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                      		// 0x0374 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Ladder
// 0x0010 (0x0384 - 0x0374)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                         		// 0x0374 (0x0008) [0x0000000000000000]              
	class ALadder*                                     LadderList;                                       		// 0x037C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
};

// Class Engine.AutoLadder
// 0x0000 (0x0384 - 0x0384)
class AAutoLadder : public ALadder
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LiftCenter
// 0x0028 (0x039C - 0x0374)
class ALiftCenter : public ANavigationPoint
{
public:
	struct FVector                                     LiftOffset;                                       		// 0x0374 (0x000C) [0x0000000000000000]              
	class AInterpActor*                                MyLift;                                           		// 0x0380 (0x0008) [0x0000000000000000]              
	class ATrigger*                                    LiftTrigger;                                      		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDist2D;                                        		// 0x0390 (0x0004) [0x0000000000000000]              
	float                                              CollisionHeight;                                  		// 0x0394 (0x0004) [0x0000000000000000]              
	unsigned long                                      bJumpLift : 1;                                    		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ProceedWithMove ( class APawn* Other );
	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostBeginPlay ( );
};

// Class Engine.LiftExit
// 0x000C (0x0380 - 0x0374)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                     		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bExitOnly : 1;                                    		// 0x037C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	void WaitForLift ( class APawn* Other );
	bool CanBeReachedFromLiftBy ( class APawn* Other );
};

// Class Engine.MantleMarker
// 0x000C (0x0380 - 0x0374)
class AMantleMarker : public ANavigationPoint
{
public:
	struct FCoverInfo                                  OwningSlot;                                       		// 0x0374 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Objective
// 0x0000 (0x0374 - 0x0374)
class AObjective : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PathNode
// 0x0000 (0x0374 - 0x0374)
class APathNode : public ANavigationPoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDebugAbbrev ( );
};

// Class Engine.VolumePathNode
// 0x000C (0x0380 - 0x0374)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                   		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartingHeight;                                   		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bManualSizing : 1;                                		// 0x037C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PickupFactory
// 0x002C (0x03A0 - 0x0374)
class APickupFactory : public ANavigationPoint
{
public:
	class UClass*                                      InventoryType;                                    		// 0x0374 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class UPrimitiveComponent*                         PickupMesh;                                       		// 0x037C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class APickupFactory*                              ReplacementFactory;                               		// 0x0384 (0x0008) [0x0000000000000000]              
	class APickupFactory*                              OriginalFactory;                                  		// 0x038C (0x0008) [0x0000000000000000]              
	float                                              RespawnEffectTime;                                		// 0x0394 (0x0004) [0x0000000000000000]              
	float                                              MaxDesireability;                                 		// 0x0398 (0x0004) [0x0000000000000000]              
	unsigned long                                      bOnlyReplicateHidden : 1;                         		// 0x039C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPickupHidden : 1;                                		// 0x039C (0x0004) [0x0000000100000020] [0x00000002] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bPredictRespawns : 1;                             		// 0x039C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsSuperItem : 1;                                 		// 0x039C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bRespawnPaused : 1;                               		// 0x039C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool DelayRespawn ( );
	void eventDestroyed ( );
	void SetPickupVisible ( );
	void SetPickupHidden ( );
	void RespawnEffect ( );
	float GetRespawnTime ( );
	void RecheckValidTouch ( );
	void PickedUpBy ( class APawn* P );
	void GiveTo ( class APawn* P );
	bool ReadyToPickup ( float MaxWait );
	void SpawnCopyFor ( class APawn* Recipient );
	float eventDetourWeight ( class APawn* Other, float PathWeight );
	void StartSleeping ( );
	void SetRespawn ( );
	bool CheckForErrors ( );
	void Reset ( );
	void StaticPrecache ( class AWorldInfo* W );
	void SetPickupMesh ( );
	void ShutDown ( );
	void eventSetInitialState ( );
	void InitializePickup ( );
	void eventPreBeginPlay ( );
	void eventReplicatedEvent ( struct FName VarName );
};

// Class Engine.PlayerStart
// 0x0008 (0x037C - 0x0374)
class APlayerStart : public ANavigationPoint
{
public:
	int                                                TeamIndex;                                        		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x0378 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPrimaryStart : 1;                                		// 0x0378 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.PortalMarker
// 0x0008 (0x037C - 0x0374)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                         		// 0x0374 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanTeleport ( class AActor* A );
};

// Class Engine.Pylon
// 0x00A0 (0x0414 - 0x0374)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;            		// 0x0374 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FVector>                      NextPassSeedList;                                 		// 0x037C (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AVolume*>                      ExpansionVolumes;                                 		// 0x038C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FOctreeElementId                            OctreeId;                                         		// 0x039C (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    NavMeshPtr;                                       		// 0x03A8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ObstacleMesh;                                     		// 0x03B0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DynamicObstacleMesh;                              		// 0x03B8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    WorkingSetPtr;                                    		// 0x03C0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PathObjectsThatAffectThisPylon;                   		// 0x03C8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    OctreeIWasAddedTo;                                		// 0x03D0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     ExpansionSphereCenter;                            		// 0x03D8 (0x000C) [0x0000000000000000]              
	class APylon*                                      NextPylon;                                        		// 0x03E4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                               		// 0x03EC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UNavMeshRenderingComponent*                  RenderingComp;                                    		// 0x03F4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            BrokenSprite;                                     		// 0x03FC (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              ExpansionRadius;                                  		// 0x0404 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxExpansionRadius;                               		// 0x0408 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                DebugEdgeCount;                                   		// 0x040C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bImportedMesh : 1;                                		// 0x0410 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExpansionSphereOverride : 1;                  		// 0x0410 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bNeedsCostCheck : 1;                              		// 0x0410 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDrawEdgePolys : 1;                               		// 0x0410 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDrawPolyBounds : 1;                              		// 0x0410 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderInShowPaths : 1;                           		// 0x0410 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDrawWalkableSurface : 1;                         		// 0x0410 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDrawObstacleSurface : 1;                         		// 0x0410 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bBuildThisPylon : 1;                              		// 0x0410 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x0410 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bForceObstacleMeshCollision : 1;                  		// 0x0410 (0x0004) [0x0000000000000000] [0x00000400] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanReachPylon ( class APylon* DestPylon, class AController* C );
	void OnToggle ( class USeqAct_Toggle* Action );
	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
};

// Class Engine.AISwitchablePylon
// 0x0004 (0x0418 - 0x0414)
class AAISwitchablePylon : public APylon
{
public:
	unsigned long                                      bOpen : 1;                                        		// 0x0414 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsEnabled ( );
	void eventSetEnabled ( unsigned long bEnabled );
	void PostBeginPlay ( );
};

// Class Engine.DynamicPylon
// 0x0004 (0x0418 - 0x0414)
class ADynamicPylon : public APylon
{
public:
	unsigned long                                      bMoving : 1;                                      		// 0x0414 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventStoppedMoving ( );
	void eventStartedMoving ( );
	void FlushDynamicEdges ( );
	void RebuildDynamicEdges ( );
	void PostBeginPlay ( );
};

// Class Engine.SFXDynamicPathNode
// 0x0008 (0x037C - 0x0374)
class ASFXDynamicPathNode : public ANavigationPoint
{
public:
	class AActor*                                      m_aContainingActor;                               		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Teleporter
// 0x002C (0x03A0 - 0x0374)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x0374 (0x0010) [0x0000000000400021]              ( CPF_Edit | CPF_Net | CPF_NeedCtorLink )
	struct FVector                                     TargetVelocity;                                   		// 0x0384 (0x000C) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	struct FName                                       ProductRequired;                                  		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastFired;                                        		// 0x0398 (0x0004) [0x0000000000000000]              
	unsigned long                                      bChangesVelocity : 1;                             		// 0x039C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bChangesYaw : 1;                                  		// 0x039C (0x0004) [0x0000000000000021] [0x00000002] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesX : 1;                                   		// 0x039C (0x0004) [0x0000000000000021] [0x00000004] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesY : 1;                                   		// 0x039C (0x0004) [0x0000000000000021] [0x00000008] ( CPF_Edit | CPF_Net )
	unsigned long                                      bReversesZ : 1;                                   		// 0x039C (0x0004) [0x0000000000000021] [0x00000010] ( CPF_Edit | CPF_Net )
	unsigned long                                      bEnabled : 1;                                     		// 0x039C (0x0004) [0x0000000000000021] [0x00000020] ( CPF_Edit | CPF_Net )
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x039C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AActor* eventSpecialHandling ( class APawn* Other );
	void eventPostTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool eventAccept ( class AActor* Incoming, class AActor* Source );
	void eventPostBeginPlay ( );
	bool CanTeleport ( class AActor* A );
};

// Class Engine.Note
// 0x0012 (0x0280 - 0x026E)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x0270 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Projectile
// 0x0076 (0x02E4 - 0x026E)
class AProjectile : public AActor
{
public:
	struct FScriptDelegate                             __OnExplode__Delegate;                            		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      MyDamageType;                                     		// 0x0280 (0x0008) [0x0000000000000000]              
	class AActor*                                      ZeroCollider;                                     		// 0x0288 (0x0008) [0x0000000000000000]              
	class UPrimitiveComponent*                         ZeroColliderComponent;                            		// 0x0290 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   SpawnSound;                                       		// 0x0298 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   ImpactSound;                                      		// 0x02A0 (0x0008) [0x0000000000000000]              
	class AController*                                 InstigatorController;                             		// 0x02A8 (0x0008) [0x0000000000000000]              
	class AActor*                                      ImpactedActor;                                    		// 0x02B0 (0x0008) [0x0000000000000000]              
	class UCylinderComponent*                          CylinderComponent;                                		// 0x02B8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AProjectile*                                 NextProjectile;                                   		// 0x02C0 (0x0008) [0x0000000000000000]              
	float                                              Speed;                                            		// 0x02C8 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x02CC (0x0004) [0x0000000000000000]              
	float                                              Damage;                                           		// 0x02D0 (0x0004) [0x0000000000000000]              
	float                                              DamageRadius;                                     		// 0x02D4 (0x0004) [0x0000000000000000]              
	float                                              MomentumTransfer;                                 		// 0x02D8 (0x0004) [0x0000000000000000]              
	float                                              NetCullDistanceSquared;                           		// 0x02DC (0x0004) [0x0000000000000000]              
	unsigned long                                      bSwitchToZeroCollision : 1;                       		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bBlockedByInstigator : 1;                         		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bBegunPlay : 1;                                   		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bRotationFollowsVelocity : 1;                     		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bNotBlockedByShield : 1;                          		// 0x02E0 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyFluidSurfaceImpact ( class AFluidSurfaceActor* Fluid, struct FVector HitLocation );
	float GetRange ( );
	float StaticGetTimeToLocation ( struct FVector TargetLoc, struct FVector StartLoc, class AController* RequestedBy );
	float GetTimeToLocation ( struct FVector TargetLoc );
	void eventFellOutOfWorld ( class UClass* dmgType );
	bool IsStationary ( );
	void RandSpin ( float spinRate );
	void Explode ( struct FVector HitLocation, struct FVector HitNormal );
	void eventEncroachedBy ( class AActor* Other );
	void eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp );
	void ProcessTouch ( class AActor* Other, struct FVector HitLocation, struct FVector HitNormal );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	bool HurtRadius ( float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, unsigned long bDoFullDamage );
	bool ProjectileHurtRadius ( float inDamage, float InRadius, float InMomentum, struct FVector HurtOrigin, struct FVector HitNormal );
	void Reset ( );
	bool CanSplash ( );
	unsigned char GetTeamNum ( );
	void Init ( struct FVector Direction );
	void Destroyed ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	bool eventEncroachingOn ( class AActor* Other );
	void OnExplode ( class AProjectile* pProjectile );
};

// Class Engine.RigidBodyBase
// 0x0002 (0x0270 - 0x026E)
class ARigidBodyBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneCaptureActor
// 0x000A (0x0278 - 0x026E)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                     		// 0x0270 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.SceneCapture2DActor
// 0x0008 (0x0280 - 0x0278)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0278 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneCaptureCubeMapActor
// 0x0010 (0x0288 - 0x0278)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0278 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                 		// 0x0280 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneCaptureReflectActor
// 0x0010 (0x0288 - 0x0278)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0278 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                              		// 0x0280 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneCapturePortalActor
// 0x0000 (0x0288 - 0x0288)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PortalTeleporter
// 0x001C (0x02A4 - 0x0288)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                     		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class APortalMarker*                               MyMarker;                                         		// 0x0290 (0x0008) [0x0000000000000000]              
	int                                                TextureResolutionX;                               		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureResolutionY;                               		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bMovablePortal : 1;                               		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                      		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCanTeleportVehicles : 1;                         		// 0x02A0 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool StopsProjectile ( class AProjectile* P );
	class UTextureRenderTarget2D* CreatePortalTexture ( );
	struct FVector TransformHitLocation ( struct FVector HitLocation );
	struct FVector TransformVectorDir ( struct FVector V );
	bool TransformActor ( class AActor* A );
};

// Class Engine.StaticMeshActorBase
// 0x0002 (0x0270 - 0x026E)
class AStaticMeshActorBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.StaticMeshActor
// 0x0010 (0x0280 - 0x0270)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             oAudioComponent;                                  		// 0x0278 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreBeginPlay ( );
};

// Class Engine.StaticMeshCollectionActor
// 0x0014 (0x0284 - 0x0270)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	struct TArray<class UStaticMeshComponent*>         StaticMeshComponents;                             		// 0x0270 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxStaticMeshComponents;                          		// 0x0280 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.StaticMeshActorBasedOnExtremeContent
// 0x002A (0x0298 - 0x026E)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	struct TArray<struct FSMMaterialSetterDatum>       ExtremeContent;                                   		// 0x0270 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSMMaterialSetterDatum>       NonExtremeContent;                                		// 0x0280 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0290 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};

// Class Engine.Trigger
// 0x0012 (0x0280 - 0x026E)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	float                                              AITriggerDelay;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRecentlyTriggered : 1;                           		// 0x027C (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ATrigger_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	bool StopsProjectile ( class AProjectile* P );
	void UnTrigger ( );
	void NotifyTriggered ( );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class Engine.ActorComponent
// 0x0016 (0x0086 - 0x0070)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                            		// 0x0070 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class AActor*                                      Owner;                                            		// 0x0078 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAttached : 1;                                    		// 0x0080 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bTickInEditor : 1;                                		// 0x0080 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bNeedsReattach : 1;                               		// 0x0080 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeedsUpdateTransform : 1;                        		// 0x0080 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned char                                      TickGroup;                                        		// 0x0084 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      ComponentType;                                    		// 0x0085 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DetachFromAny ( );
	void ForceUpdate ( unsigned long bTransformOnly );
	void SetComponentRBFixed ( unsigned long bFixed );
	void SetTickGroup ( unsigned char NewTickGroup );
};

// Class Engine.AudioComponent
// 0x01D2 (0x0258 - 0x0086)
class UAudioComponent : public UActorComponent
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  CueFirstNode;                                     		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FAudioComponentParam>         InstanceParameters;                               		// 0x0098 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bUseOwnerLocation : 1;                            		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bAutoPlay : 1;                                    		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAutoDestroy : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                      		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasOccluded : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bWasPlaying : 1;                                  		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bAllowSpatialization : 1;                         		// 0x00A8 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFinished : 1;                                    		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000200] ( CPF_Transient )
	unsigned long                                      bPreviewComponent : 1;                            		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned long                                      bIgnoreForFlushing : 1;                           		// 0x00A8 (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	float                                              StereoBleed;                                      		// 0x00AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LFEBleed;                                         		// 0x00B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEQFilterApplied : 1;                             		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bAlwaysPlay : 1;                                  		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bIsUISound : 1;                                   		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bIsMusic : 1;                                     		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bNoReverb : 1;                                    		// 0x00B4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	struct TArray<struct FPointer>                     WaveInstances;                                    		// 0x00B8 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct TArray<unsigned char>                       SoundNodeData;                                    		// 0x00C8 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00D8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                            		// 0x0120 (0x0048) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Listener;                                         		// 0x0168 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              PlaybackTime;                                     		// 0x0170 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class APortalVolume*                               PortalVolume;                                     		// 0x0174 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FVector                                     location;                                         		// 0x017C (0x000C) [0x0000000000201000]              ( CPF_Native )
	struct FVector                                     ComponentLocation;                                		// 0x0188 (0x000C) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	class AActor*                                      LastOwner;                                        		// 0x0194 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              SubtitlePriority;                                 		// 0x019C (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              FadeInStartTime;                                  		// 0x01A0 (0x0004) [0x0000000000000000]              
	float                                              FadeInStopTime;                                   		// 0x01A4 (0x0004) [0x0000000000000000]              
	float                                              FadeInTargetVolume;                               		// 0x01A8 (0x0004) [0x0000000000000000]              
	float                                              FadeOutStartTime;                                 		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              FadeOutStopTime;                                  		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              FadeOutTargetVolume;                              		// 0x01B4 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStartTime;                            		// 0x01B8 (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeStopTime;                             		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              AdjustVolumeTargetVolume;                         		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              CurrAdjustVolumeTargetVolume;                     		// 0x01C4 (0x0004) [0x0000000000000000]              
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                  		// 0x01C8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     CurrentLocation;                                  		// 0x01D0 (0x000C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolume;                                    		// 0x01DC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitch;                                     		// 0x01E0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGain;                         		// 0x01E4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSpatialization;                         		// 0x01E8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CurrentUseSeamlessLooping;                        		// 0x01EC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVolumeMultiplier;                          		// 0x01F0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentPitchMultiplier;                           		// 0x01F4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentHighFrequencyGainMultiplier;               		// 0x01F8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceCenterChannelVolume;                  		// 0x01FC (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentVoiceRadioVolume;                          		// 0x0200 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     LastUpdateTime;                                   		// 0x0204 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorVolume;                             		// 0x020C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              SourceInteriorLPF;                                		// 0x0210 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorVolume;                            		// 0x0214 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              CurrentInteriorLPF;                               		// 0x0218 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              VolumeMultiplier;                                 		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HighFrequencyGainMultiplier;                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionCheckInterval;                           		// 0x0228 (0x0004) [0x0000000000000000]              
	float                                              LastOcclusionCheckTime;                           		// 0x022C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                               		// 0x0230 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                      		// 0x0238 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                     		// 0x0248 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOcclusionChanged ( unsigned long bNowOccluded );
	void OnQueueSubtitles ( struct TArray<struct FSubtitleCue> Subtitles, float CueDuration );
	void OnAudioFinished ( class UAudioComponent* AC );
	void ResetToDefaults ( );
	void SetWaveParameter ( struct FName InName, class USoundNodeWave* InWave );
	void SetFloatParameter ( struct FName InName, float InFloat );
	void AdjustVolume ( float AdjustVolumeDuration, float AdjustVolumeLevel );
	void FadeOut ( float FadeOutDuration, float FadeVolumeLevel );
	void FadeIn ( float FadeInDuration, float FadeVolumeLevel );
	bool IsPlaying ( );
	void Stop ( );
	void Play ( );
};

// Class Engine.HeightFogComponent
// 0x0022 (0x00A8 - 0x0086)
class UHeightFogComponent : public UActorComponent
{
public:
	float                                              Height;                                           		// 0x0088 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Density;                                          		// 0x008C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LightBrightness;                                  		// 0x0090 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	struct FColor                                      LightColor;                                       		// 0x0094 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              ExtinctionDistance;                               		// 0x0098 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              StartDistance;                                    		// 0x009C (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              FalloffStrength;                                  		// 0x00A0 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	unsigned long                                      bEnabled : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetEnabled ( unsigned long bSetEnabled );
};

// Class Engine.PrimitiveComponent
// 0x019E (0x0224 - 0x0086)
class UPrimitiveComponent : public UActorComponent
{
public:
	int                                                Tag;                                              		// 0x0088 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBoxSphereBounds                            Bounds;                                           		// 0x008C (0x001C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    SceneInfo;                                        		// 0x00A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                DetachFence;                                      		// 0x00B0 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LocalToWorldDeterminant;                          		// 0x00B4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00B8 (0x0008) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x00C0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MotionBlurInfoIndex;                              		// 0x0100 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     DecalList;                                        		// 0x0104 (0x0010) [0x0000000001001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UDecalComponent*>              DecalsToReattach;                                 		// 0x0114 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class UPrimitiveComponent*                         ShadowParent;                                     		// 0x0124 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPrimitiveComponent*                         ReplacementPrimitive;                             		// 0x012C (0x0008) [0x0000100004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                               		// 0x0134 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x013C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                         		// 0x0144 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              MinDrawDistance;                                  		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassiveLODDistance;                               		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDrawDistance;                                  		// 0x0154 (0x0004) [0x0000000000800003]              ( CPF_Edit | CPF_Const | CPF_NoExport )
	float                                              CachedMaxDrawDistance;                            		// 0x0158 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      DepthPriorityGroup;                               		// 0x015C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ViewOwnerDepthPriorityGroup;                      		// 0x015D (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      DetailMode;                                       		// 0x015E (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBChannel;                                        		// 0x015F (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RBDominanceGroup;                                 		// 0x0160 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurScale;                                  		// 0x0164 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;              		// 0x0168 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bAllowCullDistanceVolume : 1;                     		// 0x0168 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0168 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0168 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOwnerNoSee : 1;                                  		// 0x0168 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bOnlyOwnerSee : 1;                                		// 0x0168 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreOwnerHidden : 1;                           		// 0x0168 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseAsOccluder : 1;                               		// 0x0168 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bAllowApproximateOcclusion : 1;                   		// 0x0168 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bFirstFrameOcclusion : 1;                         		// 0x0168 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIgnoreNearPlaneIntersection : 1;                 		// 0x0168 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bSelectable : 1;                                  		// 0x0168 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bForceMipStreaming : 1;                           		// 0x0168 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsStaticDecals : 1;                         		// 0x0168 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicDecals : 1;                        		// 0x0168 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsRefreshingDecals : 1;                          		// 0x0168 (0x0004) [0x0000000000003002] [0x00008000] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bAllowDecalAutomaticReAttach : 1;                 		// 0x0168 (0x0004) [0x0000000000003000] [0x00010000] ( CPF_Native | CPF_Transient )
	unsigned long                                      bAcceptsFoliage : 1;                              		// 0x0168 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadow : 1;                                   		// 0x0168 (0x0004) [0x0040000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x0168 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x0168 (0x0004) [0x0040000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0168 (0x0004) [0x0040000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;          		// 0x0168 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bCastHiddenShadow : 1;                            		// 0x0168 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0168 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x0168 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;            		// 0x0168 (0x0004) [0x0000000000020001] [0x04000000] ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bUsePrecomputedShadows : 1;                       		// 0x0168 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasExplicitShadowParent : 1;                     		// 0x0168 (0x0004) [0x0000000000002002] [0x10000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bCullModulatedShadowOnBackfaces : 1;              		// 0x0168 (0x0004) [0x0000000000000001] [0x20000000] ( CPF_Edit )
	unsigned long                                      bCullModulatedShadowOnEmissive : 1;               		// 0x0168 (0x0004) [0x0000000000000001] [0x40000000] ( CPF_Edit )
	unsigned long                                      bAllowAmbientOcclusion : 1;                       		// 0x0168 (0x0004) [0x0000000000000001] [0x80000000] ( CPF_Edit )
	unsigned long                                      bBioForcePrecomputedShadows : 1;                  		// 0x016C (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CollideActors : 1;                                		// 0x016C (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      AlwaysCheckCollision : 1;                         		// 0x016C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x016C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x016C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x016C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      CanBlockCamera : 1;                               		// 0x016C (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x016C (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableAllRigidBody : 1;                         		// 0x016C (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSkipRBGeomCreation : 1;                          		// 0x016C (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x016C (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidDrain : 1;                                  		// 0x016C (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bFluidTwoWay : 1;                                 		// 0x016C (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIgnoreRadialImpulse : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bIgnoreRadialForce : 1;                           		// 0x016C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bIgnoreForceField : 1;                            		// 0x016C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x016C (0x0004) [0x0000000000000003] [0x00010000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AlwaysLoadOnClient : 1;                           		// 0x016C (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      AlwaysLoadOnServer : 1;                           		// 0x016C (0x0004) [0x0000000000000002] [0x00040000] ( CPF_Const )
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                		// 0x016C (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      AbsoluteTranslation : 1;                          		// 0x016C (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteRotation : 1;                             		// 0x016C (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      AbsoluteScale : 1;                                		// 0x016C (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowShadowFade : 1;                             		// 0x016C (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bUmbraUpdated : 1;                                		// 0x016C (0x0004) [0x0000000000003002] [0x01000000] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bWasSNFiltered : 1;                               		// 0x016C (0x0004) [0x0000000000003002] [0x02000000] ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 OctreeNodes;                                      		// 0x0170 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                TranslucencySortPriority;                         		// 0x0180 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LocalTranslucencySortPriority;                    		// 0x0184 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0188 (0x0004) [0x0040000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x018C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x0190 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class URB_BodyInstance*                            BodyInstance;                                     		// 0x0198 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01A0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Translation;                                      		// 0x01E0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRotator                                    Rotation;                                         		// 0x01EC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              Scale;                                            		// 0x01F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     Scale3D;                                          		// 0x01FC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastSubmitTime;                                   		// 0x0208 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x020C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastRenderTimeInMasterView;                       		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FPointer                                    UmbraObjectHandle;                                		// 0x0214 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                UmbraCameraMask;                                  		// 0x021C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              ScriptRigidBodyCollisionThreshold;                		// 0x0220 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char ClosestPointOnComponentToComponent ( class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB );
	unsigned char ClosestPointOnComponentToPoint ( struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB );
	struct FRotator GetRotation ( );
	struct FVector GetPosition ( );
	void SetAbsolute ( unsigned long NewAbsoluteTranslation, unsigned long NewAbsoluteRotation, unsigned long NewAbsoluteScale );
	void SetScale3D ( struct FVector NewScale3D );
	void SetScale ( float NewScale );
	void SetRotation ( struct FRotator NewRotation );
	void SetTranslation ( struct FVector NewTranslation );
	void SetActorCollision ( unsigned long NewCollideActors, unsigned long NewBlockActors, unsigned long NewAlwaysCheckCollision );
	void SetTraceBlocking ( unsigned long NewBlockZeroExtent, unsigned long NewBlockNonZeroExtent );
	void SetViewOwnerDepthPriorityGroup ( unsigned long bNewUseViewOwnerDepthPriorityGroup, unsigned char NewViewOwnerDepthPriorityGroup );
	void SetDepthPriorityGroup ( unsigned char NewDepthPriorityGroup );
	void SetLightingChannels ( struct FLightingChannelContainer NewLightingChannels );
	void SetCullDistance ( float NewCullDistance );
	void SetLightEnvironment ( class ULightEnvironmentComponent* NewLightEnvironment );
	void SetShadowParent ( class UPrimitiveComponent* NewShadowParent );
	void SetIgnoreOwnerHidden ( unsigned long bNewIgnoreOwnerHidden );
	void SetOnlyOwnerSee ( unsigned long bNewOnlyOwnerSee );
	void SetOwnerNoSee ( unsigned long bNewOwnerNoSee );
	void SetHiddenEditor ( unsigned long NewHidden );
	void SetHidden ( unsigned long NewHidden );
	bool ShouldComponentAddToScene ( );
	void SetRBDominanceGroup ( unsigned char InDomGroup );
	class URB_BodyInstance* GetRootBodyInstance ( );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void InitRBPhys ( );
	void SetNotifyRigidBodyCollision ( unsigned long bNewNotifyRigidBodyCollision );
	void SetRBChannel ( unsigned char Channel );
	void SetRBCollisionChannels ( struct FRBCollisionChannelContainer Channels );
	void SetRBCollidesWithChannel ( unsigned char Channel, unsigned long bNewCollides );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	bool RigidBodyIsAwake ( struct FName BoneName );
	void PutRigidBodyToSleep ( struct FName BoneName );
	void WakeRigidBody ( struct FName BoneName );
	void SetRBRotation ( struct FRotator NewRot, struct FName BoneName );
	void SetRBPosition ( struct FVector NewPos, struct FName BoneName );
	void RetardRBLinearVelocity ( struct FVector RetardDir, float VelScale );
	void SetRBAngularVelocity ( struct FVector NewAngVel, unsigned long bAddToCurrent );
	void SetRBLinearVelocity ( struct FVector NewVel, unsigned long bAddToCurrent );
	void AddTorque ( struct FVector Torque, struct FName BoneName );
	void AddRadialForce ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff );
	void AddForce ( struct FVector Force, struct FVector Position, struct FName BoneName );
	void AddRadialImpulse ( struct FVector Origin, float Radius, float Strength, unsigned char Falloff, unsigned long bVelChange );
	void AddImpulse ( struct FVector impulse, struct FVector Position, struct FName BoneName, unsigned long bVelChange );
};

// Class Engine.ArrowComponent
// 0x000C (0x0230 - 0x0224)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                       		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ArrowSize;                                        		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTreatAsASprite : 1;                              		// 0x022C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BrushComponent
// 0x0074 (0x0298 - 0x0224)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                            		// 0x0224 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FKAggregateGeom                             BrushAggGeom;                                     		// 0x022C (0x004C) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    BrushPhysDesc;                                    		// 0x0278 (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                              		// 0x0280 (0x0010) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                CachedPhysBrushDataVersion;                       		// 0x0290 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bBlockComplexCollisionTrace : 1;                  		// 0x0294 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CameraConeComponent
// 0x0000 (0x0224 - 0x0224)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CylinderComponent
// 0x0010 (0x0234 - 0x0224)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                  		// 0x0224 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	float                                              CollisionRadius;                                  		// 0x0228 (0x0004) [0x000000000000000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject )
	struct FColor                                      CylinderColor;                                    		// 0x022C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bDrawBoundingBox : 1;                             		// 0x0230 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bDrawNonColliding : 1;                            		// 0x0230 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bAlwaysRenderIfSelected : 1;                      		// 0x0230 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetCylinderSize ( float NewRadius, float NewHeight );
};

// Class Engine.DrawBoxComponent
// 0x001C (0x0240 - 0x0224)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                         		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   BoxMaterial;                                      		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BoxExtent;                                        		// 0x0230 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireBox : 1;                                 		// 0x023C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitBox : 1;                                  		// 0x023C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawCapsuleComponent
// 0x0018 (0x023C - 0x0224)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                     		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CapsuleMaterial;                                  		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleHeight;                                    		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCapsule : 1;                             		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCapsule : 1;                              		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawConeComponent
// 0x0010 (0x0234 - 0x0224)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                        		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeRadius;                                       		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeAngle;                                        		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ConeSides;                                        		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawCylinderComponent
// 0x0024 (0x0248 - 0x0224)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   CylinderMaterial;                                 		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderRadius;                                   		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderTopRadius;                                		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeight;                                   		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CylinderHeightOffset;                             		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CylinderSides;                                    		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireCylinder : 1;                            		// 0x0244 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitCylinder : 1;                             		// 0x0244 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawFrustumComponent
// 0x001C (0x0240 - 0x0224)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                     		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAngle;                                     		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumAspectRatio;                               		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumStartDist;                                 		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrustumEndDist;                                   		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    Texture;                                          		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawQuadComponent
// 0x0010 (0x0234 - 0x0224)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                          		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawSphereComponent
// 0x0018 (0x023C - 0x0224)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                      		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   SphereMaterial;                                   		// 0x0228 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              SphereRadius;                                     		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SphereSides;                                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawWireSphere : 1;                              		// 0x0238 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDrawLitSphere : 1;                               		// 0x0238 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawPylonRadiusComponent
// 0x0000 (0x023C - 0x023C)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x023C - 0x023C)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LineBatchComponent
// 0x0034 (0x0258 - 0x0224)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                   		// 0x0224 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    FPrimitiveDrawInterfaceView;                      		// 0x022C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FPointer>                     BatchedLines;                                     		// 0x0234 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     BatchedPoints;                                    		// 0x0244 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              DefaultLifeTime;                                  		// 0x0254 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MeshComponent
// 0x0034 (0x0258 - 0x0224)
class UMeshComponent : public UPrimitiveComponent
{
public:
	struct TArray<class UMaterialInterface*>           Materials;                                        		// 0x0224 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UMaterialInstanceConstant*>    m_aEffectsMaterialMICs;                           		// 0x0234 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UTexture*>                     CachedTextures;                                   		// 0x0244 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	float                                              CachedTexturesTimer;                              		// 0x0254 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetUnscaledBounds ( struct FBoxSphereBounds* UnscaledBounds );
	void ClearEffectsMaterial ( );
	float GetFractionOfEffectEnabled ( );
	struct FName GetEffectsMaterial ( );
	void SetFractionOfEffectEnabled ( float fFraction );
	void SetEffectsMaterial ( struct FName nmEffect );
	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying ( int ElementIndex );
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant ( int ElementIndex );
	void PrestreamTextures ( float Seconds, unsigned long bPrioritizeCharacterTextures, int CinematicTextureGroups );
	int GetNumElements ( );
	void SetMaterial ( int ElementIndex, class UMaterialInterface* Material );
	class UMaterialInterface* GetBaseMaterial ( int ElementIndex );
	class UMaterialInterface* GetMaterial ( int ElementIndex );
};

// Class Engine.StaticMeshComponent
// 0x0048 (0x02A0 - 0x0258)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                   		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreviousLODLevel;                                 		// 0x025C (0x0004) [0x0000000000000000]              
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0260 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      WireframeColor;                                   		// 0x0268 (0x0004) [0x0040000000000001]              ( CPF_Edit )
	float                                              OverriddenLODMaxRange;                            		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioObstruction;                                 		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioOcclusion;                                   		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;           		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceStaticDecals : 1;                           		// 0x0278 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNeverBecomeDynamic : 1;                          		// 0x0278 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBioIsReceivingDecals : 1;                        		// 0x0278 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      OverridePhysMat : 1;                              		// 0x0278 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLockLightingCache : 1;                           		// 0x0278 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned char                                      LightMapEncoding;                                 		// 0x027C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct TArray<struct FGuid>                        IrrelevantLights;                                 		// 0x0280 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FStaticMeshComponentLODInfo>  LODData;                                          		// 0x0290 (0x0010) [0x0000000080001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanBecomeDynamic ( );
	void SetForceStaticDecals ( unsigned long bInForceStaticDecals );
	void DisableRBCollisionWithSMC ( class UPrimitiveComponent* OtherSMC, unsigned long bDisabled );
	bool SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce );
};

// Class Engine.ModelComponent
// 0x0040 (0x0264 - 0x0224)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                            		// 0x0224 (0x0008) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ZoneIndex;                                        		// 0x022C (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	int                                                ComponentIndex;                                   		// 0x0230 (0x0004) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	struct TArray<struct FPointer>                     Nodes;                                            		// 0x0234 (0x0010) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	struct TArray<struct FPointer>                     Edges;                                            		// 0x0244 (0x0010) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )
	struct TArray<struct FPointer>                     Elements;                                         		// 0x0254 (0x0010) [0x0000000000803002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpriteComponent
// 0x0020 (0x0244 - 0x0224)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                           		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScreenSize;                                       		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              U;                                                		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UL;                                               		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              V;                                                		// 0x0238 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VL;                                               		// 0x023C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsScreenSizeScaled : 1;                          		// 0x0240 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetSpriteAndUV ( class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL );
	void SetUV ( int NewU, int NewUL, int NewV, int NewVL );
	void SetSprite ( class UTexture2D* NewSprite );
};

// Class Engine.RadialBlurComponent
// 0x006B (0x00F1 - 0x0086)
class URadialBlurComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[ 0xA ];                             		// 0x0086 (0x000A) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                     		// 0x0090 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterialInterface*                          Material;                                         		// 0x00D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BlurScale;                                        		// 0x00D8 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              BlurFalloffExponent;                              		// 0x00DC (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              BlurOpacity;                                      		// 0x00E0 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	float                                              MaxCullDistance;                                  		// 0x00E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              DistanceFalloffExponent;                          		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bRenderAsVelocity : 1;                            		// 0x00EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnabled : 1;                                     		// 0x00EC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned char                                      DepthPriorityGroup;                               		// 0x00F0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdatePropertyBlurOpacity ( );
	void OnUpdatePropertyBlurFalloffExponent ( );
	void OnUpdatePropertyBlurScale ( );
	void SetEnabled ( unsigned long bInEnabled );
	void SetBlurOpacity ( float InBlurOpacity );
	void SetBlurFalloffExponent ( float InBlurFalloffExponent );
	void SetBlurScale ( float InBlurScale );
	void SetMaterial ( class UMaterialInterface* InMaterial );
};

// Class Engine.SceneCaptureComponent
// 0x004F (0x00D5 - 0x0086)
class USceneCaptureComponent : public UActorComponent
{
public:
	struct TArray<struct FPointer>                     PostProcessProxies;                               		// 0x0088 (0x0010) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    CaptureInfo;                                      		// 0x0098 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ViewState;                                        		// 0x00A0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    UmbraCamera;                                      		// 0x00A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UPostProcessChain*                           PostProcess;                                      		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ClearColor;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SceneLOD;                                         		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaxUpdateDist;                                    		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxViewDistanceOverride;                          		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxStreamingUpdateDist;                           		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnabled : 1;                                     		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableFog : 1;                                   		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseMainScenePostProcessSettings : 1;             		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfTextureUsersOccluded : 1;            		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                   		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bSkipRenderingDepthPrepass : 1;                   		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned char                                      ViewMode;                                         		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetEnabled ( unsigned long bEnable );
	void SetFrameRate ( float NewFrameRate );
};

// Class Engine.SceneCapture2DComponent
// 0x00A3 (0x0178 - 0x00D5)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	unsigned char                                      UnknownData00[ 0xB ];                             		// 0x00D5 (0x000B) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                       		// 0x00E0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     ProjMatrix;                                       		// 0x0120 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x0160 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FieldOfView;                                      		// 0x0168 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              NearPlane;                                        		// 0x016C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FarPlane;                                         		// 0x0170 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateMatrices : 1;                              		// 0x0174 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetView ( struct FVector NewLocation, struct FRotator NewRotation );
	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane );
};

// Class Engine.SceneCapture2DHitMaskComponent
// 0x002B (0x0100 - 0x00D5)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                 		// 0x00E0 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                RenderSection;                                    		// 0x00E8 (0x0004) [0x0000000000000000]              
	int                                                ForceLOD;                                         		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              FadingStartTimeAfterHit;                          		// 0x00F0 (0x0004) [0x0000000000000000]              
	float                                              FadingPercentage;                                 		// 0x00F4 (0x0004) [0x0000000000000000]              
	float                                              FadingDurationTime;                               		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              FadingIntervalTime;                               		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetCaptureParameters ( struct FVector InMaskPosition, float InMaskRadius, struct FVector InStartupPosition );
	void SetCaptureTargetTexture ( class UTextureRenderTarget2D* InTextureTarget );
};

// Class Engine.SceneCaptureCubeMapComponent
// 0x001F (0x00F4 - 0x00D5)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	struct FVector                                     WorldLocation;                                    		// 0x00D8 (0x000C) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UTextureRenderTargetCube*                    TextureTarget;                                    		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NearPlane;                                        		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneCapturePortalComponent
// 0x0017 (0x00EC - 0x00D5)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      ViewDestination;                                  		// 0x00E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ScaleFOV;                                         		// 0x00E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetCaptureParameters ( class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest );
};

// Class Engine.SceneCaptureReflectComponent
// 0x000F (0x00E4 - 0x00D5)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                    		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleFOV;                                         		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WindDirectionalSourceComponent
// 0x001A (0x00A0 - 0x0086)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneProxy;                                       		// 0x0088 (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              Strength;                                         		// 0x0090 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              Phase;                                            		// 0x0094 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              Frequency;                                        		// 0x0098 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              Speed;                                            		// 0x009C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WindPointSourceComponent
// 0x000C (0x00AC - 0x00A0)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                           		// 0x00A0 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              Radius;                                           		// 0x00A8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactory
// 0x002C (0x008C - 0x0060)
class UActorFactory : public UObject
{
public:
	struct FString                                     MenuName;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameplayActorClass;                               		// 0x0070 (0x0008) [0x0000000000000000]              
	class UClass*                                      NewActorClass;                                    		// 0x0078 (0x0008) [0x0000000000000000]              
	int                                                MenuPriority;                                     		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                AlternateMenuPriority;                            		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bPlaceable : 1;                                   		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_bNoCollisionFail : 1;                           		// 0x0088 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPostCreateActor ( class AActor* NewActor );
};

// Class Engine.ActorFactoryActor
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                       		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAI
// 0x0038 (0x00C4 - 0x008C)
class UActorFactoryAI : public UActorFactory
{
public:
	struct FString                                     PawnName;                                         		// 0x008C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       InventoryList;                                    		// 0x009C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      ControllerClass;                                  		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnClass;                                        		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                TeamIndex;                                        		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bGiveDefaultInventory : 1;                        		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAmbientSound
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                  		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAmbientSoundMovable
// 0x0000 (0x0094 - 0x0094)
class UActorFactoryAmbientSoundMovable : public UActorFactoryAmbientSound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                    		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAmbientSoundNonLoop
// 0x0000 (0x0094 - 0x0094)
class UActorFactoryAmbientSoundNonLoop : public UActorFactoryAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryAmbientSoundSimpleToggleable
// 0x0000 (0x0094 - 0x0094)
class UActorFactoryAmbientSoundSimpleToggleable : public UActorFactoryAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryApexDestructible
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryApexDestructible : public UActorFactory
{
public:
	class UApexDestructibleAsset*                      DestructibleAsset;                                		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryArchetype
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                   		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x008C - 0x008C)
class UActorFactoryCoverLink : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryDominantDirectionalLight
// 0x0000 (0x008C - 0x008C)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryDynamicSM
// 0x0019 (0x00A5 - 0x008C)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	struct FVector                                     DrawScale3D;                                      		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoEncroachCheck : 1;                             		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CollisionType;                                    		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryMover
// 0x0003 (0x00A8 - 0x00A5)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryRigidBody
// 0x002C (0x00D1 - 0x00A5)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	struct FVector                                     InitialVelocity;                                  		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UDistributionVector*                         AdditionalVelocity;                               		// 0x00B4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         InitialAngularVelocity;                           		// 0x00BC (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              StayUprightTorqueFactor;                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                   		// 0x00CC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x00CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryEmitter
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                   		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0014 (0x00A0 - 0x008C)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	struct FVector                                     DrawScale3D;                                      		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UFracturedStaticMesh*                        FracturedStaticMesh;                              		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryLensFlare
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                  		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryLight
// 0x0000 (0x008C - 0x008C)
class UActorFactoryLight : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryPathNode
// 0x0000 (0x008C - 0x008C)
class UActorFactoryPathNode : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryPhysicsAsset
// 0x002C (0x00B8 - 0x008C)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	struct FVector                                     InitialVelocity;                                  		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DrawScale3D;                                      		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAwake : 1;                                  		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNotifyRigidBodyCollision : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseCompartment : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryPhysXDestructible
// 0x0014 (0x00A0 - 0x008C)
class UActorFactoryPhysXDestructible : public UActorFactory
{
public:
	struct FVector                                     DrawScale3D;                                      		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UPhysXDestructible*                          PhysXDestructible;                                		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x008C - 0x008C)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryPylon
// 0x0000 (0x008C - 0x008C)
class UActorFactoryPylon : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactorySkeletalMesh
// 0x0018 (0x00A4 - 0x008C)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimSet*                                    AnimSet;                                          		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimSequenceName;                                 		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryStaticMesh
// 0x0014 (0x00A0 - 0x008C)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	struct FVector                                     DrawScale3D;                                      		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryTrigger
// 0x0000 (0x008C - 0x008C)
class UActorFactoryTrigger : public UActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryVehicle
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioEngineEnums
// 0x0000 (0x0060 - 0x0060)
class UBioEngineEnums : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioParallelAnimUpdater
// 0x0008 (0x0068 - 0x0060)
class UBioParallelAnimUpdater : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0060 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioPathQueue
// 0x007C (0x00DC - 0x0060)
class UBioPathQueue : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x7C ];                            		// 0x0060 (0x007C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioTestFramework
// 0x0008 (0x0068 - 0x0060)
class UBioTestFramework : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BookMark
// 0x0018 (0x0078 - 0x0060)
class UBookMark : public UObject
{
public:
	struct FVector                                     location;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    Rotation;                                         		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Canvas
// 0x005C (0x00BC - 0x0060)
class UCanvas : public UObject
{
public:
	struct FPlane                                      ColorModulate;                                    		// 0x0060 (0x0010) [0x0000000000000000]              
	struct FPointer                                    Canvas;                                           		// 0x0070 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SceneView;                                        		// 0x0078 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UFont*                                       Font;                                             		// 0x0080 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture;                                   		// 0x0088 (0x0008) [0x0000000000000000]              
	float                                              OrgX;                                             		// 0x0090 (0x0004) [0x0000000000000000]              
	float                                              OrgY;                                             		// 0x0094 (0x0004) [0x0000000000000000]              
	float                                              ClipX;                                            		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              ClipY;                                            		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              CurX;                                             		// 0x00A0 (0x0004) [0x0000000000000000]              
	float                                              CurY;                                             		// 0x00A4 (0x0004) [0x0000000000000000]              
	float                                              CurYL;                                            		// 0x00A8 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x00B0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bCenter : 1;                                      		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNoSmooth : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DrawDebugGraph ( struct FString Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, struct FVector2D RangeX, struct FVector2D RangeY );
	void DrawTextureDoubleLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Spacing, float Width, struct FColor LineColor, struct FColor AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL );
	void DrawTextureLine ( struct FVector StartPoint, struct FVector EndPoint, float Perc, float Width, struct FColor LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL );
	void Draw2DLine ( float X1, float Y1, float X2, float Y2, struct FColor LineColor );
	void DrawRotatedMaterialTile ( class UMaterialInterface* Mat, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void DrawRotatedTile ( class UTexture* Tex, struct FRotator Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY );
	void SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );
	void DrawBox ( float Width, float Height );
	void DrawRect ( float RectX, float RectY, class UTexture* Tex );
	void DrawIconSection ( struct FCanvasIcon Icon, float X, float Y, float UStartPct, float VStartPct, float UEndPct, float VEndPct, float Scale );
	void DrawIcon ( struct FCanvasIcon Icon, float X, float Y, float Scale );
	struct FCanvasIcon MakeIcon ( class UTexture* Texture, float U, float V, float UL, float VL );
	void DrawTexture ( class UTexture* Tex, float Scale );
	void SetClip ( float X, float Y );
	void SetOrigin ( float X, float Y );
	void SetPos ( float PosX, float PosY );
	void eventReset ( unsigned long bKeepOrigin );
	void WrapStringToArray ( struct FString Text, float dx, struct FString EOL, struct TArray<struct FString>* OutArray );
	void DrawColorizedTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor );
	void DrawTileStretched ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, struct FLinearColor LColor, unsigned long bStretchHorizontally, unsigned long bStretchVertically, float ScalingFactor );
	void PopTransform ( );
	void PushTranslationMatrix ( struct FVector TranslationVector );
	void DeProject ( struct FVector2D ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	struct FVector Project ( struct FVector location );
	void DrawTileClipped ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL );
	void DrawTextRA ( struct FString Text, unsigned long CR );
	void DrawTextScaled ( struct FString Text, float fXScale, float fYScale );
	void DrawTextCentered ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo RenderInfo );
	void DrawText ( struct FString Text, unsigned long CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo );
	void TextSize ( struct FString String, float* XL, float* YL );
	void StrLen ( struct FString String, float* XL, float* YL );
	struct FFontRenderInfo CreateFontRenderInfo ( unsigned long bClipText, unsigned long bEnableShadow, struct FLinearColor GlowColor, struct FVector2D GlowOuterRadius, struct FVector2D GlowInnerRadius );
	void DrawMaterialTileClipped ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawMaterialTile ( class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL );
	void DrawTile ( class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL );
};

// Class Engine.Channel
// 0x0038 (0x0098 - 0x0060)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x38 ];                            		// 0x0060 (0x0038) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorChannel
// 0x008C (0x0124 - 0x0098)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x8C ];                            		// 0x0098 (0x008C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ControlChannel
// 0x0014 (0x00AC - 0x0098)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x14 ];                            		// 0x0098 (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FileChannel
// 0x0218 (0x02B0 - 0x0098)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x218 ];                           		// 0x0098 (0x0218) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.VoiceChannel
// 0x0010 (0x00A8 - 0x0098)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x0098 (0x0010) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Controller
// 0x0214 (0x0482 - 0x026E)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x0270 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<class ANavigationPoint*>             RouteCache;                                       		// 0x0278 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FVisiblePortalInfo>           VisiblePortals;                                   		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      NavigationHandleClass;                            		// 0x0298 (0x0008) [0x0000000000000000]              
	struct FBasedPosition                              DestinationPosition;                              		// 0x02A0 (0x0038) [0x0000000000000000]              
	struct FBasedPosition                              FocalPosition;                                    		// 0x02D8 (0x0038) [0x0000000000000000]              
	struct FBasedPosition                              AdjustPosition;                                   		// 0x0310 (0x0038) [0x0000000000000000]              
	class AActor*                                      GoalList[ 0x4 ];                                  		// 0x0348 (0x0020) [0x0000000000000000]              
	struct FVector                                     CurrentPathDir;                                   		// 0x0368 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewX;                                            		// 0x0374 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewY;                                            		// 0x0380 (0x000C) [0x0000000000000000]              
	struct FVector                                     ViewZ;                                            		// 0x038C (0x000C) [0x0000000000000000]              
	struct FVector                                     FailedReachLocation;                              		// 0x0398 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    OldBasedRotation;                                 		// 0x03A4 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;                		// 0x03B0 (0x000C) [0x0000000000000000]              
	class APawn*                                       Pawn;                                             		// 0x03BC (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x03C4 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class AController*                                 NextController;                                   		// 0x03CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UNavigationHandle*                           NavigationHandle;                                 		// 0x03D4 (0x0008) [0x0000000000000000]              
	class AActor*                                      MoveTarget;                                       		// 0x03DC (0x0008) [0x0000000000000000]              
	class AActor*                                      Focus;                                            		// 0x03E4 (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            StartSpot;                                        		// 0x03EC (0x0008) [0x0000000000000000]              
	class UReachSpec*                                  CurrentPath;                                      		// 0x03F4 (0x0008) [0x0000000000000000]              
	class UReachSpec*                                  NextRoutePath;                                    		// 0x03FC (0x0008) [0x0000000000000000]              
	class AActor*                                      RouteGoal;                                        		// 0x0404 (0x0008) [0x0000000000000000]              
	class AInterpActor*                                PendingMover;                                     		// 0x040C (0x0008) [0x0000000000000000]              
	class AActor*                                      FailedMoveTarget;                                 		// 0x0414 (0x0008) [0x0000000000000000]              
	class AActor*                                      PendingDoor;                                      		// 0x041C (0x0008) [0x0000000000000000]              
	struct FName                                       PendingDoorState;                                 		// 0x0424 (0x0008) [0x0000000000000000]              
	class APawn*                                       ShotTarget;                                       		// 0x042C (0x0008) [0x0000000000000000]              
	class AActor*                                      LastFailedReach;                                  		// 0x0434 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       Enemy;                                            		// 0x043C (0x0008) [0x1000000000000000]              
	int                                                PlayerNum;                                        		// 0x0444 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MinHitWall;                                       		// 0x0448 (0x0004) [0x0000000000000000]              
	float                                              MoveTimer;                                        		// 0x044C (0x0004) [0x0000000000000000]              
	float                                              RouteDist;                                        		// 0x0450 (0x0004) [0x0000000000000000]              
	float                                              LastRouteFind;                                    		// 0x0454 (0x0004) [0x0000000000000000]              
	int                                                MoveFailureCount;                                 		// 0x0458 (0x0004) [0x0000000000000000]              
	float                                              GroundPitchTime;                                  		// 0x045C (0x0004) [0x0000000000000000]              
	float                                              FailedReachTime;                                  		// 0x0460 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SightCounter;                                     		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              SightCounterInterval;                             		// 0x0468 (0x0004) [0x0000000000000000]              
	float                                              InUseNodeCostMultiplier;                          		// 0x046C (0x0004) [0x0000000000000000]              
	int                                                HighJumpNodeCostModifier;                         		// 0x0470 (0x0004) [0x0000000000000000]              
	float                                              MaxMoveTowardPawnTargetTime;                      		// 0x0474 (0x0004) [0x0000000000000000]              
	float                                              LaneOffset;                                       		// 0x0478 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsPlayer : 1;                                    		// 0x047C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bGodMode : 1;                                     		// 0x047C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAffectedByHitEffects : 1;                        		// 0x047C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSoaking : 1;                                     		// 0x047C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSlowerZAcquire : 1;                              		// 0x047C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNotifyPostLanded : 1;                            		// 0x047C (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bNotifyApex : 1;                                  		// 0x047C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAdvancedTactics : 1;                             		// 0x047C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bCanDoSpecial : 1;                                		// 0x047C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAdjusting : 1;                                   		// 0x047C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bPreparingMove : 1;                               		// 0x047C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForceStrafe : 1;                                 		// 0x047C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bLOSflag : 1;                                     		// 0x047C (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned long                                      bSkipExtraLOSChecks : 1;                          		// 0x047C (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bNotifyFallingHitWall : 1;                        		// 0x047C (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x047C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bSeeFriendly : 1;                                 		// 0x047C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bUsingPathLanes : 1;                              		// 0x047C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned char                                      bFire;                                            		// 0x0480 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bAltFire;                                         		// 0x0481 (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	float GetDestinationOffset ( );
	void InitNavigationHandle ( );
	void ReadyForLift ( );
	void SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, float Wait, class UClass* DamageType );
	void eventCurrentLevelUnloaded ( );
	class AActor* GetRouteGoalAfter ( int RouteIdx );
	bool eventIsInCombat ( unsigned long bForceCheck );
	bool eventIsSpectating ( );
	void OnToggleHidden ( class USeqAct_ToggleHidden* Action );
	void NotifyAddInventory ( class AInventory* NewItem );
	void OnModifyHealth ( class USeqAct_ModifyHealth* Action );
	bool NotifyCoverClaimViolation ( class AController* NewClaim, class ACoverLink* Link, int SlotIdx );
	void eventNotifyCoverAdjusted ( );
	void NotifyCoverDisabled ( class ACoverLink* Link, int SlotIdx, unsigned long bAdjacentIdx );
	void OnSetVelocity ( class USeqAct_SetVelocity* Action );
	void OnSetPhysics ( class USeqAct_SetPhysics* Action );
	void OnToggleAffectedByHitEffects ( class USeqAct_ToggleAffectedByHitEffects* inAction );
	void OnToggleGodMode ( class USeqAct_ToggleGodMode* inAction );
	void OnTeleport ( class USeqAct_Teleport* Action );
	bool IsDead ( );
	struct FString GetHumanReadableName ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void StopLatentExecution ( );
	bool InLatentExecution ( int LatentActionNumber );
	void eventReachedPreciseDestination ( );
	void eventNotifyMissedJump ( );
	void eventNotifyJumpApex ( );
	bool eventNotifyBump ( class AActor* Other, struct FVector HitNormal );
	void eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	bool eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume );
	void eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );
	bool LandingShake ( );
	bool IsAimingAt ( class AActor* ATarget, float Epsilon );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	bool eventHandlePathObstruction ( class AActor* BlockedBy );
	void UnderLift ( class ALiftCenter* Lift );
	bool eventMoverFinished ( );
	void WaitForMover ( class AInterpActor* M );
	bool eventAllowDetourTo ( class ANavigationPoint* N );
	void eventMayFall ( unsigned long bFloor, struct FVector FloorNormal );
	void EndClimbLadder ( );
	void eventLongFall ( );
	void WaitForLanding ( float waitDuration );
	bool PickWallAdjust ( struct FVector HitNormal );
	void eventMoveUnreachable ( struct FVector AttemptedDest, class AActor* AttemptedTarget );
	bool ActorReachable ( class AActor* anActor );
	bool PointReachable ( struct FVector aPoint );
	class AActor* FindPathToIntercept ( class APawn* P, class AActor* InRouteGoal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class ANavigationPoint* FindRandomDest ( );
	class AActor* FindPathTowardNearest ( class UClass* GoalClass, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	void FindPathTowardIterative ( class AActor* Goal, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathToward ( class AActor* anActor, unsigned long bWeightDetours, int MaxPathLength, unsigned long bReturnPartial );
	class AActor* FindPathTo ( struct FVector aPoint, int MaxPathLength, unsigned long bReturnPartial );
	void FinishRotation ( );
	void eventSetupSpecialPathAbilities ( );
	void MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, unsigned long bUseStrafing, unsigned long bShouldWalk );
	void MoveToDirectNonPathPos ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk );
	void MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, float DestinationOffset, unsigned long bShouldWalk );
	void eventHearNoise ( float Loudness, class AActor* NoiseMaker, struct FName NoiseType );
	class APawn* PickTarget ( class UClass* TargetClass, struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* bestDist );
	bool CanSeeByPoints ( struct FVector ViewLocation, struct FVector TestLocation, struct FRotator ViewRotation );
	bool LineOfSightTo ( class AActor* Other, struct FVector chkLocation, unsigned long bTryAlternateTargetLoc );
	void NotifyChangedWeapon ( class AWeapon* PrevWeapon, class AWeapon* NewWeapon );
	void ClientSetWeapon ( class UClass* WeaponClass );
	void ClientSwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void SwitchToBestWeapon ( unsigned long bForceNewWeapon );
	void ReceiveProjectileWarning ( class AProjectile* Proj );
	void ReceiveWarning ( class APawn* Shooter, float projSpeed, struct FVector FireDir );
	void CheckNearMiss ( class APawn* Shooter, class AWeapon* W, struct FVector WeapLoc, struct FVector LineDir, struct FVector HitLocation );
	void InstantWarnTarget ( class AActor* InTarget, class AWeapon* FiredWeapon, struct FVector FireDir );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void HandlePickup ( class AInventory* Inv );
	void RoundHasEnded ( class AActor* EndRoundFocus );
	void eventStopFiring ( );
	bool FireWeaponAt ( class AActor* InActor );
	float eventRatePickup ( class AActor* PickupHolder, class UClass* inPickup );
	void WarnProjExplode ( class AProjectile* Proj );
	void NotifyProjLanded ( class AProjectile* Proj );
	void NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void SetCharacter ( struct FString InCharacter );
	void ServerGivePawn ( );
	void ServerRestartPlayer ( );
	unsigned char GetTeamNum ( );
	void InitPlayerReplicationInfo ( );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void EnemyJustTeleported ( );
	bool BeyondFogDistance ( struct FVector Viewpoint, struct FVector OtherPoint );
	void Restart ( unsigned long bVehicleTransition );
	void CleanupPRI ( );
	void eventDestroyed ( );
	void eventNotifyPostLanded ( );
	bool GamePlayEndedState ( );
	void PawnDied ( class APawn* inPawn );
	void eventUnPossess ( );
	void UpdateSex ( );
	void eventPossess ( class APawn* inPawn, unsigned long bVehicleTransition );
	void OnPossess ( class USeqAct_Possess* inAction );
	void eventReplicatedEvent ( struct FName VarName );
	void ClientSetRotation ( struct FRotator NewRotation, unsigned long bResetCamera );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void Reset ( );
	void eventPostBeginPlay ( );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventNotifyPathChanged ( );
	struct FVector GetAdjustLocation ( );
	void SetAdjustLocation ( struct FVector NewLoc, unsigned long bAdjust, unsigned long bOffsetFromBase );
	struct FVector GetDestinationPosition ( );
	void SetDestinationPosition ( struct FVector Dest, unsigned long bOffsetFromBase );
	struct FVector GetFocalPoint ( );
	void SetFocalPoint ( struct FVector FP, unsigned long bOffsetFromBase );
	void RouteCache_RemoveIndex ( int InIndex, int Count );
	void RouteCache_RemoveItem ( class ANavigationPoint* Nav );
	void RouteCache_InsertItem ( class ANavigationPoint* Nav, int idx );
	void RouteCache_AddItem ( class ANavigationPoint* Nav );
	void RouteCache_Empty ( );
	bool IsLocalPlayerController ( );
};

// Class Engine.PlayerController
// 0x0304 (0x0786 - 0x0482)
class APlayerController : public AController
{
public:
	struct FString                                     LastBroadcastString[ 0x4 ];                       		// 0x0484 (0x0040) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     QuickSaveString;                                  		// 0x04C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoPauseMessage;                                   		// 0x04D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ViewingFrom;                                      		// 0x04E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OwnCamera;                                        		// 0x04F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ForceFeedbackManagerClassName;                    		// 0x0504 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UInteraction*>                 Interactions;                                     		// 0x0514 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FUniqueNetId>                 VoiceMuteList;                                    		// 0x0524 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FUniqueNetId>                 GameplayVoiceMuteList;                            		// 0x0534 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FUniqueNetId>                 VoicePacketFilter;                                		// 0x0544 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FInputMatchRequest>           InputRequests;                                    		// 0x0554 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        PendingMapChangeLevelNames;                       		// 0x0564 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDebugTextInfo>               DebugTextList;                                    		// 0x0574 (0x0010) [0x0200000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UAudioComponent*>              HearSoundActiveComponents;                        		// 0x0584 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UAudioComponent*>              HearSoundPoolComponents;                          		// 0x0594 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class AActor*>                       HiddenActors;                                     		// 0x05A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanUnpause__Delegate;                           		// 0x05B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                   		// 0x05C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      CameraClass;                                      		// 0x05D4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      PlayerOwnerDataStoreClass;                        		// 0x05DC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      SavedMoveClass;                                   		// 0x05E4 (0x0008) [0x0000000000000000]              
	class UClass*                                      CheatClass;                                       		// 0x05EC (0x0008) [0x0000000000000000]              
	class UClass*                                      InputClass;                                       		// 0x05F4 (0x0008) [0x0000000000000000]              
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x05FC (0x0034) [0x0000000000000000]              
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x0630 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0638 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FRotator                                    TargetViewRotation;                               		// 0x0640 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x064C (0x000C) [0x0000000000000000]              
	struct FVector                                     LastAckedAccel;                                   		// 0x0658 (0x000C) [0x0000000000000000]              
	struct FVector                                     OldFloor;                                         		// 0x0664 (0x000C) [0x0000000000000000]              
	struct FVector                                     FailedPathStart;                                  		// 0x0670 (0x000C) [0x0000000000000002]              ( CPF_Const )
	class UPlayer*                                     Player;                                           		// 0x067C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ACamera*                                     PlayerCamera;                                     		// 0x0684 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UPlayerOwnerDataStore*                       CurrentPlayerData;                                		// 0x068C (0x0008) [0x0000000000000000]              
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0694 (0x0008) [0x0000000000000000]              
	class AActor*                                      ViewTarget;                                       		// 0x069C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      RealViewTarget;                                   		// 0x06A4 (0x0008) [0x0000000000000000]              
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                          		// 0x06AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AHUD*                                        myHUD;                                            		// 0x06B4 (0x0008) [0x0000000000000000]              
	class USavedMove*                                  SavedMoves;                                       		// 0x06BC (0x0008) [0x0000000000000000]              
	class USavedMove*                                  FreeMoves;                                        		// 0x06C4 (0x0008) [0x0000000000000000]              
	class USavedMove*                                  PendingMove;                                      		// 0x06CC (0x0008) [0x0000000000000000]              
	class UCheatManager*                               CheatManager;                                     		// 0x06D4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UPlayerInput*                                PlayerInput;                                      		// 0x06DC (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x06E4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UForceFeedbackManager*                       ForceFeedbackManager;                             		// 0x06EC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x06F4 (0x0008) [0x0000000000000000]              
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                 		// 0x06FC (0x0008) [0x0000000000000000]              
	struct FName                                       DelayedJoinSessionName;                           		// 0x0704 (0x0008) [0x0000000000000000]              
	class ACoverReplicator*                            MyCoverReplicator;                                		// 0x070C (0x0008) [0x0000000000000000]              
	class UNetConnection*                              PendingSwapConnection;                            		// 0x0714 (0x0008) [0x0000000000200002]              ( CPF_Const )
	float                                              MaxResponseTime;                                  		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              WaitDelay;                                        		// 0x0720 (0x0004) [0x0000000000000000]              
	float                                              FOVAngle;                                         		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              DesiredFOV;                                       		// 0x0728 (0x0004) [0x0000000000000000]              
	float                                              DefaultFOV;                                       		// 0x072C (0x0004) [0x0000000000000000]              
	float                                              LODDistanceFactor;                                		// 0x0730 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              TargetEyeHeight;                                  		// 0x0734 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              CurrentTimeStamp;                                 		// 0x0738 (0x0004) [0x0000000000000000]              
	float                                              LastUpdateTime;                                   		// 0x073C (0x0004) [0x0000000000000000]              
	float                                              ServerTimeStamp;                                  		// 0x0740 (0x0004) [0x0000000000000000]              
	float                                              TimeMargin;                                       		// 0x0744 (0x0004) [0x0000000000000000]              
	float                                              ClientUpdateTime;                                 		// 0x0748 (0x0004) [0x0000000000000000]              
	float                                              MaxTimeMargin;                                    		// 0x074C (0x0004) [0x0000000000000000]              
	float                                              LastActiveTime;                                   		// 0x0750 (0x0004) [0x0000000000000000]              
	int                                                ClientCap;                                        		// 0x0754 (0x0004) [0x0000000000000000]              
	float                                              LastPingUpdate;                                   		// 0x0758 (0x0004) [0x0000000000000000]              
	float                                              LastSpeedHackLog;                                 		// 0x075C (0x0004) [0x0000000000000000]              
	int                                                GroundPitch;                                      		// 0x0760 (0x0004) [0x0000000000000000]              
	float                                              InteractDistance;                                 		// 0x0764 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              LastBroadcastTime;                                		// 0x0768 (0x0004) [0x0000000000000000]              
	float                                              SpectatorCameraSpeed;                             		// 0x076C (0x0004) [0x0000000000000000]              
	float                                              MinRespawnDelay;                                  		// 0x0770 (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentHearSounds;                          		// 0x0774 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              LastSpectatorStateSynchTime;                      		// 0x0778 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFrozen : 1;                                      		// 0x077C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x077C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x077C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bUpdatePosition : 1;                              		// 0x077C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bUpdating : 1;                                    		// 0x077C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNeverSwitchOnPickup : 1;                         		// 0x077C (0x0004) [0x0000000000044000] [0x00000020] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheatFlying : 1;                                 		// 0x077C (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCameraPositionLocked : 1;                        		// 0x077C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNoTextToSpeechVoiceMessages : 1;                 		// 0x077C (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bTextToSpeechTeamMessagesOnly : 1;                		// 0x077C (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShortConnectTimeOut : 1;                         		// 0x077C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bPendingDestroy : 1;                              		// 0x077C (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bWasSpeedHack : 1;                                		// 0x077C (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bWasSaturated : 1;                                		// 0x077C (0x0004) [0x0000000000000002] [0x00002000] ( CPF_Const )
	unsigned long                                      bAimingHelp : 1;                                  		// 0x077C (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bClientSimulatingViewTarget : 1;                  		// 0x077C (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                  		// 0x077C (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCinematicMode : 1;                               		// 0x077C (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bCinemaDisableInputMove : 1;                      		// 0x077C (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bCinemaDisableInputLook : 1;                      		// 0x077C (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bIgnoreNetworkMessages : 1;                       		// 0x077C (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bReplicateAllPawns : 1;                           		// 0x077C (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bIsUsingStreamingVolumes : 1;                     		// 0x077C (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bIsExternalUIOpen : 1;                            		// 0x077C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bIsControllerConnected : 1;                       		// 0x077C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bCheckSoundOcclusion : 1;                         		// 0x077C (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bLogHearSoundOverflow : 1;                        		// 0x077C (0x0004) [0x0000000000044000] [0x04000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                		// 0x077C (0x0004) [0x0000000000044000] [0x08000000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDebugClientAdjustPosition : 1;                   		// 0x077C (0x0004) [0x0000000000000001] [0x10000000] ( CPF_Edit )
	unsigned char                                      DoubleClickDir;                                   		// 0x0780 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreMoveInput;                                 		// 0x0781 (0x0001) [0x0000000000000000]              
	unsigned char                                      bIgnoreLookInput;                                 		// 0x0782 (0x0001) [0x0000000000000000]              
	unsigned char                                      bRun;                                             		// 0x0783 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bDuck;                                            		// 0x0784 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      NetPlayerIndex;                                   		// 0x0785 (0x0001) [0x0000000000200002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogOutBugItAIGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void LogOutBugItGoToLogFile ( struct FString InScreenShotDesc, struct FString InGoString, struct FString InLocString );
	void DisableDebugAI ( );
	void DumpOnlineSessionState ( );
	void DebugLogPRIs ( );
	void BugItStringCreator ( struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString );
	void BugItAI ( struct FString ScreenShotDescription );
	void LogLoc ( );
	void BugIt ( struct FString ScreenShotDescription );
	void BugItWorker ( struct FVector TheLocation, struct FRotator TheRotation );
	void BugItGoString ( struct FString TheLocation, struct FString TheRotation );
	void BugItGo ( float X, float Y, float Z, int Pitch, int Yaw, int Roll );
	void OnSetSoundMode ( class USeqAct_SetSoundMode* Action );
	void eventClientSpawnCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void eventClientStopCameraAnim ( class UCameraAnim* AnimToStop );
	void eventClientPlayCameraAnim ( class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, unsigned char Space, struct FRotator CustomPlaySpace );
	void OnCameraShake ( class USeqAct_CameraShake* inAction );
	void ClientStopCameraShake ( class UCameraShake* Shake );
	void ClientPlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned long bTryForceFeedback, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void DoForceFeedbackForScreenShake ( class UCameraShake* ShakeData, float ShakeScale );
	void InputMatchDelegate ( );
	void Sentinel_PostAcquireTravelTheWorldPoints ( );
	void Sentinel_PreAcquireTravelTheWorldPoints ( );
	void Sentinel_SetupForGamebasedTravelTheWorld ( );
	void OnFlyThroughHasEnded ( class USeqAct_FlyThroughHasEnded* inAction );
	bool eventGetAchievementProgression ( int AchievementId, float* CurrentValue, float* MaxValue );
	struct FString GetPartyGameTypeName ( );
	struct FString GetPartyMapName ( );
	bool IsPartyLeader ( );
	void eventClientPrestreamTextures ( class AActor* ForcedActor, float ForceDuration, unsigned long bEnableStreaming, int CinematicTextureGroups );
	void eventClientSetForceMipLevelsToBeResident ( class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups );
	void ClientControlMovieTexture ( class UTextureMovie* MovieTexture, unsigned char mode );
	int GetSplitscreenPlayerCount ( );
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex ( int PlayerIndex );
	bool HasSplitscreenPlayer ( class APlayerReplicationInfo* PRI );
	bool IsSplitscreenPlayer ( int* out_SplitscreenPlayerIndex );
	bool IsPrimaryPlayer ( );
	void ClientReturnToParty ( struct FUniqueNetId RequestingPlayerId );
	void OnJoinTravelToSessionComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientTravelToSession ( struct FName SessionName, class UClass* SearchClass, unsigned char* PlatformSpecificInfo );
	void PathClear ( );
	void PathChild ( int Cnt );
	void PathStep ( int Cnt );
	void eventSoakPause ( class APawn* P );
	void IncrementNumberOfMatchesPlayed ( );
	bool CanViewUserCreatedContent ( );
	void ClientEndOnlineGame ( );
	void ClientStartOnlineGame ( );
	void ServerRegisterClientStatGuid ( struct FString StatGuid );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	void ClientRegisterHostStatGuid ( struct FString StatGuid );
	void eventRemoveAllDebugStrings ( );
	void eventRemoveDebugText ( class AActor* SrcActor );
	void eventAddDebugText ( struct FString DebugText, class AActor* SrcActor, float Duration, struct FVector Offset, struct FVector DesiredOffset, struct FColor TextColor, unsigned long bSkipOverwriteCheck, unsigned long bAbsoluteLocation );
	void DrawDebugTextList ( class UCanvas* Canvas, float RenderDelta );
	void SendToConsole ( struct FString Command );
	void ConsoleKey ( struct FName Key );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void ClientStartNetworkedVoice ( );
	void ClientStopNetworkedVoice ( );
	void ClientSetHostUniqueId ( struct FUniqueNetId InHostId );
	void ClientWriteLeaderboardStats ( class UClass* OnlineStatsWriteClass );
	void ClientWriteOnlinePlayerScores ( int LeaderboardId );
	void ClientArbitratedMatchEnded ( );
	void NotifyNotEnoughSpaceInInvite ( );
	void NotifyNotAllPlayersCanJoinInvite ( );
	void NotifyInviteFailed ( );
	void OnInviteJoinComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnDestroyForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void OnEndForInviteComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClearInviteDelegates ( );
	bool CanAllPlayersPlayOnline ( );
	bool InviteHasEnoughSpace ( class UOnlineGameSettings* InviteSettings );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	void ServerRegisteredForArbitration ( unsigned long bWasSuccessful );
	void OnArbitrationRegisterComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	void ClientRegisterForArbitration ( );
	void eventClientWasKicked ( );
	bool IsShowingSubtitles ( );
	void SetShowSubtitles ( unsigned long bValue );
	void eventNotifyDirectorControl ( unsigned long bNowControlling );
	void eventServerUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventServerMutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void GameplayMutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientUnmutePlayer ( struct FUniqueNetId PlayerNetId );
	void eventClientMutePlayer ( struct FUniqueNetId PlayerNetId );
	void ClientVoiceHandshakeComplete ( );
	class APlayerController* GetPlayerControllerFromNetId ( struct FUniqueNetId PlayerNetId );
	void ClientSetOnlineStatus ( );
	void SeamlessTravelFrom ( class APlayerController* OldPC );
	void SeamlessTravelTo ( class APlayerController* NewPC );
	void eventGetSeamlessTravelActorList ( unsigned long bToEntry, struct TArray<class AActor*>* ActorList );
	bool IsPlayerMuted ( struct FUniqueNetId* Sender );
	class UUIInteraction* GetUIController ( );
	void SaveActorConfig ( struct FName actorName );
	void SaveClassConfig ( struct FString className );
	void eventClientSetBlockOnAsyncLoading ( );
	void eventClientFlushLevelStreaming ( );
	void eventClientCancelPendingMapChange ( );
	void eventClientCommitMapChange ( );
	void DelayedPrepareMapChange ( );
	void eventClientPrepareMapChange ( struct FName LevelName, unsigned long bFirst, unsigned long bLast );
	void eventServerUpdateLevelVisibility ( struct FName PackageName, unsigned long bIsVisible );
	void ClientUpdateLevelStreamingStatus ( struct FName PackageName, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventLevelStreamingStatusChanged ( class ULevelStreaming* LevelObject, unsigned long bNewShouldBeLoaded, unsigned long bNewShouldBeVisible, unsigned long bNewShouldBlockOnLoad );
	void eventClientForceGarbageCollection ( );
	void OnConsoleCommand ( class USeqAct_ConsoleCommand* inAction );
	void ResetPlayerMovementInput ( );
	bool eventIsLookInputIgnored ( );
	void IgnoreLookInput ( unsigned long bNewLookInput );
	bool eventIsMoveInputIgnored ( );
	void IgnoreMoveInput ( unsigned long bNewMoveInput );
	void ClientSetCinematicMode ( unsigned long bInCinematicMode, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsHUD );
	void SetCinematicMode ( unsigned long bInCinematicMode, unsigned long bHidePlayer, unsigned long bAffectsHUD, unsigned long bAffectsMovement, unsigned long bAffectsTurning, unsigned long bAffectsButtons, class USeqAct_ToggleCinematicMode* SFXAction );
	void OnToggleCinematicMode ( class USeqAct_ToggleCinematicMode* Action );
	bool IsForceFeedbackAllowed ( );
	void eventClientStopForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void eventClientPlayForceFeedbackWaveform ( class UForceFeedbackWaveform* FFWaveform );
	void eventPlayRumble ( class UAnimNotify_Rumble* TheAnimNotify );
	void OnForceFeedback ( class USeqAct_ForceFeedback* Action );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void ShowGameState ( );
	void ShowPlayerState ( );
	void ListCE ( );
	void ListConsoleEvents ( );
	void CE ( struct FName EventName );
	void CauseEvent ( struct FName EventName );
	void ServerCauseEvent ( struct FName EventName );
	void OnToggleHUD ( class USeqAct_ToggleHUD* inAction );
	void OnSetCameraTarget ( class USeqAct_SetCameraTarget* inAction );
	void ClientClearKismetText ( struct FVector2D MessageOffset );
	void ClientDrawKismetText ( struct FKismetDrawTextInfo DrawTextInfo, float DisplayTime );
	void OnDrawText ( class USeqAct_DrawText* inAction );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClientIgnoreLookInput ( unsigned long bIgnore );
	void ClientIgnoreMoveInput ( unsigned long bIgnore );
	void OnToggleInput ( class USeqAct_ToggleInput* inAction );
	void DrawHUD ( class AHUD* H );
	bool CanRestartPlayer ( );
	void ServerViewSelf ( struct FViewTargetTransitionParams TransitionParams );
	void ViewAPlayer ( int Dir );
	void ServerViewPrevPlayer ( );
	void ServerViewNextPlayer ( );
	void ServerSetSpectatorLocation ( struct FVector NewLoc );
	bool IsSpectating ( );
	void CheckJumpOrDuck ( );
	void ClearDoubleClick ( );
	struct FRotator eventLimitViewRotation ( struct FRotator ViewRotation, float ViewPitchMin, float ViewPitchMax );
	void ProcessViewRotation ( float DeltaTime, struct FRotator DeltaRot, struct FRotator* out_ViewRotation );
	void UpdateRotation ( float DeltaTime );
	void ViewShake ( float DeltaTime );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	void eventSpawnPlayerCamera ( );
	void ServerVerifyViewTarget ( );
	class AActor* GetViewTarget ( );
	void eventClientSetViewTarget ( class AActor* A, struct FViewTargetTransitionParams TransitionParams );
	void SetViewTargetWithBlend ( class AActor* NewViewTarget, float BlendTime, unsigned char BlendFunc, float BlendExp );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	bool IsLocalPlayerController ( );
	float eventGetFOVAngle ( );
	void AdjustFOV ( float DeltaTime );
	bool eventNotifyLanded ( struct FVector HitNormal, class AActor* FloorActor );
	float AimHelpDot ( unsigned long bInstantHit );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	void eventCameraLookAtFinished ( class USeqAct_CameraLookAt* Action );
	bool AimingHelp ( unsigned long bInstantHit );
	void PlayerMove ( float DeltaTime );
	void eventPlayerTick ( float DeltaTime );
	void NotifyChangedWeapon ( class AWeapon* PreviousWeapon, class AWeapon* NewWeapon );
	void ClientGameEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void GameHasEnded ( class AActor* EndGameFocus, unsigned long bIsWinner );
	void ClientRestart ( class APawn* NewPawn );
	void EnterStartState ( );
	void ForceSingleNetUpdateFor ( class AActor* Target );
	bool HasClientLoadedCurrentWorld ( );
	void eventNotifyLoadedWorld ( struct FName WorldPackageName, unsigned long bFinalDest );
	void eventServerNotifyLoadedWorld ( struct FName WorldPackageName );
	void Restart ( unsigned long bVehicleTransition );
	void eventClientSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	void SwitchLevel ( struct FString URL );
	void ServerChangeTeam ( int N );
	void ChangeTeam ( struct FString TeamName );
	void SwitchTeam ( );
	void ServerChangeName ( struct FString S );
	void SetName ( struct FString S );
	void ServerSuicide ( );
	void Suicide ( );
	bool TriggerInteracted ( );
	bool FindVehicleToDrive ( );
	bool PerformedUseAction ( );
	void ServerUse ( );
	void Use ( );
	void GetTriggerUseList ( float interactDistanceToCheck, float crosshairDist, float minDot, unsigned long bUsuableOnly, struct TArray<class ATrigger*>* out_useList );
	void StopAltFire ( unsigned char FireModeNum );
	void StartAltFire ( unsigned char FireModeNum );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	void NextWeapon ( );
	void PrevWeapon ( );
	void ServerThrowWeapon ( );
	void ThrowWeapon ( );
	void UTrace ( );
	void ServerUTrace ( );
	void eventConditionalPause ( unsigned long bDesiredPauseState );
	void ShowMenu ( );
	void ServerPause ( );
	void Pause ( );
	bool IsPaused ( );
	bool SetPause ( unsigned long bPause, struct FScriptDelegate CanUnpauseDelegate );
	bool CanUnpause ( );
	void PauseRumbleForAllPlayers ( unsigned long bShouldPauseRumble );
	void QuickLoad ( );
	void QuickSave ( );
	void LocalTravel ( struct FString URL );
	void RestartLevel ( );
	void ServerSpeech ( struct FName Type, int Index, struct FString Callsign );
	void Speech ( struct FName Type, int Index, struct FString Callsign );
	void ServerRestartGame ( );
	void eventHandleWalking ( );
	void CallServerMove ( class USavedMove* NewMove, struct FVector ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove );
	void ReplicateMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	void MoveLog ( struct FName FunctionName, struct FString Message, float TimeStamp, struct FVector NewLoc, struct FVector NewVel );
	int CompressAccel ( int C );
	class USavedMove* GetFreeMove ( );
	void ClientUpdatePosition ( );
	void ClearAckedMoves ( );
	void ServerUpdatePing ( int NewPing );
	void UpdateStateFromAdjustment ( struct FName NewState );
	void LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );
	void UpdatePing ( float TimeStamp );
	void ServerSetNetSpeed ( int NewSpeed );
	void ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );
	void ClientAckGoodMove ( float TimeStamp );
	void ClientCapBandwidth ( int Cap );
	void ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );
	void MoveAutonomous ( float DeltaTime, unsigned char CompressedFlags, struct FVector newAccel, struct FRotator DeltaRot );
	void eventProcessMove ( float DeltaTime, struct FVector newAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );
	void ProcessDrive ( float InForward, float InStrafe, float InUp, unsigned long InJump );
	void ServerDrive ( float InForward, float InStrafe, float aUp, unsigned long InJump, int View );
	void eventSendClientAdjustment ( );
	void ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View );
	void OldServerMove ( float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags );
	void DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View );
	void ForceDeathUpdate ( );
	void ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char messageId );
	bool UsingFirstPersonCamera ( );
	void eventClientSetCameraFade ( unsigned long bEnableFading, struct FColor FadeColor, struct FVector2D FadeAlpha, float FadeTime );
	void eventResetCameraMode ( );
	void SetCameraMode ( struct FName NewCamMode );
	void ClientSetCameraMode ( struct FName NewCamMode );
	void ServerCamera ( struct FName NewMode );
	void Camera ( struct FName NewMode );
	void eventPreClientTravel ( struct FString PendingURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	void ServerTeamSay ( struct FString Msg );
	void TeamSay ( struct FString Msg );
	void ClientAdminMessage ( struct FString Msg );
	void ServerSay ( struct FString Msg );
	void Say ( struct FString Msg );
	bool AllowTextMessage ( struct FString Msg );
	void ServerMutate ( struct FString MutateString );
	void Mutate ( struct FString MutateString );
	void FOV ( float F );
	void ResetFOV ( );
	void SetFOV ( float NewFOV );
	void FixFOV ( );
	void eventDestroyed ( );
	void CleanupPawn ( );
	void eventClearOnlineDelegates ( );
	void RegisterOnlineDelegates ( );
	void PlayBeepSound ( );
	bool IsFinalReleaseBuild ( );
	void eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type, float MsgLifeTime );
	void SpeakTTS ( struct FString S, class APlayerReplicationInfo* PRI );
	void TeamTalk ( );
	void Talk ( );
	class USoundCue* CreateTTSSoundCue ( struct FString StrToSpeak, class APlayerReplicationInfo* PRI );
	bool AllowTTSMessageFrom ( class APlayerReplicationInfo* PRI );
	bool CanCommunicate ( );
	void eventClientMessage ( struct FString S, struct FName Type, float MsgLifeTime );
	void ClientPlayActorFaceFXAnim ( class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventKismet_ClientStopSound ( class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime );
	void eventKismet_ClientPlaySound ( class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, unsigned long bSuppressSubtitles, unsigned long bSuppressSpatialization );
	bool IsClosestLocalPlayerToActor ( class AActor* TheActor );
	void eventClientHearSound ( class USoundCue* ASound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	void eventWwiseClientStopSound ( class UWwiseBaseSoundObject* Sound, class AActor* SourceActor );
	void eventWwiseClientHearSound ( class UWwiseBaseSoundObject* Sound, class AActor* SourceActor, struct FVector SourceLocation, unsigned long bStopWhenOwnerDestroyed, unsigned long bIsOccluded );
	class UAudioComponent* GetPooledAudioComponent ( class USoundCue* ASound, class AActor* SourceActor, unsigned long bStopWhenOwnerDestroyed, unsigned long bUseLocation, struct FVector SourceLocation );
	void HearSoundFinished ( class UAudioComponent* AC );
	void eventClientPlaySound ( class USoundCue* ASound );
	void eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void CleanupPRI ( );
	void HandlePickup ( class AInventory* Inv );
	void ClientSetHUD ( class UClass* newHUDType, class UClass* newScoringType );
	void PawnDied ( class APawn* P );
	void eventUnPossess ( );
	void ServerAcknowledgePossession ( class APawn* P );
	void AcknowledgePossession ( class APawn* P );
	void eventPossess ( class APawn* aPawn, unsigned long bVehicleTransition );
	void eventGivePawn ( class APawn* NewPawn );
	void AskForPawn ( );
	void ClientGotoState ( struct FName NewState, struct FName NewLabel );
	bool IsMouseAvailable ( );
	bool IsKeyboardAvailable ( );
	void SetUseTiltForwardAndBack ( unsigned long bActive );
	void SetOnlyUseControllerTiltInput ( unsigned long bActive );
	void SetControllerTiltActive ( unsigned long bActive );
	void SetControllerTiltDesiredIfAvailable ( unsigned long bActive );
	bool IsControllerTiltActive ( );
	float GetRumbleScale ( );
	void SetRumbleScale ( float ScaleBy );
	void ReloadProfileSettings ( );
	void SetPlayerDataProvider ( class UPlayerDataProvider* DataProvider );
	void UnregisterStandardPlayerDataStores ( );
	void UnregisterPlayerDataStores ( );
	void RegisterStandardPlayerDataStores ( );
	void RegisterCustomPlayerDataStores ( );
	void RegisterPlayerDataStores ( );
	void ClientInitializeDataStores ( );
	void eventInitInputSystem ( );
	class UOnlineSubsystem* GetOnlineSubsystem ( );
	void PostControllerIdChange ( );
	void PreControllerIdChange ( );
	void CleanOutSavedMoves ( );
	void ClientReset ( );
	void Reset ( );
	void SpawnDefaultHUD ( );
	void EnableCheats ( );
	void AddCheats ( );
	void eventKickWarning ( );
	void ServerGivePawn ( );
	void ServerShortTimeout ( );
	void eventResetTimeMargin ( );
	void eventPreRender ( class UCanvas* Canvas );
	void eventReceivedPlayer ( );
	void eventPostBeginPlay ( );
	class ACoverReplicator* SpawnCoverReplicator ( );
	bool CanUnpauseControllerConnected ( );
	void OnControllerChanged ( int ControllerId, unsigned long bIsConnected );
	bool CanUnpauseExternalUI ( );
	void OnExternalUIChanged ( unsigned long bIsOpening );
	void ForceClearUnpauseDelegates ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void CleanUpAudioComponents ( );
	int FindStairRotation ( float DeltaTime );
	bool CheckSpeedHack ( float DeltaTime );
	void eventServerProcessConvolve ( struct FString C, int H );
	void eventClientConvolve ( struct FString C, int H );
	void SetAudioGroupVolume ( struct FName GroupName, float Volume );
	void SetAllowMatureLanguage ( unsigned long bAllowMatureLanguge );
	struct FString PasteFromClipboard ( );
	void CopyToClipboard ( struct FString Text );
	struct FString GetDefaultURL ( struct FString Option );
	void UpdateURL ( struct FString NewOption, struct FString NewValue, unsigned long bSave1Default );
	void eventClientTravel ( struct FString URL, unsigned char TravelType, unsigned long bSeamless, struct FGuid MapPackageGuid );
	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	struct FString GetServerNetworkAddress ( );
	struct FString GetPlayerNetworkAddress ( );
	void SetNetSpeed ( int NewSpeed );
	void ClientDrawCoordinateSystem ( struct FVector AxisLoc, struct FRotator AxisRot, float Scale, unsigned long bPersistentLines );
};

// Class Engine.CheatManager
// 0x0010 (0x0070 - 0x0060)
class UCheatManager : public UObject
{
public:
	class UClass*                                      DebugCameraControllerClass;                       		// 0x0060 (0x0008) [0x0000000000000000]              
	class ADebugCameraController*                      DebugCameraControllerRef;                         		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NavMeshVerification ( float Interval );
	void VerifyNavMeshObjects ( );
	void LogParticleActivateSystemCalls ( unsigned long bShouldLog );
	void LogPlaySoundCalls ( unsigned long bShouldLog );
	void InitCheatManager ( );
	void VerbosePathDebug ( );
	void TestNavMeshPath ( unsigned long bDrawPath );
	void SetOnlineDebugLevel ( int DebugLevel );
	void DumpVoiceMutingState ( );
	void DumpOnlineSessionState ( );
	void TestLevel ( );
	void EnableDebugCamera ( );
	void ToggleDebugCamera ( );
	void SetMass ( float F );
	void AllWeapons ( );
	void Loaded ( );
	void ViewClass ( class UClass* aClass );
	void ViewBot ( );
	void ViewFlag ( );
	void ViewActor ( struct FName actorName );
	void ViewPlayer ( struct FString S );
	void ViewSelf ( unsigned long bQuiet );
	void RememberSpot ( );
	void FractureAllMeshesToMaximizeMemoryUsage ( );
	void FractureAllMeshes ( );
	void DestroyFractures ( float Radius );
	void PlayersOnly ( );
	class AWeapon* GiveWeapon ( struct FString WeaponClassStr );
	void Summon ( struct FString className );
	void Avatar ( struct FName className );
	void KillPawns ( );
	void KillAllPawns ( class UClass* aClass );
	void KillAll ( class UClass* aClass );
	void SetSpeed ( float F );
	void SetGravity ( float F );
	void SetJumpZ ( float F );
	void Slomo ( float T );
	void AffectedByHitEffects ( );
	void God ( );
	void AllAmmo ( );
	void Ghost ( );
	void Walk ( );
	void Fly ( );
	void Amphibious ( );
	void EndPath ( );
	void ChangeSize ( float F );
	void Teleport ( );
	void KillViewedActor ( );
	void WriteToLog ( struct FString Param );
	void FreezeFrame ( float Delay );
	void ListDynamicActors ( );
	void DebugPause ( );
	void DebugAI ( struct FName Category );
	void SetLevelStreamingStatus(struct FName PackageName, unsigned long bShouldBeLoaded, unsigned long bShouldBeVisible);
	void StreamLevelOut(struct FName PackageName);
	void StreamLevelIn(struct FName PackageName);
	void OnlyLoadLevel(struct FName PackageName);
};

// Class Engine.Client
// 0x001C (0x007C - 0x0060)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0060 (0x0008) MISSED OFFSET
	float                                              MinDesiredFrameRate;                              		// 0x0068 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              DisplayGamma;                                     		// 0x006C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialButtonRepeatDelay;                         		// 0x0070 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ButtonRepeatDelay;                                		// 0x0074 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x0078 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ClipPadEntry
// 0x0020 (0x0080 - 0x0060)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Text;                                             		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CodecMovie
// 0x0004 (0x0064 - 0x0060)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                 		// 0x0060 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CodecMovieBink
// 0x0038 (0x009C - 0x0064)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[ 0x38 ];                            		// 0x0064 (0x0038) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CodecMovieFallback
// 0x0004 (0x0068 - 0x0064)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                      		// 0x0064 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CurveEdPresetCurve
// 0x0020 (0x0080 - 0x0060)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                        		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<struct FPresetGeneratedPoint>        Points;                                           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool RetrieveFloatCurvePoints ( int CurveIndex, class UDistributionFloat* Distribution );
};

// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x0060 - 0x0060)
class UCustomPropertyItemHandler : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DamageType
// 0x0060 (0x00C0 - 0x0060)
class UDamageType : public UObject
{
public:
	struct FString                                     DeathString;                                      		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FemaleSuicide;                                    		// 0x0070 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaleSuicide;                                      		// 0x0080 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                		// 0x0090 (0x0008) [0x0000000000000000]              
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                 		// 0x0098 (0x0008) [0x0000000000000000]              
	float                                              KDamageImpulse;                                   		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathVel;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KDeathUpKick;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadialDamageImpulse;                              		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VehicleDamageScaling;                             		// 0x00B0 (0x0004) [0x0000000000000000]              
	float                                              VehicleMomentumScaling;                           		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              FracturedMeshDamage;                              		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bArmorStops : 1;                                  		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysGibs : 1;                                  		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeverGibs : 1;                                   		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLocationalHit : 1;                               		// 0x00BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCausesBlood : 1;                                 		// 0x00BC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bCausedByWorld : 1;                               		// 0x00BC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bExtraMomentumZ : 1;                              		// 0x00BC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bCausesFracture : 1;                              		// 0x00BC (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIgnoreDriverDamageMult : 1;                      		// 0x00BC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bRadialDamageVelChange : 1;                       		// 0x00BC (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float VehicleDamageScalingFor ( class AVehicle* V );
	struct FString SuicideMessage ( class APlayerReplicationInfo* Victim );
	struct FString DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );
};

// Class Engine.KillZDamageType
// 0x0000 (0x00C0 - 0x00C0)
class UKillZDamageType : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DebugManager
// 0x0004 (0x0064 - 0x0060)
class UDebugManager : public UObject
{
public:
	int                                                FirstColoredMip;                                  		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionFloatConstant
// 0x0004 (0x0080 - 0x007C)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                         		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x0099 - 0x0080)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                    		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinInput;                                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxInput;                                         		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOutput;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOutput;                                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamMode;                                        		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionFloatConstantCurve
// 0x0014 (0x0090 - 0x007C)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionFloatUniform
// 0x0010 (0x008C - 0x007C)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                              		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FCachedValue                                fCachedValue;                                     		// 0x0084 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bConsistentValue : 1;                             		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionFloatUniformCurve
// 0x0014 (0x0090 - 0x007C)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorConstant
// 0x0011 (0x008D - 0x007C)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                         		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorParameterBase
// 0x003E (0x00CB - 0x008D)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	struct FVector                                     MinInput;                                         		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxInput;                                         		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinOutput;                                        		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxOutput;                                        		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParameterName;                                    		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParamModes[ 0x3 ];                                		// 0x00C8 (0x0003) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorConstantCurve
// 0x0019 (0x0095 - 0x007C)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      LockedAxes;                                       		// 0x0094 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorUniform
// 0x0020 (0x009C - 0x007C)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                              		// 0x007C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Min;                                              		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockAxes : 1;                                    		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0098 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LockedAxes;                                       		// 0x009B (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorUniformCurve
// 0x001D (0x0099 - 0x007C)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                    		// 0x007C (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bLockAxes1 : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLockAxes2 : 1;                                   		// 0x0090 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseExtremes : 1;                                 		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      MirrorFlags[ 0x3 ];                               		// 0x0094 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LockedAxes[ 0x2 ];                                		// 0x0097 (0x0002) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Download
// 0x0A44 (0x0AA4 - 0x0060)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xA44 ];                           		// 0x0060 (0x0A44) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ChannelDownload
// 0x0008 (0x0AAC - 0x0AA4)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0AA4 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.EdCoordSystem
// 0x0050 (0x00B0 - 0x0060)
class UEdCoordSystem : public UObject
{
public:
	struct FMatrix                                     M;                                                		// 0x0060 (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     Desc;                                             		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.EditorLinkSelectionInterface
// 0x0000 (0x0060 - 0x0060)
class UEditorLinkSelectionInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.EngineTypes
// 0x0000 (0x0060 - 0x0060)
class UEngineTypes : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FaceFXAnimSet
// 0x0040 (0x00A0 - 0x0060)
class UFaceFXAnimSet : public UObject
{
public:
	struct TArray<unsigned char>                       RawFaceFXAnimSetBytes;                            		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<unsigned char>                       RawFaceFXMiniSessionBytes;                        		// 0x0070 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UWwiseBaseSoundObject*>        ReferencedSoundCues;                              		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    InternalFaceFXAnimSet;                            		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumLoadErrors;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bBioSoundCuesFixedUp : 1;                       		// 0x009C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bLocalizationDisabled : 1;                        		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FaceFXAsset
// 0x004C (0x00AC - 0x0060)
class UFaceFXAsset : public UObject
{
public:
	struct TArray<unsigned char>                       RawFaceFXActorBytes;                              		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<unsigned char>                       RawFaceFXSessionBytes;                            		// 0x0070 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UFaceFXAnimSet*>               MountedFaceFXAnimSets;                            		// 0x0080 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UWwiseBaseSoundObject*>        ReferencedSoundCues;                              		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    FaceFXActor;                                      		// 0x00A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                NumLoadErrors;                                    		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UnmountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
	void MountFaceFXAnimSet ( class UFaceFXAnimSet* AnimSet );
};

// Class Engine.Font
// 0x0118 (0x0178 - 0x0060)
class UFont : public UObject
{
public:
	struct FFontImportOptionsData                      ImportOptions;                                    		// 0x0060 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FFontCharacter>               Characters;                                       		// 0x00F4 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UTexture2D*>                   Textures;                                         		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 MaxCharHeight;                                    		// 0x0114 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0124 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                       		// 0x016C (0x0004) [0x0000000000000000]              
	int                                                Kerning;                                          		// 0x0170 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumCharacters;                                    		// 0x0174 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMaxCharHeight ( );
	float GetAuthoredViewportHeight ( float ViewportHeight );
	float GetScalingFactor ( float HeightTest );
	int GetResolutionPageIndex ( float HeightTest );
};

// Class Engine.MultiFont
// 0x0010 (0x0188 - 0x0178)
class UMultiFont : public UFont
{
public:
	struct TArray<float>                               ResolutionTestTable;                              		// 0x0178 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetResolutionTestTableIndex ( float HeightTest );
};

// Class Engine.FontImportOptions
// 0x0094 (0x00F4 - 0x0060)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                             		// 0x0060 (0x0094) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ForceFeedbackManager
// 0x0018 (0x0078 - 0x0060)
class UForceFeedbackManager : public UObject
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                CurrentSample;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              ElapsedTime;                                      		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              ScaleAllWaveformsBy;                              		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAllowsForceFeedback : 1;                         		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsPaused : 1;                                    		// 0x0074 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PauseWaveform ( unsigned long bPause );
	void StopForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm );
	void PlayForceFeedbackWaveform ( class UForceFeedbackWaveform* WaveForm );
};

// Class Engine.ForceFeedbackWaveform
// 0x0014 (0x0074 - 0x0060)
class UForceFeedbackWaveform : public UObject
{
public:
	struct TArray<struct FWaveformSample>              Samples;                                          		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bIsLooping : 1;                                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.GameplayEvents
// 0x0134 (0x0194 - 0x0060)
class UGameplayEvents : public UObject
{
public:
	struct FGameSessionInformation                     CurrentSessionInfo;                               		// 0x0060 (0x0074) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StatsFileName;                                    		// 0x00D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FPlayerInformationNew>        PlayerList;                                       		// 0x00E4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FTeamInformation>             TeamList;                                         		// 0x00F4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FGameplayEventMetaData>       SupportedEvents;                                  		// 0x0104 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FWeaponClassEventData>        WeaponClassArray;                                 		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDamageClassEventData>        DamageClassArray;                                 		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FProjectileClassEventData>    ProjectileClassArray;                             		// 0x0134 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FPawnClassEventData>          PawnClassArray;                                   		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      ActorArray;                                       		// 0x0154 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      SoundCueArray;                                    		// 0x0164 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    Archive;                                          		// 0x0174 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FGameplayEventsHeader                       Header;                                           		// 0x017C (0x0018) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetFilename ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};

// Class Engine.GameplayEventsReader
// 0x0010 (0x01A4 - 0x0194)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	struct TArray<int>                                 EventIDFilter;                                    		// 0x0194 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetSessionDuration ( );
	float GetSessionEnd ( );
	float GetSessionStart ( );
	struct FString GetSessionTimestamp ( );
	int GetPlatform ( );
	int GetTitleID ( );
	struct FString GetSessionID ( );
	bool eventIsEventFiltered ( int EventId );
	void RemoveFilter ( int EventId );
	void AddFilter ( int EventId );
	void ProcessStream ( );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
};

// Class Engine.GameplayEventsWriter
// 0x0008 (0x019C - 0x0194)
class UGameplayEventsWriter : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                             		// 0x0194 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogSystemPollEvents ( );
	void LogProjectileIntEvent ( int EventId, class AController* Player, class UClass* Proj, int Value );
	void LogDamageEvent ( int EventId, class AController* Player, class UClass* dmgType, class AController* Target, int Amount );
	void LogWeaponIntEvent ( int EventId, class AController* Player, class UClass* WeaponClass, int Value );
	void LogPlayerPlayerEvent ( int EventId, class AController* Player, class AController* Target );
	void LogPlayerKillDeath ( int EventId, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead );
	void LogAllPlayerPositionsEvent ( int EventId );
	void LogPlayerLoginChange ( int EventId, class AController* Player, struct FString PlayerName, struct FUniqueNetId PlayerID, unsigned long bSplitScreen );
	void LogPlayerSpawnEvent ( int EventId, class AController* Player, class UClass* PawnClass, int TeamID );
	void LogPlayerStringEvent ( int EventId, class AController* Player, struct FString EventString );
	void LogPlayerFloatEvent ( int EventId, class AController* Player, float Value );
	void LogPlayerIntEvent ( int EventId, class AController* Player, int Value );
	void LogTeamIntEvent ( int EventId, class ATeamInfo* Team, int Value );
	void LogGameStringEvent ( int EventId, struct FString Value );
	void LogGameIntEvent ( int EventId, int Value );
	void Poll ( );
	bool SerializeFooter ( );
	bool SerializeHeader ( );
	void CloseStatsFile ( );
	bool OpenStatsFile ( struct FString Filename );
	bool IsSessionInProgress ( );
	void EndLogging ( );
	void StartLogging ( float HeartbeatDelta );
};

// Class Engine.GameViewportClient
// 0x013D (0x019D - 0x0060)
class UGameViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FExec;                                    		// 0x0068 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0070 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ProgressMessage[ 0x2 ];                           		// 0x0078 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UInteraction*>                 GlobalInteractions;                               		// 0x0098 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	struct FString                                     LoadingMessage;                                   		// 0x00A8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavingMessage;                                    		// 0x00B8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ConnectingMessage;                                		// 0x00C8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PausedMessage;                                    		// 0x00D8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PrecachingMessage;                                		// 0x00E8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<struct FSplitscreenData>             SplitscreenInfo;                                  		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FDebugDisplayProperty>        DebugProperties;                                  		// 0x0108 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputKey__Delegate;                       		// 0x0118 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                      		// 0x0128 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __HandleInputChar__Delegate;                      		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    Viewport;                                         		// 0x0148 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ViewportFrame;                                    		// 0x0150 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      UIControllerClass;                                		// 0x0158 (0x0008) [0x0000000000000000]              
	struct FPointer                                    pShowFlags;                                       		// 0x0160 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FTitleSafeZoneArea                          TitleSafeZone;                                    		// 0x0168 (0x0010) [0x0000000000000000]              
	class UUIInteraction*                              UIController;                                     		// 0x0178 (0x0008) [0x0000000000000000]              
	class UConsole*                                    ViewportConsole;                                  		// 0x0180 (0x0008) [0x0000000000000000]              
	float                                              ProgressTimeOut;                                  		// 0x0188 (0x0004) [0x0000000000000000]              
	float                                              ProgressFadeTime;                                 		// 0x018C (0x0004) [0x0000000000000000]              
	float                                              FilmGrain_Scale;                                  		// 0x0190 (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowTitleSafeZone : 1;                           		// 0x0194 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDisplayingUIMouseCursor : 1;                     		// 0x0194 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bUIMouseCaptureOverride : 1;                      		// 0x0194 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x0194 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      EnableNewFilmGrainOverride : 1;                   		// 0x0194 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      EnableNewFilmGrain : 1;                           		// 0x0194 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      FilmGrain_ScaleOverride : 1;                      		// 0x0194 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      EnableRandomFilmGrainOverride : 1;                		// 0x0194 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      EnableRandomFilmGrain : 1;                        		// 0x0194 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned char                                      DesiredSplitscreenType;                           		// 0x0198 (0x0001) [0x0000000000000000]              
	unsigned char                                      ActiveSplitscreenType;                            		// 0x0199 (0x0001) [0x0000000000000000]              
	unsigned char                                      Default2PSplitType;                               		// 0x019A (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      Default3PSplitType;                               		// 0x019B (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CurrentMouseCursor;                               		// 0x019C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void FilmGrainToggleMode ( unsigned long RandomEnable );
	void FilmGrainSetScale ( float Scale );
	void FilmGrainToggleNew ( unsigned long enable );
	void ClearProgressMessages ( );
	void SetProgressTime ( float T );
	void NotifyConnectionError ( struct FString Message, struct FString Title );
	void eventSetProgressMessage ( unsigned char MessageType, struct FString Message, struct FString Title, unsigned long bIgnoreFutureNetworkMessages );
	int RemoveLocalPlayer ( class ULocalPlayer* ExistingPlayer );
	int AddLocalPlayer ( class ULocalPlayer* NewPlayer );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void DrawTransitionMessage ( class UCanvas* Canvas, struct FString Message );
	void DrawTransition ( class UCanvas* Canvas );
	void DisplayProgressMessage ( class UCanvas* Canvas );
	void eventPostRender ( class UCanvas* Canvas );
	void DrawTitleSafeArea ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	void CalculatePixelCenter ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* out_CenterX, float* out_CenterY );
	bool CalculateDeadZoneForAllSides ( class ULocalPlayer* LPlayer, class UCanvas* Canvas, unsigned long bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone );
	float CalculateDeadZone ( class ULocalPlayer* LPlayer, unsigned char SZType, class UCanvas* Canvas, unsigned long bUseMaxPercent );
	void CalculateSafeZoneValues ( class UCanvas* Canvas, int LocalPlayerIndex, unsigned long bUseMaxPercent, float* out_Horizontal, float* out_Vertical );
	void GetPixelSizeOfScreen ( class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height );
	bool HasRightSafeZone ( int LocalPlayerIndex );
	bool HasLeftSafeZone ( int LocalPlayerIndex );
	bool HasBottomSafeZone ( int LocalPlayerIndex );
	bool HasTopSafeZone ( int LocalPlayerIndex );
	int ConvertLocalPlayerToGamePlayerIndex ( class ULocalPlayer* LPlayer );
	void eventGetSubtitleRegion ( struct FVector2D* MinPos, struct FVector2D* MaxPos );
	void eventLayoutPlayers ( );
	void UpdateActiveSplitscreenType ( );
	unsigned char GetSplitscreenConfiguration ( );
	void SetSplitscreenConfiguration ( unsigned char SplitType );
	void eventGameSessionEnded ( );
	int eventInsertInteraction ( class UInteraction* NewInteraction, int InIndex );
	bool CreateInitialPlayer ( struct FString* OutError );
	bool eventInit ( struct FString* OutError );
	void SetConsoleTarget ( int PlayerIndex );
	void ShowTitleSafeArea ( );
	void SetSplit ( int mode );
	void DebugRemovePlayer ( int ControllerId );
	void SSSwapControllers ( );
	void DebugCreatePlayer ( int ControllerId );
	class ULocalPlayer* eventFindPlayerByControllerId ( int ControllerId );
	bool eventRemovePlayer ( class ULocalPlayer* ExPlayer );
	class ULocalPlayer* eventCreatePlayer ( int ControllerId, unsigned long bSpawnActor, struct FString* OutError );
	bool ShouldForceFullscreenViewport ( );
	bool IsFullScreenViewport ( );
	void GetViewportSize ( struct FVector2D* out_ViewportSize );
	struct FString ConsoleCommand ( struct FString Command );
	bool HandleInputChar ( int ControllerId, struct FString Unicode );
	bool HandleInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool HandleInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

// Class Engine.GuidCache
// 0x0058 (0x00B8 - 0x0060)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x58 ];                            		// 0x0060 (0x0058) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Interface_NavigationHandle
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavigationHandle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotifyPathChanged ( );
};

// Class Engine.InterpCurveEdSetup
// 0x0014 (0x0074 - 0x0060)
class UInterpCurveEdSetup : public UObject
{
public:
	struct TArray<struct FCurveEdTab>                  Tabs;                                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                ActiveTab;                                        		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrack
// 0x0030 (0x0090 - 0x0060)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    CurveEdVTable;                                    		// 0x0068 (0x0008) [0x0000000000801000]              ( CPF_Native | CPF_NoExport )
	class UClass*                                      TrackInstClass;                                   		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      ActiveCondition;                                  		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FString                                     TrackTitle;                                       		// 0x007C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bOnePerGroup : 1;                                 		// 0x008C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirGroupOnly : 1;                                		// 0x008C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDisableTrack : 1;                                		// 0x008C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsAnimControlTrack : 1;                          		// 0x008C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bImportedTrack : 1;                               		// 0x008C (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNewTrackSubMenuName ( );
};

// Class Engine.KMeshProps
// 0x0064 (0x00C4 - 0x0060)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                         		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FKAggregateGeom                             AggGeom;                                          		// 0x006C (0x004C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     UmbraBoundsExtension;                             		// 0x00B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelBase
// 0x0070 (0x00D0 - 0x0060)
class ULevelBase : public UObject
{
public:
	struct TArray<AActor*>							   Actors;                                             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x60 ];                            		// 0x0070 (0x0060) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Level
// 0x02D4 (0x03A4 - 0x00D0)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0xC0 ];                            		// 0x00D0 (0x00C0) MISSED OFFSET
	float                                              LightmapTotalSize;                                		// 0x0190 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	float                                              ShadowmapTotalSize;                               		// 0x0194 (0x0004) [0x0000000000020002]              ( CPF_Const | CPF_EditConst )
	unsigned char                                      UnknownData01[ 0x20C ];                           		// 0x0198 (0x020C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PendingLevel
// 0x0044 (0x0114 - 0x00D0)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[ 0x44 ];                            		// 0x00D0 (0x0044) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x0114 - 0x0114)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NetPendingLevel
// 0x0000 (0x0114 - 0x0114)
class UNetPendingLevel : public UPendingLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreaming
// 0x0070 (0x00D0 - 0x0060)
class ULevelStreaming : public UObject
{
public:
	struct TArray<class ALevelStreamingVolume*>        EditorStreamingVolumes;                           		// 0x0060 (0x0010) [0x0000000000420003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FString>                      Keywords;                                         		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     Offset;                                           		// 0x0080 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     OldOffset;                                        		// 0x008C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       PackageName;                                      		// 0x0098 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class ULevel*                                      LoadedLevel;                                      		// 0x00A0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       OwningWorldName;                                  		// 0x00A8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       VirtualChunkName;                                 		// 0x00B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                Priority;                                         		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                Tier;                                             		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      DrawColor;                                        		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MinTimeBetweenVolumeUnloadRequests;               		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastVolumeUnloadRequestTime;                      		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsVisible : 1;                                   		// 0x00CC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCookingErrors : 1;                            		// 0x00CC (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasLoadRequestPending : 1;                       		// 0x00CC (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasUnloadRequestPending : 1;                     		// 0x00CC (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisibleInEditor : 1;                     		// 0x00CC (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bBoundingBoxVisible : 1;                          		// 0x00CC (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bLocked : 1;                                      		// 0x00CC (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bIsFullyStatic : 1;                               		// 0x00CC (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNeedFullReload : 1;                              		// 0x00CC (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldBeLoaded : 1;                              		// 0x00CC (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBeVisible : 1;                             		// 0x00CC (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x00CC (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bDrawOnLevelStatusMap : 1;                        		// 0x00CC (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                		// 0x00CC (0x0004) [0x0000000000002002] [0x00002000] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0004 (0x00D4 - 0x00D0)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	unsigned long                                      bIsProceduralBuildingLODLevel : 1;                		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreamingDistance
// 0x0010 (0x00E0 - 0x00D0)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                           		// 0x00D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreamingKismet
// 0x0000 (0x00D0 - 0x00D0)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LevelStreamingPersistent
// 0x0000 (0x00D0 - 0x00D0)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0078 - 0x0060)
class ULightmappedSurfaceCollection : public UObject
{
public:
	struct TArray<int>                                 Surfaces;                                         		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UModel*                                      SourceModel;                                      		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightmassLevelSettings
// 0x0030 (0x0090 - 0x0060)
class ULightmassLevelSettings : public UObject
{
public:
	int                                                NumIndirectLightingBounces;                       		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      EnvironmentColor;                                 		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EnvironmentIntensity;                             		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmissiveBoost;                                    		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DiffuseBoost;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpecularBoost;                                    		// 0x0074 (0x0004) [0x0000000000000000]              
	float                                              DirectIlluminationOcclusionFraction;              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IndirectIlluminationOcclusionFraction;            		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionExponent;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FullyOccludedSamplesFraction;                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxOcclusionDistance;                             		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseAmbientOcclusion : 1;                         		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bVisualizeAmbientOcclusion : 1;                   		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightmassPrimitiveSettingsObject
// 0x001C (0x007C - 0x0060)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0060 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MapInfo
// 0x0000 (0x0060 - 0x0060)
class UMapInfo : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Surface
// 0x0000 (0x0060 - 0x0060)
class USurface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetSurfaceHeight ( );
	float GetSurfaceWidth ( );
};

// Class Engine.MaterialInterface
// 0x0044 (0x00A4 - 0x0060)
class UMaterialInterface : public USurface
{
public:
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                		// 0x0060 (0x0018) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       m_Guid;                                           		// 0x0078 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightingGuid;                                     		// 0x0088 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UTexture*                                    FlattenedTexture;                                 		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                   		// 0x00A0 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetEffectsMaterialFractionValue ( float* Value );
	bool GetEffectsMaterialNameValue ( struct FName* EffectName );
	void SetForceMipLevelsToBeResident ( unsigned long OverrideForceMiplevelsToBeResident, unsigned long bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups );
	bool GetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* OutValue );
	bool GetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* OutValue );
	bool GetTextureParameterValue ( struct FName ParameterName, class UTexture** OutValue );
	bool GetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* OutValue );
	bool GetScalarParameterValue ( struct FName ParameterName, float* OutValue );
	bool GetFontParameterValue ( struct FName ParameterName, class UFont** OutFontValue, int* OutFontPage );
	class UPhysicalMaterial* GetPhysicalMaterial ( );
	class UMaterial* GetMaterial ( );
};

// Class Engine.Material
// 0x0327 (0x03CB - 0x00A4)
class UMaterial : public UMaterialInterface
{
public:
	struct FPointer                                    MaterialResources[ 0x2 ];                         		// 0x00A4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    DefaultMaterialInstances[ 0x2 ];                  		// 0x00B4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct TArray<class UMaterialExpression*>          Expressions;                                      		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      PhysicalMaterial;                                 		// 0x00D4 (0x0008) [0x0000000000000000]              
	struct FVectorMaterialInput                        Normal;                                           		// 0x00DC (0x0030) [0x0000000000000000]              
	struct FVectorMaterialInput                        AnisotropicDirection;                             		// 0x010C (0x0030) [0x0000000000000000]              
	struct FVectorMaterialInput                        WorldPositionOffset;                              		// 0x013C (0x0030) [0x0000000000000000]              
	struct FVectorMaterialInput                        WrapLightingCoefficients;                         		// 0x016C (0x0030) [0x0000000000000000]              
	struct FVector2MaterialInput                       Distortion;                                       		// 0x019C (0x002C) [0x0000000000000000]              
	struct FColorMaterialInput                         DiffuseColor;                                     		// 0x01C8 (0x0028) [0x0000000000000000]              
	struct FScalarMaterialInput                        DiffusePower;                                     		// 0x01F0 (0x0028) [0x0000000000000000]              
	struct FColorMaterialInput                         SpecularColor;                                    		// 0x0218 (0x0028) [0x0000000000000000]              
	struct FScalarMaterialInput                        SpecularPower;                                    		// 0x0240 (0x0028) [0x0000000000000000]              
	struct FColorMaterialInput                         EmissiveColor;                                    		// 0x0268 (0x0028) [0x0000000000000000]              
	struct FScalarMaterialInput                        Opacity;                                          		// 0x0290 (0x0028) [0x0000000000000000]              
	struct FScalarMaterialInput                        OpacityMask;                                      		// 0x02B8 (0x0028) [0x0000000000000000]              
	struct FColorMaterialInput                         CustomLighting;                                   		// 0x02E0 (0x0028) [0x0000000000000000]              
	struct FColorMaterialInput                         CustomSkylightDiffuse;                            		// 0x0308 (0x0028) [0x0000000000000000]              
	struct FScalarMaterialInput                        TwoSidedLightingMask;                             		// 0x0330 (0x0028) [0x0000000000000000]              
	struct FColorMaterialInput                         TwoSidedLightingColor;                            		// 0x0358 (0x0028) [0x0000000000000000]              
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x0380 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  PhysMaterialMask;                                 		// 0x0388 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                            		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                            		// 0x0398 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterial*                                   FallbackMaterial;                                 		// 0x03A0 (0x0008) [0x0000000000200000]              
	int                                                PhysMaterialMaskUVChannel;                        		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OpacityMaskClipValue;                             		// 0x03AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowDepthBias;                                  		// 0x03B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                nNumWounds;                                       		// 0x03B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              MaterialDepthBias;                                		// 0x03B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaterialDownsampleThreshold;                      		// 0x03BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      TwoSided : 1;                                     		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      TwoSidedSeparatePass : 1;                         		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableDepthTest : 1;                            		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowFog : 1;                                    		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowTranslucencyDoF : 1;                        		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseOneLayerDistortion : 1;                       		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyDepthPass : 1;                 		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bUseLitTranslucencyPostRenderDepthPass : 1;       		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bCastLitTranslucencyShadowAsMasked : 1;           		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bHairPass : 1;                                    		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseSurfaceTranslucencyDepthPass : 1;             		// 0x03C0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bUsedAsLightFunction : 1;                         		// 0x03C0 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFogVolumes : 1;                          		// 0x03C0 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                 		// 0x03C0 (0x0004) [0x0000000000200002] [0x00002000] ( CPF_Const )
	unsigned long                                      bUsedWithSkeletalMesh : 1;                        		// 0x03C0 (0x0004) [0x0000000000000003] [0x00004000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFracturedMeshes : 1;                     		// 0x03C0 (0x0004) [0x0000000000000003] [0x00008000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSystem : 1;                      		// 0x03C0 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bUsedWithParticleSprites : 1;                     		// 0x03C0 (0x0004) [0x0000000000000003] [0x00020000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithBeamTrails : 1;                          		// 0x03C0 (0x0004) [0x0000000000000003] [0x00040000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithParticleSubUV : 1;                       		// 0x03C0 (0x0004) [0x0000000000000003] [0x00080000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFoliage : 1;                             		// 0x03C0 (0x0004) [0x0000000000000003] [0x00100000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSpeedTree : 1;                           		// 0x03C0 (0x0004) [0x0000000000000003] [0x00200000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithStaticLighting : 1;                      		// 0x03C0 (0x0004) [0x0000000000000003] [0x00400000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLensFlare : 1;                           		// 0x03C0 (0x0004) [0x0000000000000003] [0x00800000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithGammaCorrection : 1;                     		// 0x03C0 (0x0004) [0x0000000000000003] [0x01000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;              		// 0x03C0 (0x0004) [0x0000000000000003] [0x02000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithFluidSurfaces : 1;                       		// 0x03C0 (0x0004) [0x0000000000000003] [0x04000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithDecals : 1;                              		// 0x03C0 (0x0004) [0x0000000000000003] [0x08000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMaterialEffect : 1;                      		// 0x03C0 (0x0004) [0x0000000000000003] [0x10000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithMorphTargets : 1;                        		// 0x03C0 (0x0004) [0x0000000000000003] [0x20000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithRadialBlur : 1;                          		// 0x03C0 (0x0004) [0x0000000000000003] [0x40000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithInstancedMeshes : 1;                     		// 0x03C0 (0x0004) [0x0000000000000003] [0x80000000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSplineMeshes : 1;                        		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithAPEXMeshes : 1;                          		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithLightEnvironments : 1;                   		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithVectorLightMaps : 1;                     		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithSimpleLightMaps : 1;                     		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsedWithScreenDoorFade : 1;                      		// 0x03C4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      Wireframe : 1;                                    		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPerPixelCameraVector : 1;                        		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsFallbackMaterial : 1;                          		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceFullPrecision : 1;                          		// 0x03C4 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUsesDistortion : 1;                              		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIsMasked : 1;                                    		// 0x03C4 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bIsPreviewMaterial : 1;                           		// 0x03C4 (0x0004) [0x0000000000202000] [0x00001000] ( CPF_Transient )
	unsigned long                                      EditorRecompileAlways : 1;                        		// 0x03C4 (0x0004) [0x0000000000002002] [0x00002000] ( CPF_Const | CPF_Transient )
	unsigned long                                      AllowsEffectsMaterials : 1;                       		// 0x03C4 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned char                                      BlendMode;                                        		// 0x03C8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightingModel;                                    		// 0x03C9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Xbox360GammaQuality;                              		// 0x03CA (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpression
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpression : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Model
// 0x0F04 (0x0F64 - 0x0060)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xF04 ];                           		// 0x0060 (0x0F04) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MusicTrackDataStructures
// 0x0000 (0x0060 - 0x0060)
class UMusicTrackDataStructures : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NavigationMeshBase
// 0x0300 (0x0360 - 0x0060)
class UNavigationMeshBase : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x300 ];                           		// 0x0060 (0x0300) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NetDriver
// 0x0174 (0x01DC - 0x0068)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[ 0x34 ];                            		// 0x0068 (0x0034) MISSED OFFSET
	float                                              ConnectionTimeout;                                		// 0x009C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              InitialConnectTimeout;                            		// 0x00A0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              KeepAliveTime;                                    		// 0x00A4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              RelevantTimeout;                                  		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              SpawnPrioritySeconds;                             		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              ServerTravelPause;                                		// 0x00B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxClientRate;                                    		// 0x00B4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxInternetClientRate;                            		// 0x00B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NetServerMaxTickRate;                             		// 0x00BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bClampListenServerTickRate : 1;                   		// 0x00C0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      AllowDownloads : 1;                               		// 0x00C4 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned char                                      UnknownData01[ 0x1C ];                            		// 0x00C8 (0x001C) MISSED OFFSET
	int                                                MaxDownloadSize;                                  		// 0x00E4 (0x0004) [0x0000000000004000]              ( CPF_Config )
	struct TArray<struct FString>                      DownloadManagers;                                 		// 0x00E8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0xA4 ];                            		// 0x00F8 (0x00A4) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                           		// 0x019C (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData03[ 0x30 ];                            		// 0x01AC (0x0030) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DemoRecDriver
// 0x00E8 (0x02C4 - 0x01DC)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x01DC (0x002C) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                               		// 0x0208 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x98 ];                            		// 0x0218 (0x0098) MISSED OFFSET
	int                                                MaxRewindPoints;                                  		// 0x02B0 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData02[ 0x4 ];                             		// 0x02B4 (0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                              		// 0x02B8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                NumRecentRewindPoints;                            		// 0x02BC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      UnknownData03[ 0x4 ];                             		// 0x02C0 (0x0004) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ObjectReferencer
// 0x0010 (0x0070 - 0x0060)
class UObjectReferencer : public UObject
{
public:
	struct TArray<class UObject*>                      ReferencedObjects;                                		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.OnlineGameplayEvents
// 0x0074 (0x00D4 - 0x0060)
class UOnlineGameplayEvents : public UObject
{
public:
	struct TArray<struct FPlayerInformation>           PlayerList;                                       		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FString>                      EventDescList;                                    		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FName>                        EventNames;                                       		// 0x0080 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FGameplayEvent>               GameplayEvents;                                   		// 0x0090 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FPlayerEvent>                 PlayerEvents;                                     		// 0x00A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     GameplaySessionStartTime;                         		// 0x00B0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FGuid                                       GameplaySessionID;                                		// 0x00C0 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bGameplaySessionInProgress : 1;                   		// 0x00D0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.OnlinePlayerStorage
// 0x0035 (0x0095 - 0x0060)
class UOnlinePlayerStorage : public UObject
{
public:
	struct TArray<struct FOnlineProfileSetting>        ProfileSettings;                                  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSettingsPropertyPropertyMetaData> ProfileMappings;                                  		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                VersionNumber;                                    		// 0x0090 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AsyncState;                                       		// 0x0094 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetToDefaults ( );
	void AddSettingFloat ( int SettingId );
	void AddSettingInt ( int SettingId );
	bool GetRangedProfileSettingValue ( int ProfileId, float* OutValue );
	bool SetRangedProfileSettingValue ( int ProfileId, float NewValue );
	bool GetProfileSettingRange ( int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetProfileSettingMappingIds ( int ProfileId, struct TArray<int>* Ids );
	bool GetProfileSettingMappingType ( int ProfileId, unsigned char* OutType );
	bool SetProfileSettingValueFloat ( int ProfileSettingId, float Value );
	bool SetProfileSettingValueInt ( int ProfileSettingId, int Value );
	bool SetProfileSettingValueId ( int ProfileSettingId, int Value );
	bool GetProfileSettingValueFloat ( int ProfileSettingId, float* Value );
	bool GetProfileSettingValueInt ( int ProfileSettingId, int* Value );
	bool GetProfileSettingValueId ( int ProfileSettingId, int* ValueId, int* ListIndex );
	bool SetProfileSettingValue ( int ProfileSettingId, struct FString* NewValue );
	bool SetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* NewValue );
	bool GetProfileSettingValueByName ( struct FName ProfileSettingName, struct FString* Value );
	bool GetProfileSettingValues ( int ProfileSettingId, struct TArray<struct FName>* Values );
	struct FName GetProfileSettingValueName ( int ProfileSettingId );
	bool GetProfileSettingValue ( int ProfileSettingId, int ValueMapID, struct FString* Value );
	bool IsProfileSettingIdMapped ( int ProfileSettingId );
	int FindProfileMappingIndexByName ( struct FName ProfileSettingName );
	int FindProfileMappingIndex ( int ProfileSettingId );
	int FindProfileSettingIndex ( int ProfileSettingId );
	struct FString GetProfileSettingColumnHeader ( int ProfileSettingId );
	struct FName GetProfileSettingName ( int ProfileSettingId );
	bool GetProfileSettingId ( struct FName ProfileSettingName, int* ProfileSettingId );
	void NotifySettingValueUpdated ( struct FName SettingName );
};

// Class Engine.OnlineProfileSettings
// 0x0033 (0x00C8 - 0x0095)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	struct TArray<int>                                 ProfileSettingIds;                                		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FOnlineProfileSetting>        DefaultSettings;                                  		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FIdToStringMapping>           OwnerMappings;                                    		// 0x00B8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventModifyAvailableProfileSettings ( );
	void SetDefaultVersionNumber ( );
	int GetVersionNumber ( );
	void AppendVersionToSettings ( );
	void AppendVersionToReadIds ( );
	void eventSetToDefaults ( );
	bool GetProfileSettingDefaultFloat ( int ProfileSettingId, float* DefaultFloat );
	bool GetProfileSettingDefaultInt ( int ProfileSettingId, int* DefaultInt );
	bool GetProfileSettingDefaultId ( int ProfileSettingId, int* DefaultId, int* ListIndex );
};

// Class Engine.OnlinePlaylistManager
// 0x004C (0x00AC - 0x0060)
class UOnlinePlaylistManager : public UObject
{
public:
	struct TArray<struct FPlaylist>                    Playlists;                                        		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FString>                      PlaylistFileNames;                                		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        DatastoresToRefresh;                              		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadPlaylistComplete__Delegate;               		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                DownloadCount;                                    		// 0x00A0 (0x0004) [0x0000000000000000]              
	int                                                SuccessfulCount;                                  		// 0x00A4 (0x0004) [0x0000000000000000]              
	int                                                VersionNumber;                                    		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Reset ( );
	void GetContentIdsFromPlaylist ( int PlaylistId, struct TArray<int>* ContentIds );
	void GetTeamInfoFromPlaylist ( int PlaylistId, int* TeamSize, int* TeamCount );
	bool PlaylistSupportsDedicatedServers ( int PlaylistId );
	bool HasAnyGameSettings ( int PlaylistId );
	class UOnlineGameSettings* GetGameSettings ( int PlaylistId, int GameSettingsId );
	void FinalizePlaylistObjects ( );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void DetermineFilesToDownload ( );
	void DownloadPlaylist ( );
	void OnReadPlaylistComplete ( );
};

// Class Engine.OnlineStats
// 0x0010 (0x0070 - 0x0060)
class UOnlineStats : public UObject
{
public:
	struct TArray<struct FStringIdToStringMapping>     ViewIdMappings;                                   		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FName GetViewName ( int ViewId );
	bool GetViewId ( struct FName ViewName, int* ViewId );
};

// Class Engine.OnlineStatsRead
// 0x0050 (0x00C0 - 0x0070)
class UOnlineStatsRead : public UOnlineStats
{
public:
	struct TArray<int>                                 ColumnIds;                                        		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FOnlineStatsRow>              Rows;                                             		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FColumnMetaData>              ColumnMappings;                                   		// 0x0090 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     ViewName;                                         		// 0x00A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                ViewId;                                           		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                SortColumnId;                                     		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TotalRowsInView;                                  		// 0x00B8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TitleId;                                          		// 0x00BC (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetRankForPlayer ( struct FUniqueNetId PlayerID );
	void AddPlayer ( struct FString PlayerName, struct FUniqueNetId PlayerID );
	bool SetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float StatValue );
	bool GetFloatStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, float* StatValue );
	bool SetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int StatValue );
	bool GetIntStatValueForPlayer ( struct FUniqueNetId PlayerID, int StatColumnNo, int* StatValue );
	void eventOnReadComplete ( );
};

// Class Engine.OnlineStatsWrite
// 0x0054 (0x00C4 - 0x0070)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	struct TArray<struct FStringIdToStringMapping>     StatMappings;                                     		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FSettingsProperty>            Properties;                                       		// 0x0080 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 ViewIds;                                          		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 ArbitratedViewIds;                                		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                 		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                RatingId;                                         		// 0x00C0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DecrementIntStat ( int StatId, int DecBy );
	void DecrementFloatStat ( int StatId, float DecBy );
	void IncrementIntStat ( int StatId, int IncBy );
	void IncrementFloatStat ( int StatId, float IncBy );
	void SetIntStat ( int StatId, int Value );
	void SetFloatStat ( int StatId, float Value );
	struct FName GetStatName ( int StatId );
	bool GetStatId ( struct FName StatName, int* StatId );
	void OnStatsWriteComplete ( );
};

// Class Engine.OnlineSubsystem
// 0x00E4 (0x0144 - 0x0060)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FNamedInterface>              NamedInterfaces;                                  		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FNamedInterfaceDef>           NamedInterfaceDefs;                               		// 0x0078 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FNamedSession>                Sessions;                                         		// 0x0088 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UOnlineAccountInterface*                     AccountInterface;                                 		// 0x0098 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00A0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x00A8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x00B0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterfaceEx*                    PlayerInterfaceEx;                                		// 0x00B8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData02[ 0x8 ];                             		// 0x00C0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineSystemInterface*                      SystemInterface;                                  		// 0x00C8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData03[ 0x8 ];                             		// 0x00D0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x00D8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData04[ 0x8 ];                             		// 0x00E0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineContentInterface*                     ContentInterface;                                 		// 0x00E8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData05[ 0x8 ];                             		// 0x00F0 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineVoiceInterface*                       VoiceInterface;                                   		// 0x00F8 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData06[ 0x8 ];                             		// 0x0100 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x0108 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData07[ 0x8 ];                             		// 0x0110 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlineNewsInterface*                        NewsInterface;                                    		// 0x0118 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData08[ 0x8 ];                             		// 0x0120 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePartyChatInterface*                   PartyChatInterface;                               		// 0x0128 (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData09[ 0x8 ];                             		// 0x0130 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	int                                                BuildIdOverride;                                  		// 0x0138 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              AsyncMinCompletionTime;                           		// 0x013C (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bUseBuildIdOverride : 1;                          		// 0x0140 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetDebugSpewLevel ( int DebugSpewLevel );
	void DumpVoiceRegistration ( );
	void DumpNetIds ( struct FString DebugLabel, struct TArray<struct FUniqueNetId>* Players );
	void DumpSessionState ( );
	void DumpGameSettings ( class UOnlineGameSettings* GameSettings );
	int GetNumSupportedLogins ( );
	int GetBioDynamicBuildVersion ( );
	int GetBioStaticBuildVersion ( );
	int GetBuildUniqueId ( );
	bool AreUniqueNetIdsEqual ( struct FUniqueNetId* NetIdA, struct FUniqueNetId* NetIdB );
	bool StringToUniqueNetId ( struct FString UniqueNetIdString, struct FUniqueNetId* out_UniqueId );
	struct FString UniqueNetIdToString ( struct FUniqueNetId* IdToConvert );
	class UObject* eventGetNamedInterface ( struct FName InterfaceName );
	void eventSetNamedInterface ( struct FName InterfaceName, class UObject* NewInterface );
	bool eventSetPartyChatInterface ( class UObject* NewInterface );
	bool eventSetNewsInterface ( class UObject* NewInterface );
	bool eventSetStatsInterface ( class UObject* NewInterface );
	bool eventSetVoiceInterface ( class UObject* NewInterface );
	bool eventSetContentInterface ( class UObject* NewInterface );
	bool eventSetGameInterface ( class UObject* NewInterface );
	bool eventSetSystemInterface ( class UObject* NewInterface );
	bool eventSetPlayerInterfaceEx ( class UObject* NewInterface );
	bool eventSetPlayerInterface ( class UObject* NewInterface );
	bool eventSetAccountInterface ( class UObject* NewInterface );
	void eventExit ( );
	bool eventPostInit ( );
	bool eventInit ( );
};

// Class Engine.PackageMapLevel
// 0x0008 (0x0110 - 0x0108)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0108 (0x0008) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PackageMapSeekFree
// 0x0000 (0x0110 - 0x0110)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Player
// 0x002C (0x008C - 0x0060)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class APlayerController*                           Actor;                                            		// 0x0068 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentNetSpeed;                                  		// 0x0070 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ConfiguredInternetSpeed;                          		// 0x0074 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                ConfiguredLanSpeed;                               		// 0x0078 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              PP_DesaturationMultiplier;                        		// 0x007C (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_HighlightsMultiplier;                          		// 0x0080 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_MidTonesMultiplier;                            		// 0x0084 (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              PP_ShadowsMultiplier;                             		// 0x0088 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SwitchController ( class APlayerController* PC );
};

// Class Engine.LocalPlayer
// 0x0558 (0x05E4 - 0x008C)
class ULocalPlayer : public UPlayer
{
public:
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                    		// 0x008C (0x00F0) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                      		// 0x017C (0x00F0) [0x0000000001402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FPostProcessSettings                        OverridePPDeltaSettings;                          		// 0x026C (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPostProcessSettings                        PostProcessSettingsOverride;                      		// 0x034C (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                           		// 0x042C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UPostProcessChain*>            PlayerPostProcessChains;                          		// 0x043C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     LastMap;                                          		// 0x044C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FRequestedPostProcessEffect>  RequestedPPEffects;                               		// 0x045C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ViewState;                                        		// 0x046C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    UmbraCamera;                                      		// 0x0474 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FDynamicResHistoryElement                   DynamicResHistory[ 0x10 ];                        		// 0x047C (0x0100) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     LastViewLocation;                                 		// 0x057C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    LastViewRotation;                                 		// 0x0588 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UGameViewportClient*                         ViewportClient;                                   		// 0x0594 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Origin;                                           		// 0x059C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Size;                                             		// 0x05A4 (0x0008) [0x0000000000000000]              
	class UPostProcessChain*                           PlayerPostProcess;                                		// 0x05AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                ControllerId;                                     		// 0x05B4 (0x0004) [0x0000000000000000]              
	int                                                DynamicResStep;                                   		// 0x05B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                DynResHistorySize;                                		// 0x05BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PreviousDynResFrameIndex;                         		// 0x05C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DynamicResolutionFraction;                        		// 0x05C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumFramesSinceDynResChange;                       		// 0x05C8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              OverridePPRecoveryTime;                           		// 0x05CC (0x0004) [0x0000000000004000]              ( CPF_Config )
	float                                              OverridePPStartTime;                              		// 0x05D0 (0x0004) [0x0000000000000000]              
	float                                              OverridePPEndTime;                                		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              OverridePPOpacity;                                		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              NearClipPlane;                                    		// 0x05DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bOverridePostProcessSettings : 1;                 		// 0x05E0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bRecoveryFromPostProcessOverride : 1;             		// 0x05E0 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bWantToResetToMapDefaultPP : 1;                   		// 0x05E0 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSentSplitJoin : 1;                               		// 0x05E0 (0x0004) [0x0000000000022002] [0x00000008] ( CPF_Const | CPF_Transient | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetNickname ( );
	struct FUniqueNetId eventGetUniqueNetId ( );
	void DeProject ( struct FVector2D RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection );
	void TouchPlayerPostProcessChain ( );
	class UPostProcessChain* GetPostProcessChain ( int InIndex );
	bool RemoveAllPostProcessingChains ( );
	bool RemovePostProcessingChain ( int InIndex );
	bool InsertPostProcessingChain ( class UPostProcessChain* InChain, int InIndex, unsigned long bInClone );
	void SetControllerId ( int NewControllerId );
	void ClearPostProcessSettingsOverride ( float RecoveryTime );
	void UpdateOverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings );
	void OverridePostProcessSettings ( struct FPostProcessSettings OverrideSettings, float StartBlendTime );
	void ZeroOverridePPDeltaSettings ( );
	bool GetActorVisibility ( class AActor* TestActor );
	void SendSplitJoin ( );
	bool SpawnPlayActor ( struct FString URL, struct FString* OutError );
	void BioRecalculatePostProcessEffects ( );
	void BioRemovePostProcessEffect ( class UPostProcessEffect* pEffect );
	void BioAddPostProcessEffect ( class UPostProcessEffect* pEffect, class UObject* pOwner, unsigned char nCombineType );
};

// Class Engine.NetConnection
// 0x5FE0 (0x606C - 0x008C)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[ 0x5FBC ];                          		// 0x008C (0x5FBC) MISSED OFFSET
	struct TArray<class UChildConnection*>             Children;                                         		// 0x6048 (0x0010) [0x0000000000602000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData01[ 0x14 ];                            		// 0x6058 (0x0014) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ChildConnection
// 0x0008 (0x6074 - 0x606C)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                           		// 0x606C (0x0008) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DemoRecConnection
// 0x0000 (0x606C - 0x606C)
class UDemoRecConnection : public UNetConnection
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Polys
// 0x0018 (0x0078 - 0x0060)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x18 ];                            		// 0x0060 (0x0018) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PostProcessChain
// 0x0010 (0x0070 - 0x0060)
class UPostProcessChain : public UObject
{
public:
	struct TArray<class UPostProcessEffect*>           Effects;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPostProcessEffect* FindPostProcessEffect ( struct FName EffectName );
};

// Class Engine.PostProcessEffect
// 0x0025 (0x0085 - 0x0060)
class UPostProcessEffect : public UObject
{
public:
	struct FName                                       EffectName;                                       		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodePosY;                                         		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NodePosX;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                DrawWidth;                                        		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                DrawHeight;                                       		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                OutDrawY;                                         		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                InDrawY;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	unsigned long                                      bShowInEditor : 1;                                		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowInGame : 1;                                  		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseWorldSettings : 1;                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bMergePostUber : 1;                               		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAffectsLightingOnly : 1;                         		// 0x0080 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned char                                      SceneDPG;                                         		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientOcclusionEffect
// 0x0074 (0x00F9 - 0x0085)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	struct FLinearColor                                OcclusionColor;                                   		// 0x0088 (0x0010) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HBAOBias;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HBAORadius;                                       		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HBAOBlurSharpnessX;                               		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HBAOBlurSharpnessY;                               		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HBAOMeters2ViewSpace;                             		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HBAOIntensity;                                    		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionPower;                                   		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionScale;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionBias;                                    		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinOcclusion;                                     		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionRadius;                                  		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionAttenuation;                             		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMinDistance;                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionFadeoutMaxDistance;                      		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceThreshold;                            		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloDistanceScale;                                		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HaloOcclusion;                                    		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceThreshold;                            		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDistanceScale;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilterDistanceScale;                              		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                FilterSize;                                       		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryConvergenceTime;                           		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HistoryWeightConvergenceTime;                     		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      HBAO : 1;                                         		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SSAO2 : 1;                                        		// 0x00F4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      OcclusionQuality;                                 		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioMaterialInstanceEffect
// 0x000B (0x0090 - 0x0085)
class UBioMaterialInstanceEffect : public UPostProcessEffect
{
public:
	class UMaterialInstance*                           Material;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BlurEffect
// 0x0007 (0x008C - 0x0085)
class UBlurEffect : public UPostProcessEffect
{
public:
	int                                                BlurKernelSize;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DOFEffect
// 0x0030 (0x00B5 - 0x0085)
class UDOFEffect : public UPostProcessEffect
{
public:
	struct FVector                                     FocusPosition;                                    		// 0x0088 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FalloffExponent;                                  		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FStop;                                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FocusType;                                        		// 0x00B4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DOFAndBloomEffect
// 0x001F (0x00D4 - 0x00B5)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                       		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomThreshold;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneMultiplier;                                  		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurBloomKernelSize;                              		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableReferenceDOF : 1;                          		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableDepthOfFieldHQ : 1;                        		// 0x00D0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DOFBloomMotionBlurEffect
// 0x0014 (0x00E8 - 0x00D4)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UberPostProcessEffect
// 0x0039 (0x0121 - 0x00E8)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                     		// 0x00E8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneHighLights;                                  		// 0x00F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SceneMidTones;                                    		// 0x0100 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              SceneDesaturation;                                		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EdgeDetectionThreshold;                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FXAAContrastThreshold;                            		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FilmGrain_Scale;                                  		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      EnableDOF : 1;                                    		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableBloom : 1;                                  		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableColorMapping : 1;                           		// 0x011C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      EnableMotionBlur : 1;                             		// 0x011C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnableNewFilmGrain : 1;                           		// 0x011C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      EnableRandomFilmGrain : 1;                        		// 0x011C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned char                                      PostProcessAAType;                                		// 0x0120 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialEffect
// 0x000B (0x0090 - 0x0085)
class UMaterialEffect : public UPostProcessEffect
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MotionBlurEffect
// 0x0017 (0x009C - 0x0085)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	float                                              MaxVelocity;                                      		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotionBlurAmount;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraRotationThreshold;                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraTranslationThreshold;                       		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      FullMotionBlur : 1;                               		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0064 - 0x0060)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                		// 0x0060 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockActors : 1;                                  		// 0x0060 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockZeroExtent : 1;                              		// 0x0060 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockNonZeroExtent : 1;                           		// 0x0060 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      BlockRigidBody : 1;                               		// 0x0060 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      HiddenGame : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      HiddenEditor : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      CastShadow : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MeshComponentFactory
// 0x0010 (0x0074 - 0x0064)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	struct TArray<class UMaterialInterface*>           Materials;                                        		// 0x0064 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.StaticMeshComponentFactory
// 0x0008 (0x007C - 0x0074)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ReachSpec
// 0x005A (0x00BA - 0x0060)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                  		// 0x0060 (0x0008) [0x0000000000023002]              ( CPF_Const | CPF_Native | CPF_Transient | CPF_EditConst )
	struct FActorReference                             End;                                              		// 0x0068 (0x0018) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FVector                                     Direction;                                        		// 0x0080 (0x000C) [0x0000000000000000]              
	class ANavigationPoint*                            Start;                                            		// 0x008C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class AActor*                                      BlockedBy;                                        		// 0x0094 (0x0008) [0x0000000000000000]              
	int                                                Distance;                                         		// 0x009C (0x0004) [0x0000000000000000]              
	int                                                CollisionRadius;                                  		// 0x00A0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                CollisionHeight;                                  		// 0x00A4 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                reachFlags;                                       		// 0x00A8 (0x0004) [0x0000000000000000]              
	int                                                MaxLandingVelocity;                               		// 0x00AC (0x0004) [0x0000000000000000]              
	int                                                m_nBlockedCount;                                  		// 0x00B0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAddToNavigationOctree : 1;                       		// 0x00B4 (0x0004) [0x0000000000020002] [0x00000001] ( CPF_Const | CPF_EditConst )
	unsigned long                                      bCanCutCorners : 1;                               		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSkipPrune : 1;                                   		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bIsMantle : 1;                                    		// 0x00B4 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bDisabled : 1;                                    		// 0x00B4 (0x0004) [0x0000000000020001] [0x00000020] ( CPF_Edit | CPF_EditConst )
	unsigned char                                      bPruned;                                          		// 0x00B8 (0x0001) [0x0000000000000000]              
	unsigned char                                      PathColorIndex;                                   		// 0x00B9 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsBlocked ( );
	bool IsBlockedFor ( class APawn* P );
	struct FVector GetDirection ( );
	class ANavigationPoint* GetEnd ( );
	int CostFor ( class APawn* P );
};

// Class Engine.AdvancedReachSpec
// 0x0002 (0x00BC - 0x00BA)
class UAdvancedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CeilingReachSpec
// 0x0002 (0x00BC - 0x00BA)
class UCeilingReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ForcedReachSpec
// 0x0002 (0x00BC - 0x00BA)
class UForcedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CoverSlipReachSpec
// 0x0001 (0x00BD - 0x00BC)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00BC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CoverTurnReachSpec
// 0x0001 (0x00BD - 0x00BC)
class UCoverTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00BC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x00BC - 0x00BC)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MantleReachSpec
// 0x0004 (0x00C0 - 0x00BC)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	unsigned long                                      bClimbUp : 1;                                     		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x00BD - 0x00BC)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00BC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SwatTurnReachSpec
// 0x0001 (0x00BD - 0x00BC)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                    		// 0x00BC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WallTransReachSpec
// 0x0000 (0x00BC - 0x00BC)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LadderReachSpec
// 0x0002 (0x00BC - 0x00BA)
class ULadderReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ProscribedReachSpec
// 0x0002 (0x00BC - 0x00BA)
class UProscribedReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TeleportReachSpec
// 0x0002 (0x00BC - 0x00BA)
class UTeleportReachSpec : public UReachSpec
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RvrEffectsMaterialGroup
// 0x0020 (0x0080 - 0x0060)
class URvrEffectsMaterialGroup : public UObject
{
public:
	struct TArray<struct FEMG_Entry>                   m_lstEffects;                                     		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FGuid                                       m_Guid;                                           		// 0x0070 (0x0010) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SavedMove
// 0x00B7 (0x0117 - 0x0060)
class USavedMove : public UObject
{
public:
	struct FVector                                     StartLocation;                                    		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartRelativeLocation;                            		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     StartVelocity;                                    		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     StartFloor;                                       		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedLocation;                                    		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedVelocity;                                    		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     SavedRelativeLocation;                            		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FVector                                     Acceleration;                                     		// 0x00C0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    Rotation;                                         		// 0x00CC (0x000C) [0x0000000000000000]              
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x00D8 (0x000C) [0x0000000000000000]              
	class USavedMove*                                  NextMove;                                         		// 0x00E4 (0x0008) [0x0000000000000000]              
	class AActor*                                      StartBase;                                        		// 0x00EC (0x0008) [0x0000000000000000]              
	class AActor*                                      EndBase;                                          		// 0x00F4 (0x0008) [0x0000000000000000]              
	float                                              TimeStamp;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              Delta;                                            		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              CustomTimeDilation;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              AccelDotThreshold;                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              RootMotionInterpCurrentTime;                      		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      bRun : 1;                                         		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDuck : 1;                                        		// 0x0110 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPressedJump : 1;                                 		// 0x0110 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDoubleJump : 1;                                  		// 0x0110 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bPreciseDestination : 1;                          		// 0x0110 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0110 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0110 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x0110 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned char                                      DoubleClickMove;                                  		// 0x0114 (0x0001) [0x0000000000000000]              
	unsigned char                                      SavedPhysics;                                     		// 0x0115 (0x0001) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x0116 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetDebugString ( );
	unsigned char SetFlags ( unsigned char Flags, class APlayerController* PC );
	unsigned char CompressedFlags ( );
	void ResetMoveFor ( class APawn* P );
	void PrepMoveFor ( class APawn* P );
	void SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector newAccel, unsigned char InDoubleClick );
	bool CanCombineWith ( class USavedMove* NewMove, class APawn* inPawn, float MaxDelta );
	void SetInitialPosition ( class APawn* P );
	struct FVector GetStartLocation ( );
	bool IsImportantMove ( struct FVector CompareAccel );
	void PostUpdate ( class APlayerController* P );
	void Clear ( );
};

// Class Engine.SaveGameSummary
// 0x0018 (0x0078 - 0x0060)
class USaveGameSummary : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       BaseLevel;                                        		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Selection
// 0x002C (0x008C - 0x0060)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x2C ];                            		// 0x0060 (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ServerCommandlet
// 0x0000 (0x00B4 - 0x00B4)
class UServerCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Settings
// 0x0060 (0x00C0 - 0x0060)
class USettings : public UObject
{
public:
	struct TArray<struct FLocalizedStringSetting>      LocalizedSettings;                                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSettingsProperty>            Properties;                                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FLocalizedStringSettingMetaData> LocalizedSettingsMappings;                        		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSettingsPropertyPropertyMetaData> PropertyMappings;                                 		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifySettingValueUpdated__Delegate;            		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyPropertyValueUpdated__Delegate;           		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateFromURL ( class AGameInfo* Game, struct FString* URL );
	void BuildURL ( struct FString* URL );
	void AppendContextsToURL ( struct FString* URL );
	void AppendPropertiesToURL ( struct FString* URL );
	void AppendDataBindingsToURL ( struct FString* URL );
	void GetQoSAdvertisedStringSettings ( struct TArray<struct FLocalizedStringSetting>* QoSSettings );
	void GetQoSAdvertisedProperties ( struct TArray<struct FSettingsProperty>* QoSProps );
	bool GetRangedPropertyValue ( int PropertyId, float* OutValue );
	bool SetRangedPropertyValue ( int PropertyId, float NewValue );
	bool GetPropertyRange ( int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt );
	bool GetPropertyMappingType ( int PropertyId, unsigned char* OutType );
	bool HasStringSetting ( int SettingId );
	bool HasProperty ( int PropertyId );
	void UpdateProperties ( unsigned long bShouldAddIfMissing, struct TArray<struct FSettingsProperty>* Props );
	void UpdateStringSettings ( unsigned long bShouldAddIfMissing, struct TArray<struct FLocalizedStringSetting>* Settings );
	unsigned char GetPropertyType ( int PropertyId );
	bool GetPropertyValueId ( int PropertyId, int* ValueId );
	bool SetPropertyValueId ( int PropertyId, int ValueId );
	bool GetStringProperty ( int PropertyId, struct FString* Value );
	void SetStringProperty ( int PropertyId, struct FString Value );
	bool GetIntProperty ( int PropertyId, int* Value );
	void SetIntProperty ( int PropertyId, int Value );
	bool GetFloatProperty ( int PropertyId, float* Value );
	void SetFloatProperty ( int PropertyId, float Value );
	bool SetPropertyFromStringByName ( struct FName PropertyName, struct FString* NewValue );
	struct FString GetPropertyAsStringByName ( struct FName PropertyName );
	struct FString GetPropertyAsString ( int PropertyId );
	struct FString GetPropertyColumnHeader ( int PropertyId );
	struct FName GetPropertyName ( int PropertyId );
	bool GetPropertyId ( struct FName PropertyName, int* PropertyId );
	bool SetStringSettingValueFromStringByName ( struct FName StringSettingName, struct FString* NewValue );
	struct FName GetStringSettingValueNameByName ( struct FName StringSettingName );
	struct FName GetStringSettingValueName ( int StringSettingId, int ValueIndex );
	bool IsWildcardStringSetting ( int StringSettingId );
	struct FString GetStringSettingColumnHeader ( int StringSettingId );
	struct FName GetStringSettingName ( int StringSettingId );
	bool GetStringSettingId ( struct FName StringSettingName, int* StringSettingId );
	bool GetStringSettingValueByName ( struct FName StringSettingName, int* ValueIndex );
	void SetStringSettingValueByName ( struct FName StringSettingName, int ValueIndex, unsigned long bShouldAutoAdd );
	bool GetStringSettingValueNames ( int StringSettingId, struct TArray<struct FIdToStringMapping>* Values );
	bool IncrementStringSettingValue ( int StringSettingId, int Direction, unsigned long bShouldWrap );
	bool GetStringSettingValue ( int StringSettingId, int* ValueIndex );
	void SetStringSettingValue ( int StringSettingId, int ValueIndex, unsigned long bShouldAutoAdd );
	void GetSettingsDataDateTime ( struct FSettingsData* Data, int* OutInt1, int* OutInt2 );
	void GetSettingsDataBlob ( struct FSettingsData* Data, struct TArray<unsigned char>* OutBlob );
	int GetSettingsDataInt ( struct FSettingsData* Data );
	float GetSettingsDataFloat ( struct FSettingsData* Data );
	struct FString GetSettingsDataString ( struct FSettingsData* Data );
	void EmptySettingsData ( struct FSettingsData* Data );
	void SetSettingsData ( struct FSettingsData* Data, struct FSettingsData* Data2Copy );
	void SetSettingsDataBlob ( struct FSettingsData* Data, struct TArray<unsigned char>* InBlob );
	void SetSettingsDataDateTime ( int InInt1, int InInt2, struct FSettingsData* Data );
	void SetSettingsDataInt ( int InInt, struct FSettingsData* Data );
	void SetSettingsDataFloat ( float InFloat, struct FSettingsData* Data );
	void SetSettingsDataString ( struct FString InString, struct FSettingsData* Data );
	void NotifyPropertyValueUpdated ( struct FName PropertyName );
	void NotifySettingValueUpdated ( struct FName SettingName );
};

// Class Engine.OnlineGameSearch
// 0x00A4 (0x0164 - 0x00C0)
class UOnlineGameSearch : public USettings
{
public:
	struct FOverrideSkill                              ManualSkillOverride;                              		// 0x00C0 (0x0034) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FOnlineGameSearchQuery                      FilterQuery;                                      		// 0x00F4 (0x0020) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FOnlineGameSearchResult>      Results;                                          		// 0x0114 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FNamedObjectProperty>         NamedProperties;                                  		// 0x0124 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     AdditionalSearchCriteria;                         		// 0x0134 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameSettingsClass;                                		// 0x0144 (0x0008) [0x0000000000000000]              
	struct FLocalizedStringSetting                     Query;                                            		// 0x014C (0x000C) [0x0000000000000000]              
	int                                                MaxSearchResults;                                 		// 0x0158 (0x0004) [0x0000000000000000]              
	int                                                PingBucketSize;                                   		// 0x015C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsLanQuery : 1;                                  		// 0x0160 (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x0160 (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bIsSearchInProgress : 1;                          		// 0x0160 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSortSearchResults ( );
	void SetSkillOverride ( int LeaderboardId, struct TArray<struct FUniqueNetId>* Players );
};

// Class Engine.OnlineGameSettings
// 0x0041 (0x0101 - 0x00C0)
class UOnlineGameSettings : public USettings
{
public:
	struct FQWord                                      ServerNonce;                                      		// 0x00C0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FUniqueNetId                                OwningPlayerId;                                   		// 0x00C8 (0x0008) [0x0000000000000000]              
	struct FString                                     OwningPlayerName;                                 		// 0x00D0 (0x0010) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                NumPublicConnections;                             		// 0x00E0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumPrivateConnections;                            		// 0x00E4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPublicConnections;                         		// 0x00E8 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                NumOpenPrivateConnections;                        		// 0x00EC (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                PingInMs;                                         		// 0x00F0 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              MatchQuality;                                     		// 0x00F4 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	int                                                BuildUniqueId;                                    		// 0x00F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShouldAdvertise : 1;                             		// 0x00FC (0x0004) [0x0000000040000000] [0x00000001] ( CPF_EditInlineNotify )
	unsigned long                                      bIsLanMatch : 1;                                  		// 0x00FC (0x0004) [0x0000000040000000] [0x00000002] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesStats : 1;                                   		// 0x00FC (0x0004) [0x0000000040000000] [0x00000004] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinInProgress : 1;                         		// 0x00FC (0x0004) [0x0000000040000000] [0x00000008] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowInvites : 1;                                		// 0x00FC (0x0004) [0x0000000040000000] [0x00000010] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesPresence : 1;                                		// 0x00FC (0x0004) [0x0000000040000000] [0x00000020] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresence : 1;                        		// 0x00FC (0x0004) [0x0000000040000000] [0x00000040] ( CPF_EditInlineNotify )
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;             		// 0x00FC (0x0004) [0x0000000040000000] [0x00000080] ( CPF_EditInlineNotify )
	unsigned long                                      bUsesArbitration : 1;                             		// 0x00FC (0x0004) [0x0000000040000000] [0x00000100] ( CPF_EditInlineNotify )
	unsigned long                                      bAntiCheatProtected : 1;                          		// 0x00FC (0x0004) [0x0000000040000000] [0x00000200] ( CPF_EditInlineNotify )
	unsigned long                                      bWasFromInvite : 1;                               		// 0x00FC (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bIsDedicated : 1;                                 		// 0x00FC (0x0004) [0x0000000040000000] [0x00000800] ( CPF_EditInlineNotify )
	unsigned long                                      bHasSkillUpdateInProgress : 1;                    		// 0x00FC (0x0004) [0x0000000000000002] [0x00001000] ( CPF_Const )
	unsigned char                                      GameState;                                        		// 0x0100 (0x0001) [0x0000000040000002]              ( CPF_Const | CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXModule
// 0x0010 (0x0070 - 0x0060)
class USFXModule : public UObject
{
public:
	class AActor*                                      ModuleOwner;                                      		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                ModuleNetIndex;                                   		// 0x0068 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNetInitial : 1;                                  		// 0x006C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNetDirty : 1;                                    		// 0x006C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNetOwner : 1;                                    		// 0x006C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bNetVisible : 1;                                  		// 0x006C (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bTickWhilePaused : 1;                             		// 0x006C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bUserCreated : 1;                                 		// 0x006C (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugShowDestructibles ( class UCheatManager* CM );
	bool IsServerOrStandalone ( );
	bool IsServer ( );
	bool IsClient ( );
	void eventReplicatedEvent ( struct FName VarName );
	void ReInitialize ( class AActor* oHost );
	unsigned char GetActorRemoteRole ( );
	unsigned char GetActorRole ( );
	void eventHandlePreRemove ( );
	void eventHandlePostAdd ( );
	void eventHandleSetInitialEditorState ( );
	void eventHandlePostBeginPlay ( );
	void eventHandlePreBeginPlay ( );
	void ModulePreRemove ( class AActor* oHost );
	void ModulePostAdd ( class AActor* oHost );
	void ModuleSetInitialEditorState ( class AActor* oHost );
	void ModulePostBeginPlay ( class AActor* oHost );
	void ModulePreBeginPlay ( class AActor* oHost );
	void eventTick ( float DeltaTime );
};

// Class Engine.SFXModule_DamageBase
// 0x0000 (0x0070 - 0x0070)
class USFXModule_DamageBase : public USFXModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SFXTakeRadiusDamage ( float Damage, float DamageRadius, unsigned long bFullDamage, struct FVector HurtOrigin, float Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo HitInfo );
	void SFXTakeDamage ( float Damage, struct FVector Momentum, class UClass* DamageType, class AController* instigatedBy, class AActor* DamageCauser, struct FTraceHitInfo* HitInfo, struct FVector* HitLocation );
};

// Class Engine.ShaderCache
// 0x00F8 (0x0158 - 0x0060)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xF8 ];                            		// 0x0060 (0x00F8) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ShaderCachePayload
// 0x00A0 (0x0100 - 0x0060)
class UShaderCachePayload : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0xA0 ];                            		// 0x0060 (0x00A0) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ShadowMap1D
// 0x005C (0x00BC - 0x0060)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x5C ];                            		// 0x0060 (0x005C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ShadowMap2D
// 0x0038 (0x0098 - 0x0060)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                          		// 0x0060 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateScale;                                  		// 0x0068 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FVector2D                                   CoordinateBias;                                   		// 0x0070 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FGuid                                       LightGuid;                                        		// 0x0078 (0x0010) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsShadowFactorTexture : 1;                       		// 0x0088 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	class UInstancedStaticMeshComponent*               Component;                                        		// 0x008C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                InstanceIndex;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SmokeTestCommandlet
// 0x0000 (0x00B4 - 0x00B4)
class USmokeTestCommandlet : public UCommandlet
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpeechRecognition
// 0x00B0 (0x0110 - 0x0060)
class USpeechRecognition : public UObject
{
public:
	struct FRecogUserData                              InstanceData[ 0x4 ];                              		// 0x0060 (0x0050) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Language;                                         		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FRecogVocabulary>             Vocabularies;                                     		// 0x00C0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       VoiceData;                                        		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       WorkingVoiceData;                                 		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       UserData;                                         		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    FnxVoiceData;                                     		// 0x0100 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	float                                              ConfidenceThreshhold;                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDirty : 1;                                       		// 0x010C (0x0004) [0x0000000000202000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInitialised : 1;                                 		// 0x010C (0x0004) [0x0000000000202000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.StaticMesh
// 0x0130 (0x0190 - 0x0060)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x10 ];                            		// 0x0060 (0x0010) MISSED OFFSET
	struct TArray<struct FStaticMeshLODInfo>           LODInfo;                                          		// 0x0070 (0x0010) [0x0000000000001041]              ( CPF_Edit | CPF_EditConstArray | CPF_Native )
	float                                              LODDistanceRatio;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODMaxRange;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData01[ 0x10 ];                            		// 0x0088 (0x0010) MISSED OFFSET
	int                                                LightMapResolution;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapCoordinateIndex;                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x40 ];                            		// 0x00A0 (0x0040) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                        		// 0x00E0 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	unsigned char                                      UnknownData03[ 0x3C ];                            		// 0x00E8 (0x003C) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                       		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleBoxCollision : 1;                        		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                  		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ForceDoubleSidedShadowVolumes : 1;                		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UseFullPrecisionUVs : 1;                          		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsedForInstancing : 1;                           		// 0x0138 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseMaximumStreamingTexelRatio : 1;               		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPartitionForEdgeGeometry : 1;                    		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCanBecomeDynamic : 1;                            		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x0148 (0x0048) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_BodySetup
// 0x005E (0x0122 - 0x00C4)
class URB_BodySetup : public UKMeshProps
{
public:
	struct TArray<struct FPointer>                     CollisionGeom;                                    		// 0x00C4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FVector>                      CollisionGeomScale3D;                             		// 0x00D4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FKCachedConvexData>           PreCachedPhysData;                                		// 0x00E4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FVector>                      PreCachedPhysScale;                               		// 0x00F4 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FName                                       BoneName;                                         		// 0x0104 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MassScale;                                        		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreCachedPhysDataVersion;                         		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bFixed : 1;                                       		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoCollision : 1;                                 		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockZeroExtent : 1;                             		// 0x011C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBlockNonZeroExtent : 1;                          		// 0x011C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEnableContinuousCollisionDetection : 1;          		// 0x011C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAlwaysFullAnimWeight : 1;                        		// 0x011C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bConsiderForBounds : 1;                           		// 0x011C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned char                                      ePartGroup;                                       		// 0x0120 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SleepFamily;                                      		// 0x0121 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FracturedStaticMesh
// 0x00E0 (0x0270 - 0x0190)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0190 (0x0004) MISSED OFFSET
	float                                              CoreMeshScale;                                    		// 0x0194 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      UnknownData01[ 0x30 ];                            		// 0x0198 (0x0030) MISSED OFFSET
	unsigned long                                      bSliceUsingCoreCollision : 1;                     		// 0x01C8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	class UParticleSystem*                             FragmentDestroyEffect;                            		// 0x01CC (0x0008) [0x0000000000000000]              
	struct TArray<class UParticleSystem*>              FragmentDestroyEffects;                           		// 0x01D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              FragmentDestroyEffectScale;                       		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentHealthScale;                              		// 0x01E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMinHealth;                                		// 0x01EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentMaxHealth;                                		// 0x01F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUniformFragmentHealth : 1;                       		// 0x01F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChunkLinVel;                                      		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkAngVel;                                      		// 0x01FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkLinHorizontalScale;                          		// 0x0200 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionVelScale;                                		// 0x0204 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;              		// 0x0208 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFixIsolatedChunks : 1;                           		// 0x020C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpawnPhysicsChunks : 1;                          		// 0x0210 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	float                                              ChanceOfPhysicsChunk;                             		// 0x0214 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionChanceOfPhysicsChunk;                    		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMin;                       		// 0x021C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalPhysicsChunkScaleMax;                       		// 0x0220 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMin;                    		// 0x0224 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionPhysicsChunkScaleMax;                    		// 0x0228 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinConnectionSupportArea;                         		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DynamicOutsideMaterial;                           		// 0x0230 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                         		// 0x0238 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                OutsideMaterialIndex;                             		// 0x0240 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UnknownData02[ 0x2C ];                            		// 0x0244 (0x002C) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleSystem
// 0x00EB (0x014B - 0x0060)
class UParticleSystem : public UObject
{
public:
	struct FBioRwBox                                   FixedRelativeBoundingBox;                         		// 0x0060 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	struct TArray<class UParticleEmitter*>             Emitters;                                         		// 0x0090 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<float>                               LODDistances;                                     		// 0x00A0 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct TArray<struct FParticleSystemLOD>           LODSettings;                                      		// 0x00B0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FLODSoloTrack>                SoloTracking;                                     		// 0x00C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FBox                                        CustomOcclusionBounds;                            		// 0x00D0 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x00EC (0x000C) [0x0000000000000000]              
	struct FVector                                     MacroUVPosition;                                  		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    PreviewComponent;                                 		// 0x0104 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x010C (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	float                                              UpdateTime_FPS;                                   		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UpdateTime_Delta;                                 		// 0x0118 (0x0004) [0x0000000000000000]              
	float                                              WarmupTime;                                       		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThumbnailDistance;                                		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              ThumbnailWarmup;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODDistanceCheckTime;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LODDistanceMultiplayerBias;                       		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EditorLODSetting;                                 		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              SecondsBeforeInactive;                            		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Delay;                                            		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayLow;                                         		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MacroUVRadius;                                    		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOrientZAxisTowardCamera : 1;                     		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRegenerateLODDuplicate : 1;                      		// 0x0144 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0144 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      BioLockLowestLODToHighest : 1;                    		// 0x0144 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShouldResetPeakCounts : 1;                       		// 0x0144 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bHasPhysics : 1;                                  		// 0x0144 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bBioDependsOnPhysics : 1;                         		// 0x0144 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bUseRealtimeThumbnail : 1;                        		// 0x0144 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0144 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x0144 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bUseDelayRange : 1;                               		// 0x0144 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned char                                      SystemUpdateMode;                                 		// 0x0148 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODMethod;                                        		// 0x0149 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      OcclusionBoundsMethod;                            		// 0x014A (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMaxLifespan ( float InComponentDelay );
	bool SetLODDistance ( int LODLevelIndex, float InDistance );
	void SetCurrentLODMethod ( unsigned char InMethod );
	float GetLODDistance ( int LODLevelIndex );
	int GetLODLevelCount ( );
	unsigned char GetCurrentLODMethod ( );
};

// Class Engine.RvrEffectsMaterialUser
// 0x003C (0x00E0 - 0x00A4)
class URvrEffectsMaterialUser : public UMaterialInterface
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x00A4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FGuid>                        m_lstParentGuids;                                 		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          m_pBaseMaterial;                                  		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URvrEffectsMaterialGroup*                    m_pEffectsGroup;                                  		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URvrMaterialMultiplexor*                     m_pMultiplexor;                                   		// 0x00CC (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UMaterialInterface*                          m_pParentMaterial;                                		// 0x00D4 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x00DC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      m_bSupportsStaticMeshes : 1;                      		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RvrMaterialMultiplexor
// 0x0034 (0x00D8 - 0x00A4)
class URvrMaterialMultiplexor : public UMaterialInterface
{
public:
	struct FPointer                                    DefaultMaterialInstances[ 0x2 ];                  		// 0x00A4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FRvrMultiplexorEntry>         m_lstParents;                                     		// 0x00B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmParentNameParameter;                          		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          m_pDefaultMaterial;                               		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x00D4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Texture
// 0x0060 (0x00C0 - 0x0060)
class UTexture : public USurface
{
public:
	struct FPointer                                    Resource;                                         		// 0x0060 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              UnpackMin[ 0x4 ];                                 		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              UnpackMax[ 0x4 ];                                 		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBias;                                          		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CachedCombinedLODBias;                            		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumCinematicMipLevels;                            		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustBrightness;                                 		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustBrightnessCurve;                            		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustVibrance;                                   		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustSaturation;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustRGBCurve;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AdjustHue;                                        		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InternalFormatLODBias;                            		// 0x00AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OneBitAlphaThreshold;                             		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FFadeMipMapChannelsContainer                FadeMipMapChannels;                               		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      SRGB : 1;                                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RGBE : 1;                                         		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsSourceArtUncompressed : 1;                     		// 0x00B8 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      CompressionNoAlpha : 1;                           		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      CompressionNone : 1;                              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      CompressionNoMipmaps : 1;                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      CompressionFullDynamicRange : 1;                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      DeferCompression : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      NeverStream : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDitherMipMapAlpha : 1;                           		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bPreserveBorderR : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bPreserveBorderG : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bPreserveBorderB : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bPreserveBorderA : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bNoTiling : 1;                                    		// 0x00B8 (0x0004) [0x0000000000000002] [0x00004000] ( CPF_Const )
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;          		// 0x00B8 (0x0004) [0x0000000000002002] [0x00008000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseCinematicMipLevels : 1;                       		// 0x00B8 (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      AS16 : 1;                                         		// 0x00B8 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned char                                      CompressionSettings;                              		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Filter;                                           		// 0x00BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LODGroup;                                         		// 0x00BE (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MipGenSettings;                                   		// 0x00BF (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Texture2D
// 0x00B3 (0x0173 - 0x00C0)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                             		// 0x00C0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<unsigned char>                       SystemMemoryData;                                 		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    ResourceMem;                                      		// 0x00E0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       TextureFileCacheGuid;                             		// 0x00E8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FGuid                                       TFCFileGuid;                                      		// 0x00F8 (0x0010) [0x0000000000000000]              
	struct FGuid                                       TFCFileGuidHiRes;                                 		// 0x0108 (0x0010) [0x0000000000000000]              
	struct FName                                       TextureFileCacheName;                             		// 0x0118 (0x0008) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x0120 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeX;                                    		// 0x0128 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                OriginalSizeY;                                    		// 0x012C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ForceMiplevelsToBeResident;                       		// 0x0130 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ForceMipLevelsToBeResidentTimestamp;              		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HiResMipCount;                                    		// 0x0138 (0x0004) [0x0000000000000000]              
	int                                                RequestedMips;                                    		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResidentMips;                                     		// 0x0140 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                    		// 0x0144 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                MipTailBaseIdx;                                   		// 0x0148 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                FirstResourceMemMip;                              		// 0x014C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                BioMipMapCompressionSetting;                      		// 0x0150 (0x0004) [0x0000000000001000]              ( CPF_Native )
	float                                              CurrentScreenSize;                                		// 0x0154 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentDistanceFromCameraSq;                      		// 0x0158 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentScreenSizeOld;                             		// 0x015C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentDistanceFromCameraSqOld;                   		// 0x0160 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                StreamingLinkIndex;                               		// 0x0164 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              Timer;                                            		// 0x0168 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bIsStreamable : 1;                                		// 0x016C (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasCancelationPending : 1;                       		// 0x016C (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;          		// 0x016C (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;            		// 0x016C (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bConfigForceMiplevelsToBeResident : 1;            		// 0x016C (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned char                                      Format;                                           		// 0x0170 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x0171 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x0172 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UTexture2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat );
	void SetForceMipLevelsToBeResident ( float Seconds, int CinematicTextureGroups );
};

// Class Engine.LightMapTexture2D
// 0x0005 (0x0178 - 0x0173)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[ 0x5 ];                             		// 0x0173 (0x0005) MISSED OFFSET

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ShadowMapTexture2D
// 0x0005 (0x0178 - 0x0173)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int                                                ShadowmapFlags;                                   		// 0x0174 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WaveFormBase
// 0x0008 (0x0068 - 0x0060)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                      		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.World
// 0x0338 (0x0398 - 0x0060)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[ 0x338 ];                           		// 0x0060 (0x0338) MISSED OFFSET

	// Document offsets noted in Ghidra here

	// 0x2D8 = DominantDirectionalLight (UDominantDirectionalLightComponent*)

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.WwiseBaseSoundObject
// 0x0000 (0x0060 - 0x0060)
class UWwiseBaseSoundObject : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundCue
// 0x0098 (0x00F8 - 0x0060)
class USoundCue : public UWwiseBaseSoundObject
{
public:
	struct FString                                     FaceFXGroupName;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0080 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	struct FName                                       SoundClass;                                       		// 0x00C8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class USoundNode*                                  FirstNode;                                        		// 0x00D0 (0x0008) [0x0000000000000000]              
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAudibleDistance;                               		// 0x00E0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              VolumeMultiplier;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                MaxConcurrentPlayCount;                           		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentPlayCount;                                 		// 0x00F4 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetCueDuration ( );
};

// Class Engine.EnvironmentVolume
// 0x0014 (0x02C8 - 0x02B4)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x02B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x02BC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bSplitNavMesh : 1;                                		// 0x02C4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetSplitNavMesh ( unsigned long bNewValue );
};

// Class Engine.TestSplittingVolume
// 0x0008 (0x02BC - 0x02B4)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x02B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AIController
// 0x0026 (0x04A8 - 0x0482)
class AAIController : public AController
{
public:
	class AActor*                                      ScriptedMoveTarget;                               		// 0x0484 (0x0008) [0x0000000000000000]              
	class ARoute*                                      ScriptedRoute;                                    		// 0x048C (0x0008) [0x0000000000000000]              
	class AActor*                                      ScriptedFocus;                                    		// 0x0494 (0x0008) [0x0000000000000000]              
	float                                              Skill;                                            		// 0x049C (0x0004) [0x0000000000000000]              
	int                                                ScriptedRouteIndex;                               		// 0x04A0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAdjustFromWalls : 1;                             		// 0x04A4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bReverseScriptedRoute : 1;                        		// 0x04A4 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanFireWeapon ( class AWeapon* Wpn, unsigned char FireModeNum );
	bool ShouldRefire ( );
	void NotifyWeaponFinishedFiring ( class AWeapon* W, unsigned char FireMode );
	void NotifyWeaponFired ( class AWeapon* W, unsigned char FireMode );
	void OnAIMoveToActor ( class USeqAct_AIMoveToActor* Action );
	void eventGetPlayerViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	void eventSetTeam ( int inTeamIdx );
	bool PriorityObjective ( );
	struct FName GetOrders ( );
	class AActor* GetOrderObject ( );
	void SetOrders ( struct FName NewOrders, class AController* OrderGiver );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void Reset ( );
	void eventPreBeginPlay ( );
};

// Class Engine.CrowdAgentBase
// 0x000A (0x0278 - 0x026E)
class ACrowdAgentBase : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;              		// 0x0270 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotifyPathChanged ( );
};

// Class Engine.CrowdPopulationManagerBase
// 0x0002 (0x0270 - 0x026E)
class ACrowdPopulationManagerBase : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PathTargetPoint
// 0x0000 (0x0270 - 0x0270)
class APathTargetPoint : public AKeypoint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NavMeshObstacle
// 0x000E (0x027C - 0x026E)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;           		// 0x0270 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bEnabled : 1;                                     		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPreserveInternalGeo : 1;                         		// 0x0278 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetEnabled ( unsigned long bInEnabled );
	void OnToggle ( class USeqAct_Toggle* Action );
	void PostBeginPlay ( );
	void UnRegisterObstacle ( );
	void RegisterObstacle ( );
};

// Class Engine.PylonSeed
// 0x000A (0x0278 - 0x026E)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;             		// 0x0270 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x0224 - 0x0224)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CoverMeshComponent
// 0x0034 (0x02D4 - 0x02A0)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	struct TArray<struct FCoverMeshes>                 Meshes;                                           		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     LocationOffset;                                   		// 0x02B0 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOn;                                     		// 0x02BC (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 AutoAdjustOff;                                    		// 0x02C4 (0x0008) [0x0000000000000000]              
	class UStaticMesh*                                 Disabled;                                         		// 0x02CC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x0224 - 0x0224)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PathRenderingComponent
// 0x0000 (0x0224 - 0x0224)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RouteRenderingComponent
// 0x0000 (0x0224 - 0x0224)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Interface_NavMeshPathObject
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Interface_NavMeshPathSwitch
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventAIActivateSwitch ( class AAIController* AI );
};

// Class Engine.Interface_NavMeshPathObstacle
// 0x0000 (0x0060 - 0x0060)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NavigationHandle
// 0x00B4 (0x0114 - 0x0060)
class UNavigationHandle : public UObject
{
public:
	struct FNavMeshPathParams                          CachedPathParams;                                 		// 0x0060 (0x0030) [0x0000000000000000]              
	struct FPathStore                                  PathCache;                                        		// 0x0090 (0x0010) [0x0000000000000000]              
	struct FPointer                                    AnchorPoly;                                       		// 0x00A0 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    BestUnfinishedPathPoint;                          		// 0x00A8 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    CurrentEdge;                                      		// 0x00B0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    SubGoal_DestPoly;                                 		// 0x00B8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FBasedPosition                              FinalDestination;                                 		// 0x00C0 (0x0038) [0x0000000000000000]              
	class APylon*                                      AnchorPylon;                                      		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UNavMeshPathConstraint*                      PathConstraintList;                               		// 0x0100 (0x0008) [0x0000000000000000]              
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                     		// 0x0108 (0x0008) [0x0000000000000000]              
	unsigned long                                      bSkipRouteCacheUpdates : 1;                       		// 0x0110 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUseORforEvaluateGoal : 1;                        		// 0x0110 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bDebugConstraintsAndGoalEvals : 1;                		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUltraVerbosePathDebugging : 1;                   		// 0x0110 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float CalculatePathDistance ( struct FVector FinalDest );
	struct FVector GetFirstMoveLocation ( );
	bool IsAnchorInescapable ( );
	void LimitPathCacheDistance ( float MaxDist );
	void GetValidPositionsForBox ( struct FVector pos, float Radius, struct FVector Extent, unsigned long bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, struct FVector ValidBoxAroundStartPos, struct TArray<struct FVector>* out_ValidPositions );
	void GetAllPolyCentersWithinBounds ( struct FVector pos, struct FVector Extent, struct TArray<struct FVector>* out_PolyCtrs );
	void DrawPathCache ( struct FVector DrawOffset, unsigned long bPersistent, struct FColor DrawColor );
	bool ActorReachable ( class AActor* A );
	bool PointReachable ( struct FVector Point );
	bool PointCheck ( struct FVector Pt, struct FVector Extent );
	bool LineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal );
	bool ObstaclePointCheck ( struct FVector Pt, struct FVector Extent );
	bool ObstacleLineCheck ( struct FVector Start, struct FVector End, struct FVector Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm );
	bool SuggestMovePreparation ( struct FVector MovePt, class AController* C );
	bool FindPath ( class AActor** out_DestActor, int* out_DestItem );
	bool ComputeValidFinalDestination ( struct FVector* out_ComputedPosition );
	bool SetFinalDestination ( struct FVector FinalDest );
	bool GetNextMoveLocation ( float ArrivalDistance, struct FVector* out_MoveDest );
	class APylon* GetPylonFromPos ( struct FVector Position );
	bool FindPylon ( );
	struct FVector GetBestUnfinishedPathPoint ( );
	void PathCache_RemoveIndex ( int InIdx, int Count );
	struct FVector PathCache_GetGoalPoint ( );
	void PathCache_Empty ( );
	int GetPathCacheLength ( );
	class UNavMeshPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UNavMeshPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	void AddGoalEvaluator ( class UNavMeshPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UNavMeshPathConstraint* Constraint );
	void ClearConstraints ( );
};

// Class Engine.NavMeshPathConstraint
// 0x0018 (0x0078 - 0x0060)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                NumNodesProcessed;                                		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NumThrownOutNodes;                                		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              AddedDirectCost;                                  		// 0x0070 (0x0004) [0x0000000000000000]              
	float                                              AddedHeuristicCost;                               		// 0x0074 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

// Class Engine.NavMeshPath_AlongLine
// 0x000C (0x0084 - 0x0078)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool AlongLine ( class UNavigationHandle* NavHandle, struct FVector Dir );
};

// Class Engine.NavMeshPath_EnforceTwoWayEdges
// 0x0000 (0x0078 - 0x0078)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool EnforceTwoWayEdges ( class UNavigationHandle* NavHandle );
};

// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType
// 0x0011 (0x0089 - 0x0078)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	struct FVector                                     InitLocation;                                     		// 0x0078 (0x000C) [0x0000000000000000]              
	float                                              MinDistBetweenEdgeTypes;                          		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned char                                      EdgeType;                                         		// 0x0088 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool EnforceMinDist ( class UNavigationHandle* NavHandle, float InMinDist, unsigned char InEdgeType, struct FVector LastLocation );
};

// Class Engine.NavMeshPath_Toward
// 0x0014 (0x008C - 0x0078)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                        		// 0x0078 (0x000C) [0x0000000000000000]              
	class AActor*                                      GoalActor;                                        		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool TowardPoint ( class UNavigationHandle* NavHandle, struct FVector Point );
	bool TowardGoal ( class UNavigationHandle* NavHandle, class AActor* Goal );
};

// Class Engine.NavMeshPath_WithinDistanceEnvelope
// 0x001C (0x0094 - 0x0078)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	struct FVector                                     EnvelopeTestPoint;                                		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class UNavigationHandle* NavHandle, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};

// Class Engine.NavMeshPath_WithinTraversalDist
// 0x000C (0x0084 - 0x0078)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool DontExceedMaxDist ( class UNavigationHandle* NavHandle, float InMaxTraversalDist, unsigned long bInSoft );
};

// Class Engine.NavMeshPathGoalEvaluator
// 0x0018 (0x0078 - 0x0060)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                MaxPathVisits;                                    		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                NumNodesThrownOut;                                		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                NumNodesProcessed;                                		// 0x0070 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAlwaysCallEvaluateGoal : 1;                      		// 0x0074 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

// Class Engine.NavMeshGoal_At
// 0x0024 (0x009C - 0x0078)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    GoalPoly;                                         		// 0x0078 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PartialGoal;                                      		// 0x0080 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FVector                                     Goal;                                             		// 0x0088 (0x000C) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0094 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0098 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool AtLocation ( class UNavigationHandle* NavHandle, struct FVector GoalLocation, float Dist, unsigned long bReturnPartial );
	bool AtActor ( class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, unsigned long bReturnPartial );
	void RecycleNative ( );
};

// Class Engine.NavMeshGoal_ClosestActorInList
// 0x0060 (0x00D8 - 0x0078)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                               		// 0x0078 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FBiasedGoalActor>             GoalList;                                         		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    CachedAnchorPoly;                                 		// 0x00D0 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RecycleInternal ( );
	void eventRecycle ( );
	class UNavMeshGoal_ClosestActorInList* ClosestActorInList ( class UNavigationHandle* NavHandle, struct TArray<struct FBiasedGoalActor>* InGoalList );
};

// Class Engine.NavMeshGoal_Null
// 0x0008 (0x0080 - 0x0078)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                      		// 0x0078 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	void RecycleNative ( );
	bool GoUntilBust ( class UNavigationHandle* NavHandle, int InMaxPathVisits );
};

// Class Engine.NavMeshGoal_PolyEncompassesAI
// 0x0000 (0x0078 - 0x0078)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool MakeSureAIFits ( class UNavigationHandle* NavHandle );
};

// Class Engine.PathConstraint
// 0x000C (0x006C - 0x0060)
class UPathConstraint : public UObject
{
public:
	class UPathConstraint*                             NextConstraint;                                   		// 0x0060 (0x0008) [0x0000000000000000]              
	int                                                CacheIdx;                                         		// 0x0068 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

// Class Engine.Path_AlongLine
// 0x000C (0x0078 - 0x006C)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                        		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool AlongLine ( class APawn* P, struct FVector Dir );
};

// Class Engine.Path_AvoidInEscapableNodes
// 0x0010 (0x007C - 0x006C)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int                                                Radius;                                           		// 0x006C (0x0004) [0x0000000000000000]              
	int                                                Height;                                           		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                MaxFallSpeed;                                     		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                MoveFlags;                                        		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool DontGetStuck ( class APawn* P );
	void CachePawnReacFlags ( class APawn* P );
};

// Class Engine.Path_MinDistBetweenSpecsOfType
// 0x0018 (0x0084 - 0x006C)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	class UClass*                                      ReachSpecClass;                                   		// 0x006C (0x0008) [0x0000000000000000]              
	struct FVector                                     InitLocation;                                     		// 0x0074 (0x000C) [0x0000000000000000]              
	float                                              MinDistBetweenSpecTypes;                          		// 0x0080 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool EnforceMinDist ( class APawn* P, float InMinDist, class UClass* InSpecClass, struct FVector LastLocation );
};

// Class Engine.Path_TowardGoal
// 0x0008 (0x0074 - 0x006C)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                        		// 0x006C (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool TowardGoal ( class APawn* P, class AActor* Goal );
};

// Class Engine.Path_TowardPoint
// 0x000C (0x0078 - 0x006C)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                        		// 0x006C (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool TowardPoint ( class APawn* P, struct FVector Point );
};

// Class Engine.Path_WithinDistanceEnvelope
// 0x001C (0x0088 - 0x006C)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	struct FVector                                     EnvelopeTestPoint;                                		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDistance;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDistance;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool StayWithinEnvelopeToLoc ( class APawn* P, struct FVector InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, unsigned long bInSoft, float InSoftStartPenalty, unsigned long bOnlyTossOutSpecsThatLeave );
};

// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0078 - 0x006C)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                 		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoftStartPenalty;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoft : 1;                                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool DontExceedMaxDist ( class APawn* P, float InMaxTraversalDist, unsigned long bInSoft );
};

// Class Engine.PathGoalEvaluator
// 0x001C (0x007C - 0x0060)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                    		// 0x0060 (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            GeneratedGoal;                                    		// 0x0068 (0x0008) [0x0000000000000000]              
	int                                                MaxPathVisits;                                    		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                CacheIdx;                                         		// 0x0074 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      AllowStartNodeToBeGoal : 1;                       		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDumpString ( );
	void eventRecycle ( );
};

// Class Engine.Goal_AtActor
// 0x0010 (0x008C - 0x007C)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                        		// 0x007C (0x0008) [0x0000000000000000]              
	float                                              GoalDist;                                         		// 0x0084 (0x0004) [0x0000000000000000]              
	unsigned long                                      bKeepPartial : 1;                                 		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool AtActor ( class APawn* P, class AActor* Goal, float Dist, unsigned long bReturnPartial );
};

// Class Engine.Goal_Null
// 0x0000 (0x007C - 0x007C)
class UGoal_Null : public UPathGoalEvaluator
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Recycle ( );
	bool GoUntilBust ( class APawn* P, int InMaxPathVisits );
};

// Class Engine.SkeletalMeshActor
// 0x0056 (0x02C4 - 0x026E)
class ASkeletalMeshActor : public AActor
{
public:
	struct TArray<struct FSkelMeshActorControlTarget>  ControlTargets;                                   		// 0x0270 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UInterpGroup*>                 InterpGroupList;                                  		// 0x0280 (0x0010) [0x1000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0290 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0298 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x02A0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x02A8 (0x0008) [0x0000000100002020]              ( CPF_Net | CPF_Transient | CPF_RepNotify )
	class UMaterialInterface*                          ReplicatedMaterial;                               		// 0x02B0 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class AActor*                                      AimTarget;                                        		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCheckpointSaveRotation : 1;                      		// 0x02C0 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShouldDoAnimNotifies : 1;                        		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMeshComponent* GetHeadSkelMeshComponent ( );
	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	void SkelMeshActorOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void ApplyCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASkeletalMeshActor_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventOnSetSkelControlTarget ( class USeqAct_SetSkelControlTarget* Action );
	void eventOnUpdatePhysBonesFromAnim ( class USeqAct_UpdatePhysBonesFromAnim* Action );
	void eventOnSetMesh ( class USeqAct_SetMesh* Action );
	bool IsActorPlayingFaceFXAnim ( );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void UpdateAnimSetList ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void OnSetAimTarget ( class USFXSeqAct_SetAimTarget* inAction );
};

// Class Engine.SkeletalMeshActorBasedOnExtremeContent
// 0x0020 (0x02E4 - 0x02C4)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	struct TArray<struct FSkelMaterialSetterDatum>     ExtremeContent;                                   		// 0x02C4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FSkelMaterialSetterDatum>     NonExtremeContent;                                		// 0x02D4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMaterialBasedOnExtremeContent ( );
	void eventPostBeginPlay ( );
};

// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x02C4 - 0x02C4)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkeletalMeshCinematicActor
// 0x0000 (0x02C4 - 0x02C4)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkeletalMeshActorMAT
// 0x0010 (0x02D4 - 0x02C4)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	struct TArray<class UAnimNodeSlot*>                SlotNodes;                                        		// 0x02C4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventDestroyed ( );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos );
};

// Class Engine.AnimationCompressionAlgorithm
// 0x0016 (0x0076 - 0x0060)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                      		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsSkeleton : 1;                               		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      TranslationCompressionFormat;                     		// 0x0074 (0x0001) [0x0000000000000000]              
	unsigned char                                      RotationCompressionFormat;                        		// 0x0075 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0002 (0x0078 - 0x0076)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x0080 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	int                                                MinKeys;                                          		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartAtSecondKey : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys
// 0x001A (0x0090 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxEffectorDiff;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinEffectorDiff;                                  		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParentKeyScale;                                   		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRetarget : 1;                                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x0080 - 0x0076)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	float                                              MaxPosDiff;                                       		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleDiff;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0002 (0x0078 - 0x0076)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimMetaData
// 0x0000 (0x0060 - 0x0060)
class UAnimMetaData : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimMetaData_SkelControl
// 0x0014 (0x0074 - 0x0060)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	struct TArray<struct FName>                        SkelControlNameList;                              		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bFullControlOverController : 1;                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimMetaData_SkelControlKeyFrame
// 0x0010 (0x0084 - 0x0074)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	struct TArray<struct FTimeModifier>                KeyFrames;                                        		// 0x0074 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify
// 0x0000 (0x0060 - 0x0060)
class UAnimNotify : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool FindNextNotifyOfClass ( class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent );
};

// Class Engine.AnimNotify_CameraEffect
// 0x0008 (0x0068 - 0x0060)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                                 		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0064 - 0x0060)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                         		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Kismet
// 0x0008 (0x0068 - 0x0060)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_PlayParticleEffect
// 0x001C (0x007C - 0x0060)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                       		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAttach : 1;                                      		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x0078 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Rumble
// 0x0018 (0x0078 - 0x0060)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                               		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      WaveForm;                                         		// 0x0068 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	float                                              EffectRadius;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForBasedPlayer : 1;                         		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Script
// 0x0018 (0x0078 - 0x0060)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyTickName;                                   		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NotifyEndName;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0060 - 0x0060)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

// Class Engine.AnimNotify_ViewShake
// 0x0054 (0x00B4 - 0x0060)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	struct FVector                                     RotAmplitude;                                     		// 0x0060 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     RotFrequency;                                     		// 0x006C (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocAmplitude;                                     		// 0x0078 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FVector                                     LocFrequency;                                     		// 0x0084 (0x000C) [0x0000000000020000]              ( CPF_EditConst )
	struct FName                                       BoneName;                                         		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraShake*                                ShakeParams;                                      		// 0x0098 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              Duration;                                         		// 0x00A0 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVAmplitude;                                     		// 0x00A4 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	float                                              FOVFrequency;                                     		// 0x00A8 (0x0004) [0x0000000000020000]              ( CPF_EditConst )
	float                                              ShakeRadius;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseBoneLocation : 1;                             		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

// Class Engine.AnimNotify_Sound
// 0x0018 (0x0078 - 0x0060)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                         		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PercentToPlay;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFollowActor : 1;                                 		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreIfActorHidden : 1;                         		// 0x0074 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNotify_Trails
// 0x0050 (0x00B0 - 0x0060)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	struct TArray<struct FTrailSample>                 TrailSampledData;                                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UParticleSystem*                             PSTemplate;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FirstEdgeSocketName;                              		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SecondEdgeSocketName;                             		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ControlPointSocketName;                           		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeSequence*                           AnimNodeSeq;                                      		// 0x0090 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastStartTime;                                    		// 0x0098 (0x0004) [0x0000000000000000]              
	float                                              EndTime;                                          		// 0x009C (0x0004) [0x0000000000000000]              
	float                                              SamplesPerSecond;                                 		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TimeStep;                                         		// 0x00A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bIsExtremeContent : 1;                            		// 0x00AC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                         		// 0x00AC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bResampleRequired : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetNumSteps ( int InLastTrailIndex );
};

// Class Engine.AnimObject
// 0x0008 (0x0068 - 0x0060)
class UAnimObject : public UObject
{
public:
	class USkeletalMeshComponent*                      SkelComponent;                                    		// 0x0060 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNode
// 0x007D (0x00E5 - 0x0068)
class UAnimNode : public UAnimObject
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                            		// 0x0070 (0x0020) [0x0000000000002000]              ( CPF_Transient )
	struct TArray<class UAnimNodeBlendBase*>           ParentNodes;                                      		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBoneAtom>                    CachedBoneAtoms;                                  		// 0x00A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCurveKey>                    CachedCurveKeys;                                  		// 0x00B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       NodeName;                                         		// 0x00C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NodeTickTag;                                      		// 0x00C8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NodeCachedAtomsTag;                               		// 0x00CC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeTotalWeight;                                  		// 0x00D0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SkelCompIndex;                                    		// 0x00D4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bCachedHasRootMotion;                             		// 0x00D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x00DC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bRelevant : 1;                                    		// 0x00E0 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bJustBecameRelevant : 1;                          		// 0x00E0 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSkipTickWhenZeroWeight : 1;                      		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTickDuringPausedAnims : 1;                       		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      CachedNumDesiredBones;                            		// 0x00E4 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	void eventOnCeaseRelevant ( );
	void eventOnBecomeRelevant ( );
	void eventOnInit ( );
};

// Class Engine.AnimNodeBlendBase
// 0x0018 (0x00FD - 0x00E5)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	struct TArray<struct FAnimBlendChild>              Children;                                         		// 0x00E8 (0x0010) [0x0000000004400048]              ( CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	unsigned long                                      bFixNumChildren : 1;                              		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      BlendTypeAlpha;                                   		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float Rate, float StartTime );
};

// Class Engine.AnimNode_MultiBlendPerBone
// 0x001C (0x0119 - 0x00FD)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	struct TArray<struct FPerBoneMaskInfo>             MaskList;                                         		// 0x0100 (0x0010) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class APawn*                                       PawnOwner;                                        		// 0x0110 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      RotationBlendType;                                		// 0x0118 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMaskWeight ( int MaskIndex, float DesiredWeight, float BlendTime );
};

// Class Engine.AnimNodeAimOffset
// 0x0068 (0x0165 - 0x00FD)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	struct TArray<unsigned char>                       RequiredBones;                                    		// 0x0100 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       AimCpntBoneIndex;                                 		// 0x0110 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       AimCpntIndexLUT;                                  		// 0x0120 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FAimOffsetProfile>            Profiles;                                         		// 0x0130 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FVector2D                                   Aim;                                              		// 0x0140 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x0148 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UAnimNodeAimOffset*                          TemplateNode;                                     		// 0x0150 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                PassThroughAtOrAboveLOD;                          		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentProfileIndex;                              		// 0x015C (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bForceAimDir : 1;                                 		// 0x0160 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBakeFromAnimations : 1;                          		// 0x0160 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x0160 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x0160 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      ForcedAimDir;                                     		// 0x0164 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetActiveProfileByIndex ( int ProfileIndex );
	void SetActiveProfileByName ( struct FName ProfileName );
};

// Class Engine.AnimNodeBlend
// 0x0013 (0x0110 - 0x00FD)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	float                                              Child2Weight;                                     		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              Child2WeightTarget;                               		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x0108 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetBlendTarget ( float BlendTarget, float BlendTime );
};

// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x0114 - 0x0110)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                  		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendPerBone
// 0x0034 (0x0144 - 0x0110)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	struct TArray<struct FName>                        BranchStartBoneName;                              		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<float>                               Child2PerBoneWeight;                              		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<unsigned char>                       LocalToCompReqBones;                              		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bForceLocalSpaceBlend : 1;                        		// 0x0140 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeCrossfader
// 0x0010 (0x0120 - 0x0110)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                               		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PendingBlendOutTimeOneShot;                       		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bDontBlendOutOneShot : 1;                         		// 0x011C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UAnimNodeSequence* GetActiveChild ( );
	struct FName GetAnimName ( );
	void BlendToLoopingAnim ( struct FName AnimSeqName, float BlendInTime, float Rate );
	void PlayOneShotAnim ( struct FName AnimSeqName, float BlendInTime, float BlendOutTime, unsigned long bDontBlendOut, float Rate );
};

// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x0118 - 0x0110)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	float                                              CustomPendingBlendOutTime;                        		// 0x0110 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0114 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	void PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
};

// Class Engine.AnimNodeBlendDirectional
// 0x001B (0x0118 - 0x00FD)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	struct FRotator                                    RotationOffset;                                   		// 0x0100 (0x000C) [0x0000000000000000]              
	float                                              DirDegreesPerSecond;                              		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DirAngle;                                         		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                SingleAnimAtOrAboveLOD;                           		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendList
// 0x001F (0x011C - 0x00FD)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	struct TArray<float>                               TargetWeight;                                     		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              BlendTimeToGo;                                    		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                ActiveChildIndex;                                 		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPlayActiveChild : 1;                             		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;    		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetActiveChild ( int ChildIndex, float BlendTime );
};

// Class Engine.AnimNodeBlendByBase
// 0x001D (0x0139 - 0x011C)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	class UClass*                                      ActorClass;                                       		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ActorTag;                                         		// 0x0124 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      CachedBase;                                       		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Type;                                             		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x011C - 0x011C)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x011C - 0x011C)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendByProperty
// 0x0038 (0x0154 - 0x011C)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	struct FName                                       PropertyName;                                     		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       CachedPropertyName;                               		// 0x0124 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UProperty*                                   CachedProperty;                                   		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class AActor*                                      CachedOwner;                                      		// 0x0134 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendTime;                                        		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMin;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatPropMax;                                     		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild1Time;                                		// 0x0148 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendToChild2Time;                                		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseOwnersBase : 1;                               		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSpecificBlendTimes : 1;                       		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSynchronizeNodesInEditor : 1;                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendBySpeed
// 0x0034 (0x0150 - 0x011C)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	struct TArray<float>                               Constraints;                                      		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Speed;                                            		// 0x012C (0x0004) [0x0000000000000000]              
	int                                                LastChannel;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              BlendUpTime;                                      		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownTime;                                    		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownPerc;                                    		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendUpDelay;                                     		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDownDelay;                                   		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendDelayRemaining;                              		// 0x0148 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUseAcceleration : 1;                             		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeRandom
// 0x001C (0x0138 - 0x011C)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	struct TArray<struct FRandomAnimInfo>              RandomInfo;                                       		// 0x011C (0x0010) [0x0000000004400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )
	class UAnimNodeSequence*                           PlayingSeqNode;                                   		// 0x012C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                PendingChildIndex;                                		// 0x0134 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeBlendMultiBone
// 0x0023 (0x0120 - 0x00FD)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	struct TArray<struct FChildBoneBlendInfo>          BlendTargetList;                                  		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       SourceRequiredBones;                              		// 0x0110 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetTargetStartBone ( int TargetIdx, struct FName StartBoneName, float PerBoneIncrease );
};

// Class Engine.AnimNodeMirror
// 0x0007 (0x0104 - 0x00FD)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned long                                      bEnableMirroring : 1;                             		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x0104 - 0x00FD)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	float                                              ScaleByValue;                                     		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x0108 - 0x0104)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                        		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeSlot
// 0x002F (0x012C - 0x00FD)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	struct TArray<float>                               TargetWeight;                                     		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UAnimNodeSynch*                              SynchNode;                                        		// 0x0110 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              PendingBlendOutTime;                              		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                CustomChildIndex;                                 		// 0x011C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TargetChildIndex;                                 		// 0x0120 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BlendTimeToGo;                                    		// 0x0124 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bIsPlayingCustomAnim : 1;                         		// 0x0128 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bEarlyAnimEndNotify : 1;                          		// 0x0128 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                    		// 0x0128 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAdditiveAnimationsOverrideSource : 1;            		// 0x0128 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AddToSynchGroup ( struct FName GroupName );
	void AccelerateBlend ( float BlendAmount );
	void SetRootBoneRotationOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	void SetRootBoneAxisOption ( unsigned char AxisX, unsigned char AxisY, unsigned char AxisZ );
	class UAnimNodeSequence* GetCustomAnimNodeSeq ( );
	void SetActorAnimEndNotification ( unsigned long bNewStatus );
	void SetCustomAnim ( struct FName AnimName );
	void StopCustomAnim ( float BlendOutTime );
	struct FName GetPlayedAnimation ( );
	bool PlayCustomAnimByDuration ( struct FName AnimName, float Duration, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride );
	float PlayCustomAnim ( struct FName AnimName, float Rate, float BlendInTime, float BlendOutTime, unsigned long bLooping, unsigned long bOverride, float StartTime );
};

// Class Engine.AnimNodeSynch
// 0x0013 (0x0110 - 0x00FD)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	struct TArray<struct FSynchGroup>                  Groups;                                           		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetRelativePosition ( struct FName GroupName );
	void ForceRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetMasterNodeOfGroup ( struct FName GroupName );
	void RemoveNodeFromGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
	void AddNodeToGroup ( class UAnimNodeSequence* SeqNode, struct FName GroupName );
};

// Class Engine.AnimTree
// 0x0067 (0x0164 - 0x00FD)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	struct TArray<struct FAnimGroup>                   AnimGroups;                                       		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        ComposePrePassBoneNames;                          		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        ComposePostPassBoneNames;                         		// 0x0120 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UMorphNodeBase*>               RootMorphNodes;                                   		// 0x0130 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FSkelControlListHead>         SkelControlLists;                                 		// 0x0140 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FBoneAtom>                    SavedPose;                                        		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bUseSavedPose : 1;                                		// 0x0160 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetGroupIndex ( struct FName GroupName );
	float GetGroupRateScale ( struct FName GroupName );
	void SetGroupRateScale ( struct FName GroupName, float NewRateScale );
	float GetGroupRelativePosition ( struct FName GroupName );
	void ForceGroupRelativePosition ( struct FName GroupName, float RelativePosition );
	class UAnimNodeSequence* GetGroupNotifyMaster ( struct FName GroupName );
	class UAnimNodeSequence* GetGroupSynchMaster ( struct FName GroupName );
	bool SetAnimGroupForNode ( class UAnimNodeSequence* SeqNode, struct FName GroupName, unsigned long bCreateIfNotFound );
	void SetUseSavedPose ( unsigned long bUseSaved );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
};

// Class Engine.AnimNodeSequence
// 0x0055 (0x013A - 0x00E5)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                      		// 0x00E8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimSequence*                               AnimSeq;                                          		// 0x00F0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       SynchGroupName;                                   		// 0x00F8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UCameraAnim*                                 CameraAnim;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                         		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Rate;                                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentTime;                                      		// 0x0114 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              PreviousTime;                                     		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                AnimLinkupIndex;                                  		// 0x011C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NotifyWeightThreshold;                            		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SynchPosOffset;                                   		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimScale;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraAnimPlayRate;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPlaying : 1;                                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimEnd : 1;                           		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCauseActorAnimPlay : 1;                          		// 0x0130 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bZeroRootRotation : 1;                            		// 0x0130 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bZeroRootTranslation : 1;                         		// 0x0130 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x0130 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bHasWeightIgnoreNotifies : 1;                     		// 0x0130 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bNoNotifies : 1;                                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                  		// 0x0130 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bIsIssuingNotifies : 1;                           		// 0x0130 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bForceAlwaysSlave : 1;                            		// 0x0130 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bSynchronize : 1;                                 		// 0x0130 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bReverseSync : 1;                                 		// 0x0130 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bShowTimeLineSlider : 1;                          		// 0x0130 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bLoopCameraAnim : 1;                              		// 0x0130 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;            		// 0x0130 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;     		// 0x0130 (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned char                                      RootBoneOption[ 0x3 ];                            		// 0x0134 (0x0003) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RootRotationOption[ 0x3 ];                        		// 0x0137 (0x0003) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetTimeLeft ( );
	float GetAnimPlaybackLength ( );
	float GetGlobalPlayRate ( );
	float GetGroupRelativePosition ( );
	float FindGroupPosition ( float GroupRelativePosition );
	float FindGroupRelativePosition ( float GroupRelativePosition );
	float GetNormalizedPosition ( );
	void SetPosition ( float NewTime, unsigned long bFireNotifies );
	void ReplayAnim ( );
	void StopAnim ( );
	void PlayAnim ( unsigned long bLoop, float InRate, float StartTime );
	void SetAnim ( struct FName Sequence );
};

// Class Engine.AnimNodeSequenceBlendBase
// 0x0012 (0x014C - 0x013A)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	struct TArray<struct FAnimBlendInfo>               Anims;                                            		// 0x013C (0x0010) [0x0000000004400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x01BC - 0x014C)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                              		// 0x014C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   PreviousAim;                                      		// 0x0154 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector2D                                   HorizontalRange;                                  		// 0x015C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   VerticalRange;                                    		// 0x0164 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   AngleOffset;                                      		// 0x016C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LU;                                      		// 0x0174 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LC;                                      		// 0x017C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_LD;                                      		// 0x0184 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CU;                                      		// 0x018C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CC;                                      		// 0x0194 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_CD;                                      		// 0x019C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RU;                                      		// 0x01A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RC;                                      		// 0x01AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AnimName_RD;                                      		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void CheckAnimsUpToDate ( );
};

// Class Engine.MorphNodeBase
// 0x000C (0x0074 - 0x0068)
class UMorphNodeBase : public UAnimObject
{
public:
	struct FName                                       NodeName;                                         		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDrawSlider : 1;                                  		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MorphNodeMultiPose
// 0x0030 (0x00A4 - 0x0074)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	struct TArray<class UMorphTarget*>                 Targets;                                          		// 0x0074 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        MorphNames;                                       		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<float>                               Weights;                                          		// 0x0094 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UpdateMorphTarget ( class UMorphTarget* Target, float InWeight );
	void RemoveMorphTarget ( struct FName MorphTargetName );
	bool AddMorphTarget ( struct FName MorphTargetName, float InWeight );
};

// Class Engine.MorphNodePose
// 0x0014 (0x0088 - 0x0074)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                           		// 0x0074 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       MorphName;                                        		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Weight;                                           		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMorphTarget ( struct FName MorphTargetName );
};

// Class Engine.MorphNodeWeightBase
// 0x0010 (0x0084 - 0x0074)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	struct TArray<struct FMorphNodeConn>               NodeConns;                                        		// 0x0074 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MorphNodeWeight
// 0x0004 (0x0088 - 0x0084)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                       		// 0x0084 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetNodeWeight ( float NewWeight );
};

// Class Engine.MorphNodeWeightByBoneAngle
// 0x0042 (0x00C6 - 0x0084)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	struct TArray<struct FBoneAngleMorph>              WeightArray;                                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BaseBoneName;                                     		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AngleBoneName;                                    		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x00AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Angle;                                            		// 0x00B4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x00B8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MaterialSlotId;                                   		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBaseBoneAxis : 1;                          		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertAngleBoneAxis : 1;                         		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      BaseBoneAxis;                                     		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AngleBoneAxis;                                    		// 0x00C5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MorphNodeWeightByBoneRotation
// 0x0039 (0x00BD - 0x0084)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	struct TArray<struct FBoneAngleMorph>              WeightArray;                                      		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       BoneName;                                         		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x00A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Angle;                                            		// 0x00AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              NodeWeight;                                       		// 0x00B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                MaterialSlotId;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bControlMaterialParameter : 1;                    		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x00BC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlBase
// 0x0069 (0x00D1 - 0x0068)
class USkelControlBase : public UAnimObject
{
public:
	struct TArray<struct FName>                        StrengthAnimNodeNameList;                         		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimNode*>                    CachedNodeList;                                   		// 0x0078 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UAnimNodeSequence*>            AnimMetadataCachedAnimNodeSeqList;                		// 0x0088 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       ControlName;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlBase*                            NextControl;                                      		// 0x00A0 (0x0008) [0x0000000000000000]              
	float                                              ControlStrength;                                  		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StrengthTarget;                                   		// 0x00B4 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnimMetadataWeight;                               		// 0x00BC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BoneScale;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ControlTickTag;                                   		// 0x00C4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                IgnoreAtOrAboveLOD;                               		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPostPhysicsController : 1;                       		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetStrengthFromAnimNode : 1;                     		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInitializedCachedNodeList : 1;                   		// 0x00CC (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bControlledByAnimMetada : 1;                      		// 0x00CC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bPropagateSetActive : 1;                          		// 0x00CC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bIgnoreWhenNotRendered : 1;                       		// 0x00CC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShouldTickInScript : 1;                          		// 0x00CC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      BlendType;                                        		// 0x00D0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTickSkelControl ( float DeltaTime, class USkeletalMeshComponent* SkelComp );
	void SetSkelControlStrength ( float NewStrength, float InBlendTime );
	void SetSkelControlActive ( unsigned long bInActive );
};

// Class Engine.SkelControl_CCD_IK
// 0x004C (0x011D - 0x00D1)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct TArray<float>                               AngleConstraint;                                  		// 0x00D4 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     EffectorLocation;                                 		// 0x00E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EffectorTranslationFromBone;                      		// 0x00F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumBones;                                         		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxPerBoneIterations;                             		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IterationsCount;                                  		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Precision;                                        		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngleSteps;                                    		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStartFromTail : 1;                               		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNoTurnOptimization : 1;                          		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControl_TwistBone
// 0x000F (0x00E0 - 0x00D1)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	struct FName                                       SourceBoneName;                                   		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistAngleScale;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlLimb
// 0x0043 (0x0114 - 0x00D1)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                 		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     JointTargetLocation;                              		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EffectorSpaceBoneName;                            		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       JointTargetSpaceBoneName;                         		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   StretchLimits;                                    		// 0x00FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StretchRollBoneName;                              		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertBoneAxis : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertJointAxis : 1;                             		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bMaintainEffectorRelRot : 1;                      		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;               		// 0x010C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAllowStretching : 1;                             		// 0x010C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      EffectorLocationSpace;                            		// 0x0110 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointTargetLocationSpace;                         		// 0x0111 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneAxis;                                         		// 0x0112 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      JointAxis;                                        		// 0x0113 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlFootPlacement
// 0x0021 (0x0135 - 0x0114)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	struct FRotator                                    FootRotOffset;                                    		// 0x0114 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              FootOffset;                                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxUpAdjustment;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDownAdjustment;                                		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFootOrientAdjust;                              		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertFootUpAxis : 1;                            		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bOrientFootToGround : 1;                          		// 0x0130 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                   		// 0x0130 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      FootUpAxis;                                       		// 0x0134 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlLookAt
// 0x0077 (0x0148 - 0x00D1)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     DesiredTargetLocation;                            		// 0x00E0 (0x000C) [0x0000000000000000]              
	struct FVector                                     LimitLookDir;                                     		// 0x00EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseLookDir;                                      		// 0x00F8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     BaseBonePos;                                      		// 0x0104 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       TargetSpaceBoneName;                              		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       AllowRotationOtherBoneName;                       		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetLocationInterpSpeed;                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxAngle;                                         		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterMaxAngle;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeadZoneAngle;                                    		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LookAtAlpha;                                      		// 0x0130 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaTarget;                                		// 0x0134 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LookAtAlphaBlendTimeToGo;                         		// 0x0138 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LastCalcTime;                                     		// 0x013C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bInvertLookAtAxis : 1;                            		// 0x0140 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDefineUpAxis : 1;                                		// 0x0140 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInvertUpAxis : 1;                                		// 0x0140 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLimit : 1;                                 		// 0x0140 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bLimitBasedOnRefPose : 1;                         		// 0x0140 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDisableBeyondLimit : 1;                          		// 0x0140 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNotifyBeyondLimit : 1;                           		// 0x0140 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowLimit : 1;                                   		// 0x0140 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowRotationX : 1;                              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bAllowRotationY : 1;                              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAllowRotationZ : 1;                              		// 0x0140 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned char                                      TargetLocationSpace;                              		// 0x0144 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LookAtAxis;                                       		// 0x0145 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      UpAxis;                                           		// 0x0146 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AllowRotationSpace;                               		// 0x0147 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool CanLookAtPoint ( struct FVector PointLoc, unsigned long bDrawDebugInfo, unsigned long bDebugUsePersistentLines, unsigned long bDebugFlushLinesFirst );
	void SetLookAtAlpha ( float DesiredAlpha, float DesiredBlendTime );
	void InterpolateTargetLocation ( float DeltaTime );
	void SetTargetLocation ( struct FVector NewTargetLocation );
};

// Class Engine.SkelControlSingleBone
// 0x0031 (0x0102 - 0x00D1)
class USkelControlSingleBone : public USkelControlBase
{
public:
	struct FVector                                     BoneTranslation;                                  		// 0x00D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    BoneRotation;                                     		// 0x00E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       TranslationSpaceBoneName;                         		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       RotationSpaceBoneName;                            		// 0x00F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyTranslation : 1;                            		// 0x00FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bApplyRotation : 1;                               		// 0x00FC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAddTranslation : 1;                              		// 0x00FC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAddRotation : 1;                                 		// 0x00FC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRemoveMeshRotation : 1;                          		// 0x00FC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      BoneTranslationSpace;                             		// 0x0100 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotationSpace;                                		// 0x0101 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlHandlebars
// 0x0014 (0x0116 - 0x0102)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	struct FName                                       WheelBoneName;                                    		// 0x0104 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SteerWheelBoneIndex;                              		// 0x010C (0x0004) [0x0000000000000000]              
	unsigned long                                      bInvertRotation : 1;                              		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      WheelRollAxis;                                    		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      HandlebarRotateAxis;                              		// 0x0115 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlWheel
// 0x0018 (0x011A - 0x0102)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                		// 0x0104 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelMaxRenderDisplacement;                       		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRoll;                                        		// 0x010C (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              WheelSteering;                                    		// 0x0110 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	unsigned long                                      bInvertWheelRoll : 1;                             		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInvertWheelSteering : 1;                         		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      WheelRollAxis;                                    		// 0x0118 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WheelSteeringAxis;                                		// 0x0119 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlSpline
// 0x0015 (0x00E6 - 0x00D1)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EndSplineTension;                                 		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartSplineTension;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertSplineBoneAxis : 1;                        		// 0x00E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SplineBoneAxis;                                   		// 0x00E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      BoneRotMode;                                      		// 0x00E5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkelControlTrail
// 0x0080 (0x0151 - 0x00D1)
class USkelControlTrail : public USkelControlBase
{
public:
	unsigned char                                      UnknownData00[ 0xF ];                             		// 0x00D1 (0x000F) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                  		// 0x00E0 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct TArray<struct FVector>                      TrailBoneLocations;                               		// 0x0120 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FVector                                     FakeVelocity;                                     		// 0x0130 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                ChainLength;                                      		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TrailRelaxation;                                  		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StretchLimit;                                     		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ThisTimstep;                                      		// 0x0148 (0x0004) [0x0000000000000000]              
	unsigned long                                      bInvertChainBoneAxis : 1;                         		// 0x014C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLimitStretch : 1;                                		// 0x014C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bActorSpaceFakeVel : 1;                           		// 0x014C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bHadValidStrength : 1;                            		// 0x014C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned char                                      ChainBoneAxis;                                    		// 0x0150 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AnimSequence
// 0x00C3 (0x0123 - 0x0060)
class UAnimSequence : public UObject
{
public:
	struct TArray<unsigned char>                       CompressedByteStream;                             		// 0x0060 (0x0014) [0x2000000000001000]              ( CPF_Native )
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x0064 (0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct TArray<struct FAnimNotifyEvent>             Notifies;                                         		// 0x0074 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UAnimMetaData*>                MetaData;                                         		// 0x0084 (0x0010) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FTranslationTrack>            TranslationData;                                  		// 0x0094 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FRotationTrack>               RotationData;                                     		// 0x00A4 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FCurveTrack>                  CurveData;                                        		// 0x00B4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 CompressedTrackOffsets;                           		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FRawAnimSequenceTrack>        AdditiveBasePose;                                 		// 0x00D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    TranslationCodec;                                 		// 0x00E4 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    RotationCodec;                                    		// 0x00EC (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FName                                       SequenceName;                                     		// 0x00F4 (0x0008) [0x0000000000000000]              
	class UBioAnimSetData*                             m_pBioAnimSetData;                                		// 0x00FC (0x0008) [0x0000000000000000]              
	float                                              SequenceLength;                                   		// 0x0104 (0x0004) [0x0000000000000000]              
	int                                                NumFrames;                                        		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              RateScale;                                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LargestTrackStreamSize;                           		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                EncodingPkgVersion;                               		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UseScore;                                         		// 0x0118 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bNoLoopingInterpolation : 1;                      		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRawAnimationBulkDataCached : 1;                  		// 0x011C (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRawAnimationDirty : 1;                           		// 0x011C (0x0004) [0x0000000000003002] [0x00000004] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bIsAdditive : 1;                                  		// 0x011C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bHasBeenUsed : 1;                                 		// 0x011C (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bHasWeightIgnoreNotifies : 1;                     		// 0x011C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      TranslationCompressionFormat;                     		// 0x0120 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RotationCompressionFormat;                        		// 0x0121 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      KeyEncodingFormat;                                		// 0x0122 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetNotifyTimeByClass ( class UClass* NotifyClass, float PlayRate, float StartPosition );
};

// Class Engine.AnimSet
// 0x0020 (0x0080 - 0x0060)
class UAnimSet : public UObject
{
public:
	struct TArray<class UAnimSequence*>                Sequences;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PreviewSkelMeshName;                              		// 0x0070 (0x0008) [0x0000000000000000]              
	class UBioAnimSetData*                             m_pBioAnimSetData;                                		// 0x0078 (0x0008) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioDynamicAnimSet
// 0x0058 (0x00D8 - 0x0080)
class UBioDynamicAnimSet : public UAnimSet
{
public:
	struct FMap_Mirror                                 m_mapRefCounts;                                   		// 0x0080 (0x0048) [0x0000000000001000]              ( CPF_Native )
	class UBioDynamicAnimSet*                          m_pGlobalAnimSet;                                 		// 0x00C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmOrigSetName;                                  		// 0x00D0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioAnimSetData
// 0x0044 (0x00A4 - 0x0060)
class UBioAnimSetData : public UObject
{
public:
	struct TArray<struct FName>                        TrackBoneNames;                                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FAnimSetMeshLinkup>           LinkupCache;                                      		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        UseTranslationBoneNames;                          		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        ForceMeshTranslationBoneNames;                    		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bAnimRotationOnly : 1;                            		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MorphTarget
// 0x0044 (0x00A4 - 0x0060)
class UMorphTarget : public UObject
{
public:
	struct TArray<int>                                 MorphLODModels;                                   		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaterialSlotId;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ScalarParameterName;                              		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                         		// 0x007C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct TArray<int>                                 OffsetSkeleton;                                   		// 0x0084 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<int>                                 OffsetSkeleton_dep;                               		// 0x0094 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MorphTargetSet
// 0x0018 (0x0078 - 0x0060)
class UMorphTargetSet : public UObject
{
public:
	struct TArray<class UMorphTarget*>                 Targets;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USkeletalMesh*                               BaseSkelMesh;                                     		// 0x0070 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
};

// Class Engine.MorphWeightSequence
// 0x0000 (0x0060 - 0x0060)
class UMorphWeightSequence : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DecalActorBase
// 0x000A (0x0278 - 0x026E)
class ADecalActorBase : public AActor
{
public:
	class UDecalComponent*                             Decal;                                            		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DecalActor
// 0x0000 (0x0278 - 0x0278)
class ADecalActor : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DecalActorMovable
// 0x0000 (0x0278 - 0x0278)
class ADecalActorMovable : public ADecalActorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DecalManager
// 0x003E (0x02AC - 0x026E)
class ADecalManager : public AActor
{
public:
	struct TArray<class UDecalComponent*>              PoolDecals;                                       		// 0x0270 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FActiveDecalInfo>             ActiveDecals;                                     		// 0x0280 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	class UDecalComponent*                             DecalTemplate;                                    		// 0x0290 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FVector2D                                   DecalBlendRange;                                  		// 0x0298 (0x0008) [0x0000000000000000]              
	int                                                MaxActiveDecals;                                  		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              DecalLifeSpan;                                    		// 0x02A4 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              DecalDepthBias;                                   		// 0x02A8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventResetPool ( );
	class UDecalComponent* SpawnDecal ( class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, struct FVector2D InBlendRange );
	class UDecalComponent* GetPooledComponent ( );
	void SetDecalParameters ( class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, struct FVector DecalLocation, struct FRotator DecalOrientation, float Width, float Height, float Thickness, unsigned long bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, unsigned long bProjectOnTerrain, unsigned long bProjectOnSkeletalMeshes, struct FName HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, struct FVector2D BlendRange );
	bool CanSpawnDecals ( );
	void AttachDecal ( class UDecalComponent* InDecalComponent, float InDecalLifeSpan );
	void eventDecalFinished ( class UDecalComponent* Decal );
	bool AreDynamicDecalsEnabled ( );
};

// Class Engine.DecalComponent
// 0x014A (0x036E - 0x0224)
class UDecalComponent : public UPrimitiveComponent
{
public:
	struct TArray<struct FPointer>                     StaticReceivers;                                  		// 0x0224 (0x0010) [0x0000000001203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 HitNodeIndices;                                   		// 0x0234 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FDecalReceiver>               DecalReceivers;                                   		// 0x0244 (0x0010) [0x0000000001680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FPlane>                       Planes;                                           		// 0x0254 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       Filter;                                           		// 0x0264 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UPrimitiveComponent*>          ReceiverImages;                                   		// 0x0274 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0284 (0x0008) [0x0000000000203002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     location;                                         		// 0x028C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    Orientation;                                      		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     HitLocation;                                      		// 0x02A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitNormal;                                        		// 0x02B0 (0x000C) [0x0000000000000000]              
	struct FVector                                     HitTangent;                                       		// 0x02BC (0x000C) [0x0000000000000000]              
	struct FVector                                     HitBinormal;                                      		// 0x02C8 (0x000C) [0x0000000000000000]              
	struct FVector                                     ParentRelativeLocation;                           		// 0x02D4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ParentRelativeOrientation;                        		// 0x02E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OriginalParentRelativeLocation;                   		// 0x02EC (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     OriginalParentRelativeOrientationVec;             		// 0x02F8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x0304 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPrimitiveComponent*                         HitComponent;                                     		// 0x030C (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FName                                       HitBone;                                          		// 0x0314 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   BlendRange;                                       		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Width;                                            		// 0x0324 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Height;                                           		// 0x0328 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileX;                                            		// 0x032C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TileY;                                            		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetX;                                          		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetY;                                          		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DecalRotation;                                    		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FieldOfView;                                      		// 0x0340 (0x0004) [0x0000000000000000]              
	float                                              NearPlane;                                        		// 0x0344 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FarPlane;                                         		// 0x0348 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                HitNodeIndex;                                     		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                HitLevelIndex;                                    		// 0x0350 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                FracturedStaticMeshComponentIndex;                		// 0x0354 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              DepthBias;                                        		// 0x0358 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlopeScaleDepthBias;                              		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SortOrder;                                        		// 0x0360 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BackfaceAngle;                                    		// 0x0364 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoClip : 1;                                      		// 0x0368 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStaticDecal : 1;                                 		// 0x0368 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bProjectOnBackfaces : 1;                          		// 0x0368 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bProjectOnHidden : 1;                             		// 0x0368 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProjectOnBSP : 1;                                		// 0x0368 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bProjectOnStaticMeshes : 1;                       		// 0x0368 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                     		// 0x0368 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bProjectOnTerrain : 1;                            		// 0x0368 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bFlipBackfaceDirection : 1;                       		// 0x0368 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bMovableDecal : 1;                                		// 0x0368 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bHasBeenAttached : 1;                             		// 0x0368 (0x0004) [0x0000000000002000] [0x00000400] ( CPF_Transient )
	unsigned char                                      DecalTransform;                                   		// 0x036C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      FilterMode;                                       		// 0x036D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UMaterialInterface* GetDecalMaterial ( );
	void SetDecalMaterial ( class UMaterialInterface* NewDecalMaterial );
	void ResetToDefaults ( );
};

// Class Engine.ActorFactoryDecal
// 0x0008 (0x0094 - 0x008C)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                    		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DecalMaterial
// 0x0001 (0x03CC - 0x03CB)
class UDecalMaterial : public UMaterial
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeDensityInfo
// 0x0014 (0x0284 - 0x0270)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                 		// 0x0270 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        AutomaticMeshComponent;                           		// 0x0278 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0280 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AFogVolumeDensityInfo_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x0284 - 0x0284)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x0284 - 0x0284)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0284 - 0x0284)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x0284 - 0x0284)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeDensityComponent
// 0x004A (0x00D0 - 0x0086)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	struct TArray<class AActor*>                       FogVolumeActors;                                  		// 0x0088 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FLinearColor                                SimpleLightColor;                                 		// 0x0098 (0x0010) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FLinearColor                                ApproxFogLightColor;                              		// 0x00A8 (0x0010) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	class UMaterialInterface*                          FogMaterial;                                      		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                         		// 0x00C0 (0x0008) [0x0000000000000000]              
	float                                              StartDistance;                                    		// 0x00C8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      bEnabled : 1;                                     		// 0x00CC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAffectsTranslucency : 1;                         		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetEnabled ( unsigned long bSetEnabled );
};

// Class Engine.FogVolumeConeDensityComponent
// 0x002C (0x00FC - 0x00D0)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	struct FVector                                     ConeVertex;                                       		// 0x00D0 (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FVector                                     ConeAxis;                                         		// 0x00DC (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	class UDrawLightConeComponent*                     PreviewCone;                                      		// 0x00E8 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MaxDensity;                                       		// 0x00F0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ConeRadius;                                       		// 0x00F4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ConeMaxAngle;                                     		// 0x00F8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x00D4 - 0x00D0)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                          		// 0x00D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0014 (0x00E4 - 0x00D0)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	struct FPlane                                      HalfspacePlane;                                   		// 0x00D0 (0x0010) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              PlaneDistanceFactor;                              		// 0x00E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FogVolumeSphericalDensityComponent
// 0x001C (0x00EC - 0x00D0)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	struct FVector                                     SphereCenter;                                     		// 0x00D0 (0x000C) [0x0000000000000000]              
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                              		// 0x00DC (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              MaxDensity;                                       		// 0x00E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SphereRadius;                                     		// 0x00E8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x000C (0x0098 - 0x008C)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                 		// 0x008C (0x0008) [0x0000000000000000]              
	unsigned long                                      bNothingSelected : 1;                             		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0098 - 0x0098)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0000 (0x0098 - 0x0098)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexDestructibleActor
// 0x001A (0x0288 - 0x026E)
class AApexDestructibleActor : public AActor
{
public:
	struct TArray<unsigned char>                       VisibilityFactors;                                		// 0x0270 (0x0010) [0x0000000000500000]              ( CPF_NeedCtorLink )
	class UApexStaticDestructibleComponent*            StaticDestructibleComponent;                      		// 0x0280 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApexTakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser );
	void TakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

// Class Engine.FracturedStaticMeshActor
// 0x0096 (0x0304 - 0x026E)
class AFracturedStaticMeshActor : public AActor
{
public:
	struct TArray<int>                                 ChunkHealth;                                      		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       FracturedByDamageType;                            		// 0x0280 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UParticleSystem*>              OverrideFragmentDestroyEffects;                   		// 0x0290 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FDeferredPartToSpawn>         DeferredPartsToSpawn;                             		// 0x02A0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPhysEffectInfo                             PartImpactEffect;                                 		// 0x02B0 (0x0018) [0x0000000000000000]              
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                     		// 0x02C8 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x02D0 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class USoundCue*                                   ExplosionFractureSound;                           		// 0x02D8 (0x0008) [0x0000000000000000]              
	class USoundCue*                                   SingleChunkFractureSound;                         		// 0x02E0 (0x0008) [0x0000000000000000]              
	class UMaterialInterface*                          MI_LoseChunkPreviousMaterial;                     		// 0x02E8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxPartsToSpawnAtOnce;                            		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChunkHealthScale;                                 		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FractureCullMinDistance;                          		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FractureCullMaxDistance;                          		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHasShownMissingSoundWarning : 1;                 		// 0x0300 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bBreakChunksOnActorTouch : 1;                     		// 0x0300 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetLoseChunkReplacementMaterial ( );
	void eventHideFragmentsToMaximizeMemoryUsage ( );
	void eventHideOneFragment ( );
	void eventResetVisibility ( );
	void eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles );
	void eventExplode ( );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void RemoveDecals ( int IndexToRemoveDecalsFrom );
	bool FractureEffectIsRelevant ( unsigned long bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles );
	bool IsFracturedByDamageType ( class UClass* dmgType );
	bool eventSpawnDeferredParts ( );
	void eventBreakOffIsolatedIslands ( struct TArray<int> IgnoreFrags, struct FVector ChunkDir, struct TArray<class AFracturedStaticMeshPart*> DisableCollWithPart, unsigned long bWantPhysChunks, struct TArray<unsigned char>* FragmentVis );
	void ResetHealth ( );
	void eventPostBeginPlay ( );
	class AFracturedStaticMeshPart* SpawnPartMulti ( struct TArray<int> ChunkIndices, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
	class AFracturedStaticMeshPart* SpawnPart ( int ChunkIndex, struct FVector InitialVel, struct FVector InitialAngVel, float RelativeScale, unsigned long bExplosion );
};

// Class Engine.FracturedStaticMeshPart
// 0x0031 (0x0335 - 0x0304)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	struct FVector                                     OldVelocity;                                      		// 0x0304 (0x000C) [0x0000000000000000]              
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                           		// 0x0310 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              DestroyPartRadiusFactor;                          		// 0x0318 (0x0004) [0x0000000000000000]              
	float                                              LastSpawnTime;                                    		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                PartPoolIndex;                                    		// 0x0320 (0x0004) [0x0000000000000000]              
	float                                              FracPartGravScale;                                		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              CurrentVibrationLevel;                            		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              LastImpactSoundTime;                              		// 0x032C (0x0004) [0x0000000000000000]              
	unsigned long                                      bHasBeenRecycled : 1;                             		// 0x0330 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bChangeRBChannelWhenAsleep : 1;                   		// 0x0330 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCompositeThatExplodesOnImpact : 1;               		// 0x0330 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      AsleepRBChannel;                                  		// 0x0334 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventBreakOffPartsInRadius ( struct FVector Origin, float Radius, float RBStrength, unsigned long bWantPhysChunksAndParticles );
	void eventExplode ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void TryToCleanUp ( );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void RecyclePart ( unsigned long bAddToFreePool );
	void Initialize ( );
};

// Class Engine.PhysXDestructibleActor
// 0x00B5 (0x03B9 - 0x0304)
class APhysXDestructibleActor : public AFracturedStaticMeshActor
{
public:
	struct FPhysXDestructibleParameters                DestructibleParameters;                           		// 0x0304 (0x003C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FSpawnBasis>                  EffectBases;                                      		// 0x0340 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 PartFirstChunkIndices;                            		// 0x0350 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class APhysXDestructiblePart*>       Parts;                                            		// 0x0360 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 Neighbors;                                        		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    VolumeFill;                                       		// 0x0380 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UPhysXDestructibleComponent*                 DestructibleComponent;                            		// 0x0388 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x0390 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UPhysXDestructible*                          PhysXDestructible;                                		// 0x0398 (0x0008) [0x0000000000000000]              
	class UPhysXDestructibleStructure*                 Structure;                                        		// 0x03A0 (0x0008) [0x0000000000000000]              
	float                                              LinearSize;                                       		// 0x03A8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                PerFrameProcessBudget;                            		// 0x03AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SupportDepth;                                     		// 0x03B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bPlayFractureSound : 1;                           		// 0x03B4 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned long                                      bSupportChunksTouchWorld : 1;                     		// 0x03B4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportChunksInSupportFragment : 1;              		// 0x03B4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned char                                      NumPartsRemaining;                                		// 0x03B8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventExplode ( );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void NativeTakeDamage ( int Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void NativeSpawnEffects ( );
	void eventDestroyed ( );
	void eventPostBeginPlay ( );
	void eventSpawnEffects ( );
	void Term ( );
	void Init ( );
};

// Class Engine.FractureManager
// 0x0046 (0x02B4 - 0x026E)
class AFractureManager : public AActor
{
public:
	struct TArray<class AFracturedStaticMeshPart*>     PartPool;                                         		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 FreeParts;                                        		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class AFracturedStaticMeshActor*>    ActorsWithDeferredPartsToSpawn;                   		// 0x0290 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                FSMPartPoolSize;                                  		// 0x02A0 (0x0004) [0x0000000000000000]              
	float                                              DestroyVibrationLevel;                            		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DestroyMinAngVel;                                 		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExplosionVelScale;                                		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableAntiVibration : 1;                         		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableSpawnChunkEffectForRadialDamage : 1;       		// 0x02B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Tick ( float DeltaTime );
	void SpawnDeferredParts ( );
	void eventReturnPartActor ( class AFracturedStaticMeshPart* Part );
	class AFracturedStaticMeshPart* eventSpawnPartActor ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	class AFracturedStaticMeshPart* GetFSMPart ( class AFracturedStaticMeshActor* Parent, struct FVector SpawnLocation, struct FRotator SpawnRotation );
	void ResetPoolVisibility ( );
	void CreateFSMParts ( );
	void CleanUpFSMParts ( );
	void eventDestroyed ( );
	void eventPreBeginPlay ( );
	float GetFSMFractureCullDistanceScale ( );
	float GetFSMRadialSpawnChanceScale ( );
	float GetFSMDirectSpawnChanceScale ( );
	float GetNumFSMPartsScale ( );
	void eventSpawnChunkDestroyEffect ( class UParticleSystem* Effect, struct FBox ChunkBox, struct FVector ChunkDir, float Scale );
};

// Class Engine.PhysXDestructiblePart
// 0x004B (0x02B9 - 0x026E)
class APhysXDestructiblePart : public AActor
{
public:
	struct TArray<class USkeletalMeshComponent*>       SkeletalMeshComponents;                           		// 0x0270 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<unsigned char>                       NumChunksRemaining;                               		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPhysXDestructibleStructure*                 Structure;                                        		// 0x0290 (0x0008) [0x0000000000000000]              
	class APhysXDestructibleActor*                     DestructibleActor;                                		// 0x0298 (0x0008) [0x0000000000000000]              
	class UPhysXDestructibleAsset*                     DestructibleAsset;                                		// 0x02A0 (0x0008) [0x0000000000000000]              
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x02A8 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                FirstChunk;                                       		// 0x02B0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumChunks;                                        		// 0x02B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      NumMeshesRemaining;                               		// 0x02B8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

// Class Engine.ApexComponentBase
// 0x001C (0x0274 - 0x0258)
class UApexComponentBase : public UMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                           		// 0x0258 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UApexAsset*                                  Asset;                                            		// 0x0260 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x0268 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAssetChanged : 1;                                		// 0x0270 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexDynamicComponent
// 0x0008 (0x027C - 0x0274)
class UApexDynamicComponent : public UApexComponentBase
{
public:
	struct FPointer                                    ComponentDynamicResources;                        		// 0x0274 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexStaticComponent
// 0x0000 (0x0274 - 0x0274)
class UApexStaticComponent : public UApexComponentBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexStaticDestructibleComponent
// 0x0010 (0x0284 - 0x0274)
class UApexStaticDestructibleComponent : public UApexStaticComponent
{
public:
	struct FPointer                                    ApexDestructibleActor;                            		// 0x0274 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    ApexDestructiblePreview;                          		// 0x027C (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FracturedBaseComponent
// 0x002C (0x02CC - 0x02A0)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct TArray<unsigned char>                       VisibleFragments;                                 		// 0x02A0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ComponentBaseResources;                           		// 0x02B0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                            		// 0x02B8 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                NumResourceIndices;                               		// 0x02BC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ComponentIndexBufferSize;                         		// 0x02C0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bResetStaticMesh;                                 		// 0x02C4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bVisibilityHasChanged : 1;                        		// 0x02C8 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bVisibilityReset : 1;                             		// 0x02C8 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bInitialVisibilityValue : 1;                      		// 0x02C8 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bUseDynamicIndexBuffer : 1;                       		// 0x02C8 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bUseDynamicIBWithHiddenFragments : 1;             		// 0x02C8 (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetNumVisibleFragments ( );
	int GetNumFragments ( );
	bool IsFragmentVisible ( int FragmentIndex );
	struct TArray<unsigned char> GetVisibleFragments ( );
	bool SetStaticMesh ( class UStaticMesh* NewMesh, unsigned long bForce );
};

// Class Engine.FracturedSkinnedMeshComponent
// 0x002C (0x02F8 - 0x02CC)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct TArray<struct FMatrix>                      FragmentTransforms;                               		// 0x02CC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UFracturedStaticMeshComponent*> DependentComponents;                              		// 0x02DC (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    ComponentSkinResources;                           		// 0x02EC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bBecameVisible : 1;                               		// 0x02F4 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bFragmentTransformsChanged : 1;                   		// 0x02F4 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FracturedStaticMeshComponent
// 0x004C (0x0318 - 0x02CC)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	struct TArray<unsigned char>                       FragmentNeighborsVisible;                         		// 0x02CC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FBox                                        VisibleBox;                                       		// 0x02DC (0x001C) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;                 		// 0x02F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                 		// 0x0300 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              TopBottomFragmentDistThreshold;                   		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FragmentBoundsMaxZ;                               		// 0x030C (0x0004) [0x0000000000000000]              
	float                                              FragmentBoundsMinZ;                               		// 0x0310 (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseSkinnedRendering : 1;                         		// 0x0314 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bUseVisibleVertsForBounds : 1;                    		// 0x0314 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bTopFragmentsRootNonDestroyable : 1;              		// 0x0314 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bBottomFragmentsRootNonDestroyable : 1;           		// 0x0314 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPhysicalMaterial* GetFracturedMeshPhysMaterial ( );
	void RecreatePhysState ( );
	struct TArray<int> GetBoundaryHiddenFragments ( struct TArray<int> AdditionalVisibleFragments );
	struct TArray<struct FFragmentGroup> GetFragmentGroups ( struct TArray<int> IgnoreFragments, float MinConnectionArea );
	int GetCoreFragmentIndex ( );
	struct FVector GetFragmentAverageExteriorNormal ( int FragmentIndex );
	struct FBox GetFragmentBox ( int FragmentIndex );
	bool IsNoPhysFragment ( int FragmentIndex );
	bool IsRootFragment ( int FragmentIndex );
	bool IsFragmentDestroyable ( int FragmentIndex );
	void SetVisibleFragments ( struct TArray<unsigned char> VisibilityFactors );
};

// Class Engine.InstancedStaticMeshComponent
// 0x002C (0x02CC - 0x02A0)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	struct TArray<struct FInstancedStaticMeshInstanceData> PerInstanceData;                                  		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FInstancedStaticMeshMappingInfo> CachedMappings;                                   		// 0x02B0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumPendingLightmaps;                              		// 0x02C0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ComponentJoinKey;                                 		// 0x02C4 (0x0004) [0x0000000000000000]              
	int                                                InstancingRandomSeed;                             		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SplineMeshComponent
// 0x0068 (0x0308 - 0x02A0)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                     		// 0x02A0 (0x0058) [0x0000000000000000]              
	struct FVector                                     SplineXDir;                                       		// 0x02F8 (0x000C) [0x0000000000000000]              
	unsigned long                                      bSmoothInterpRollScale : 1;                       		// 0x0304 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysXDestructibleComponent
// 0x0038 (0x025C - 0x0224)
class UPhysXDestructibleComponent : public UPrimitiveComponent
{
public:
	struct TArray<unsigned char>                       Fragmented;                                       		// 0x0224 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 BoxElemStart;                                     		// 0x0234 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<int>                                 ConvexElemStart;                                  		// 0x0244 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class URB_BodySetup*                               DetailedCollision;                                		// 0x0254 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexAsset
// 0x0010 (0x0070 - 0x0060)
class UApexAsset : public UObject
{
public:
	struct TArray<class UApexComponentBase*>           ApexComponents;                                   		// 0x0060 (0x0010) [0x000000000408300A]              ( CPF_Const | CPF_ExportObject | CPF_Native | CPF_Transient | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexClothingAsset
// 0x002C (0x009C - 0x0070)
class UApexClothingAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x0070 (0x0008) [0x0000000000001000]              ( CPF_Native )
	int                                                UVChannelForTangentUpdate;                        		// 0x0078 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              MaxDistanceBlendTime;                             		// 0x007C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              ContinuousRotationThreshold;                      		// 0x0080 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              ContinuousDistanceThreshold;                      		// 0x0084 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LodWeightsMaxDistance;                            		// 0x0088 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LodWeightsDistanceWeight;                         		// 0x008C (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LodWeightsBias;                                   		// 0x0090 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	float                                              LodWeightsBenefitsBias;                           		// 0x0094 (0x0004) [0x0000000004000003]              ( CPF_Edit | CPF_Const | CPF_EditInline )
	unsigned long                                      bUseHardwareCloth : 1;                            		// 0x0098 (0x0004) [0x0000000004000003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditInline )
	unsigned long                                      bFallbackSkinning : 1;                            		// 0x0098 (0x0004) [0x0000000004000003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditInline )
	unsigned long                                      bSlowStart : 1;                                   		// 0x0098 (0x0004) [0x0000000004000003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexDestructibleAsset
// 0x00BC (0x012C - 0x0070)
class UApexDestructibleAsset : public UApexAsset
{
public:
	struct FNxDestructibleParameters                   DestructibleParameters;                           		// 0x0070 (0x0080) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UMaterialInterface*>           Materials;                                        		// 0x00F0 (0x0010) [0x0000000000400043]              ( CPF_Edit | CPF_Const | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FString                                     CrumbleEmitterName;                               		// 0x0100 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     DustEmitterName;                                  		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPointer                                    MApexAsset;                                       		// 0x0120 (0x0008) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      bDynamic : 1;                                     		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ApexGenericAsset
// 0x0008 (0x0078 - 0x0070)
class UApexGenericAsset : public UApexAsset
{
public:
	struct FPointer                                    MApexAsset;                                       		// 0x0070 (0x0008) [0x0000000000001000]              ( CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysXDestructible
// 0x0064 (0x00C4 - 0x0060)
class UPhysXDestructible : public UObject
{
public:
	struct FPhysXDestructibleParameters                DestructibleParameters;                           		// 0x0060 (0x003C) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UPhysXDestructibleAsset*>      DestructibleAssets;                               		// 0x009C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FVector>                      CookingScales;                                    		// 0x00AC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFracturedStaticMesh*                        FracturedStaticMesh;                              		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysXDestructibleAsset
// 0x0034 (0x0094 - 0x0060)
class UPhysXDestructibleAsset : public UObject
{
public:
	struct TArray<struct FPhysXDestructibleAssetChunk> ChunkTree;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USkeletalMesh*>                Meshes;                                           		// 0x0070 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UPhysicsAsset*>                Assets;                                           		// 0x0080 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                MaxDepth;                                         		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysXDestructibleStructure
// 0x00CC (0x012C - 0x0060)
class UPhysXDestructibleStructure : public UObject
{
public:
	struct TArray<class APhysXDestructibleActor*>      Actors;                                           		// 0x0060 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<class APhysXDestructibleActor*>      ActorKillList;                                    		// 0x0070 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FPhysXDestructibleChunk>      Chunks;                                           		// 0x0080 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FPhysXDestructibleOverlap>    Overlaps;                                         		// 0x0090 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 Active;                                           		// 0x00A0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 PseudoSupporterFifo;                              		// 0x00B0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 FractureOriginFifo;                               		// 0x00C0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 FractureOriginChunks;                             		// 0x00D0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 RouteUpdateArea;                                  		// 0x00E0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 PassiveFractureChunks;                            		// 0x00F0 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<int>                                 RouteUpdateFifo;                                  		// 0x0100 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    Manager;                                          		// 0x0110 (0x0008) [0x0000000000001000]              ( CPF_Native )
	int                                                PseudoSupporterFifoStart;                         		// 0x0118 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                FractureOriginFifoStart;                          		// 0x011C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                PerFrameProcessBudget;                            		// 0x0120 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                RouteUpdateFifoStart;                             		// 0x0124 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SupportDepth;                                     		// 0x0128 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetChunkCentroid ( int ChunkIndex );
	struct FMatrix GetChunkMatrix ( int ChunkIndex );
	void CrumbleChunk ( int ChunkIndex );
	void FractureChunk ( int ChunkIndex, struct FVector Point, struct FVector impulse, unsigned long bInheritRootVel );
	bool DamageChunk ( int ChunkIndex, struct FVector Point, float BaseDamage, float Radius, unsigned long bFullDamage, float DamageFalloffExp, struct TArray<int>* Output );
};

// Class Engine.InterpFilter
// 0x0010 (0x0070 - 0x0060)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                          		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpFilter_Classes
// 0x0000 (0x0070 - 0x0070)
class UInterpFilter_Classes : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpFilter_Custom
// 0x0000 (0x0070 - 0x0070)
class UInterpFilter_Custom : public UInterpFilter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpGroup
// 0x0045 (0x00A5 - 0x0060)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                  		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<class UInterpTrack*>                 InterpTracks;                                     		// 0x0068 (0x0010) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     GroupAnimSets;                                    		// 0x0078 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       m_nmSFXFindActor;                                 		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       GroupName;                                        		// 0x0090 (0x0008) [0x0000000000000000]              
	struct FColor                                      GroupColor;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BioForcedLodModel;                                		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCollapsed : 1;                                   		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bVisible : 1;                                     		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bDontPrime : 1;                                   		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIsFolder : 1;                                    		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsParented : 1;                                  		// 0x00A0 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bIsSelected : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned char                                      m_eSFXFindActorMode;                              		// 0x00A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SFXScriptCopyGroupAnimSets ( struct TArray<class UAnimSet*>* aOutGroupAnimSets );
};

// Class Engine.InterpGroupAI
// 0x0017 (0x00BC - 0x00A5)
class UInterpGroupAI : public UInterpGroup
{
public:
	struct FName                                       StageMarkGroup;                                   		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      StageMarkActor;                                   		// 0x00B0 (0x0008) [0x0000000000000000]              
	unsigned long                                      AllowDeferredActorAttach : 1;                     		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpGroupDirector
// 0x0003 (0x00A8 - 0x00A5)
class UInterpGroupDirector : public UInterpGroup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneGroup
// 0x001B (0x00C0 - 0x00A5)
class USFXSceneGroup : public UInterpGroup
{
public:
	struct TArray<struct FBioResourcePreloadItem>      m_aBioPreloadData;                                		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fSceneLength;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              m_fPlayRate;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpGroupInst
// 0x0024 (0x0084 - 0x0060)
class UInterpGroupInst : public UObject
{
public:
	struct TArray<class UInterpTrackInst*>             TrackInst;                                        		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpGroup*                                Group;                                            		// 0x0070 (0x0008) [0x0000000000000000]              
	class AActor*                                      GroupActor;                                       		// 0x0078 (0x0008) [0x0000000000000000]              
	unsigned long                                      SFXGameTerminated : 1;                            		// 0x0080 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      SFXGameInitialized : 1;                           		// 0x0080 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      SFXGroupActorIsSet : 1;                           		// 0x0080 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpGroupInstAI
// 0x0009 (0x008D - 0x0084)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                          		// 0x0084 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SavedPhysics;                                     		// 0x008C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0084 - 0x0084)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioInterpTrack
// 0x0018 (0x00A8 - 0x0090)
class UBioInterpTrack : public UInterpTrack
{
public:
	struct TArray<struct FBioTrackKey>                 m_aTrackKeys;                                     		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                m_nCurrentKey;                                    		// 0x00A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nNextKey;                                       		// 0x00A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventKeyDataDisplayName ( );
	struct FString eventKeyDataArrayName ( );
	struct FString eventNewKeyDefaultName ( );
	bool eventAllowKeyNaming ( );
};

// Class Engine.InterpTrackDirector
// 0x0014 (0x00A4 - 0x0090)
class UInterpTrackDirector : public UInterpTrack
{
public:
	struct TArray<struct FDirectorTrackCut>            CutTrack;                                         		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bSimulateCameraCutsOnClients : 1;                 		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackEvent
// 0x0014 (0x00A4 - 0x0090)
class UInterpTrackEvent : public UInterpTrack
{
public:
	struct TArray<struct FEventTrackKey>               EventTrack;                                       		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFaceFX
// 0x009D (0x012D - 0x0090)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	struct FOverride_AnimSet                           OverrideAnimSet;                                  		// 0x0090 (0x002C) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UFaceFXAnimSet*>               FaceFXAnimSets;                                   		// 0x00BC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UFaceFXAnimSet*>               m_aBioMaleAnimSets;                               		// 0x00CC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UFaceFXAnimSet*>               m_aBioFemaleAnimSets;                             		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FFaceFXTrackKey>              FaceFXSeqs;                                       		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FFaceFXSoundCueKey>           FaceFXSoundCueKeys;                               		// 0x00FC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FOverride_Asset                             OverrideAsset;                                    		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UFaceFXAsset*                                CachedActorFXAsset;                               		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       m_nmSFXFindActor;                                 		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bSFXEnableClipToClipBlending : 1;               		// 0x0128 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      m_eSFXFindActorMode;                              		// 0x012C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFloatBase
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                       		// 0x0090 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackAnimControl
// 0x0018 (0x00C0 - 0x00A8)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	struct TArray<struct FAnimControlTrackKey>         AnimSeqs;                                         		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SlotName;                                         		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFade
// 0x0004 (0x00AC - 0x00A8)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                 		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFloatMaterialParam
// 0x0018 (0x00C0 - 0x00A8)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	struct TArray<struct FMeshMaterialRef>             AffectedMaterialRefs;                             		// 0x00A8 (0x0010) [0x0000000000480002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       ParamName;                                        		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                        		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackFloatProp
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                    		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x00A8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackSlomo
// 0x0000 (0x00A8 - 0x00A8)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackLinearColorBase
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                 		// 0x0090 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackMove
// 0x004E (0x00DE - 0x0090)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                         		// 0x0090 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpCurveVector                          EulerTrack;                                       		// 0x00A4 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FInterpLookupTrack                          LookupTrack;                                      		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       LookAtGroupName;                                  		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinCurveTension;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngCurveTension;                                  		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseQuatInterpolation : 1;                        		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShowArrowAtKeys : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableMovement : 1;                             		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bShowTranslationOnCurveEd : 1;                    		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bShowRotationOnCurveEd : 1;                       		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bHide3DTrack : 1;                                 		// 0x00D8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SFXCreatedBeforeStuntActorLocationChange : 1;     		// 0x00D8 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned char                                      MoveFrame;                                        		// 0x00DC (0x0001) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned char                                      RotMode;                                          		// 0x00DD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackParticleReplay
// 0x0010 (0x00A0 - 0x0090)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	struct TArray<struct FParticleReplayTrackKey>      TrackKeys;                                        		// 0x0090 (0x0010) [0x0000000004400000]              ( CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackToggle
// 0x0014 (0x00A4 - 0x0090)
class UInterpTrackToggle : public UInterpTrack
{
public:
	struct TArray<struct FToggleTrackKey>              ToggleTrack;                                      		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bActivateSystemEachUpdate : 1;                    		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackVectorBase
// 0x0018 (0x00A8 - 0x0090)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                      		// 0x0090 (0x0014) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              CurveTension;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x00A8 - 0x00A8)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackColorProp
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackColorScale
// 0x0000 (0x00A8 - 0x00A8)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackSound
// 0x0014 (0x00BC - 0x00A8)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	struct TArray<struct FSoundTrackKey>               Sounds;                                           		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                   		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackVectorMaterialParam
// 0x0018 (0x00C0 - 0x00A8)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	struct TArray<struct FMeshMaterialRef>             AffectedMaterialRefs;                             		// 0x00A8 (0x0010) [0x0000000000480002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       ParamName;                                        		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackVectorProp
// 0x0008 (0x00B0 - 0x00A8)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                     		// 0x00A8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackVisibility
// 0x0014 (0x00A4 - 0x0090)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	struct TArray<struct FVisibilityTrackKey>          VisibilityTrack;                                  		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bFireEventsWhenForwards : 1;                      		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenBackwards : 1;                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;               		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInst
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInst : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioInterpTrackInst
// 0x0004 (0x0064 - 0x0060)
class UBioInterpTrackInst : public UInterpTrackInst
{
public:
	float                                              m_fLastUpdatePosition;                            		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstAnimControl
// 0x0014 (0x0074 - 0x0060)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	struct TArray<class UTexture2D*>                   ModifiedTextures;                                 		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	float                                              LastUpdatePosition;                               		// 0x0070 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0068 - 0x0060)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                    		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstFaceFX
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	class AActor*                                      SFXActor;                                         		// 0x0060 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdatePosition;                               		// 0x0068 (0x0004) [0x0000000000000000]              
	unsigned long                                      bFirstUpdate : 1;                                 		// 0x006C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstFade
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	struct TArray<float>                               ResetFloats;                                      		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                       		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstMove
// 0x0069 (0x00C9 - 0x0060)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FMatrix                                     InitialTM;                                        		// 0x0060 (0x0040) [0x0000000000000000]              
	struct FQuat                                       InitialQuat;                                      		// 0x00A0 (0x0010) [0x0000000000000000]              
	struct FVector                                     ResetLocation;                                    		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FRotator                                    ResetRotation;                                    		// 0x00BC (0x000C) [0x0000000000000000]              
	unsigned char                                      m_nSavedPhysicsMode;                              		// 0x00C8 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                           		// 0x0060 (0x0008) [0x0000000000000000]              
	class UObject*                                     PropertyOuterObjectInst;                          		// 0x0068 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstColorProp
// 0x000C (0x007C - 0x0070)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FColor                                      ResetColor;                                       		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstFloatProp
// 0x000C (0x007C - 0x0070)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	float                                              ResetFloat;                                       		// 0x0078 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0088 - 0x0070)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                        		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FLinearColor                                ResetColor;                                       		// 0x0078 (0x0010) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstVectorProp
// 0x0014 (0x0084 - 0x0070)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                       		// 0x0070 (0x0008) [0x0000000000000000]              
	struct FVector                                     ResetVector;                                      		// 0x0078 (0x000C) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x0060 - 0x0060)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0064 - 0x0060)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                  		// 0x0060 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstSound
// 0x000C (0x006C - 0x0060)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	class UAudioComponent*                             PlayAudioComp;                                    		// 0x0060 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	float                                              LastUpdatePosition;                               		// 0x0068 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstToggle
// 0x0009 (0x0069 - 0x0060)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned long                                      bSavedActiveState : 1;                            		// 0x0064 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned char                                      Action;                                           		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0010 (0x0070 - 0x0060)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	struct TArray<struct FVector>                      ResetVectors;                                     		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpTrackInstVisibility
// 0x0005 (0x0065 - 0x0060)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                               		// 0x0060 (0x0004) [0x0000000000000000]              
	unsigned char                                      Action;                                           		// 0x0064 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXInterpAuditionHelperInterface
// 0x0000 (0x0060 - 0x0060)
class USFXInterpAuditionHelperInterface : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneShopDataInstInterface
// 0x0008 (0x0068 - 0x0060)
class USFXSceneShopDataInstInterface : public UObject
{
public:
	class USFXSceneShopGameData*                       m_pSceneGameData;                                 		// 0x0060 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneShopEditorDataInst
// 0x006C (0x00D4 - 0x0068)
class USFXSceneShopEditorDataInst : public USFXSceneShopDataInstInterface
{
public:
	struct FMultiMap_Mirror                            m_mapGroupsToPreview;                             		// 0x0068 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class USFXSceneShopNode*>            m_aPreviewNodes;                                  		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UInterpGroup*>                 m_aAllPreviewGroups;                              		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              m_fPreviewPosition;                               		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneShopGameDataInst
// 0x00DC (0x0144 - 0x0068)
class USFXSceneShopGameDataInst : public USFXSceneShopDataInstInterface
{
public:
	struct FMultiMap_Mirror                            m_mapSceneTree;                                   		// 0x0068 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMap_Mirror                                 m_mapPlayingScenes;                               		// 0x00B0 (0x0048) [0x0000000000001000]              ( CPF_Native )
	struct FMultiMap_Mirror                            m_mapSceneGroups;                                 		// 0x00F8 (0x0048) [0x0000000000001000]              ( CPF_Native )
	unsigned long                                      m_bProcessingScenes : 1;                          		// 0x0140 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneShopGameData
// 0x0010 (0x0070 - 0x0060)
class USFXSceneShopGameData : public UObject
{
public:
	struct TArray<class USFXSceneShopNode*>            m_aNodes;                                         		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSceneShopNode
// 0x0020 (0x0080 - 0x0060)
class USFXSceneShopNode : public UObject
{
public:
	struct TArray<struct FSFXSSNodePin>                m_aOutputPins;                                    		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSFXSSNodePin>                m_aInputPins;                                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioMaterialExpressionEffectMatBaseProperty
// 0x0009 (0x0069 - 0x0060)
class UBioMaterialExpressionEffectMatBaseProperty : public UMaterialExpression
{
public:
	class UMaterialExpression*                         Input;                                            		// 0x0060 (0x0008) [0x0000000000000000]              
	unsigned char                                      BaseProperty;                                     		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionAbs
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionAdd
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionAppendVector
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionBumpOffset
// 0x0048 (0x00A8 - 0x0060)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Height;                                           		// 0x0080 (0x0020) [0x0000000000000000]              
	float                                              HeightRatio;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReferencePlane;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCeil
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionClamp
// 0x0060 (0x00C0 - 0x0060)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Min;                                              		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Max;                                              		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionComment
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	struct FString                                     Text;                                             		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                PosX;                                             		// 0x0070 (0x0004) [0x0000000000000000]              
	int                                                PosY;                                             		// 0x0074 (0x0004) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                SizeY;                                            		// 0x007C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionComponentMask
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	unsigned long                                      R : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      G : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      B : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      A : 1;                                            		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCompound
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionCompound : public UMaterialExpression
{
public:
	struct TArray<class UMaterialExpression*>          MaterialExpressions;                              		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     Caption;                                          		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bExpanded : 1;                                    		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x006C - 0x0060)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              G;                                                		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              B;                                                		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              A;                                                		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0028 (0x0088 - 0x0060)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Bias;                                             		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Scale;                                            		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionConstantClamp
// 0x0028 (0x0088 - 0x0060)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Min;                                              		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCosine
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCrossProduct
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCustom
// 0x0031 (0x0091 - 0x0060)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                             		// 0x0060 (0x0010) [0x0000040000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FCustomInput>                 Inputs;                                           		// 0x0080 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      OutputType;                                       		// 0x0090 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionCustomTexture
// 0x0008 (0x0068 - 0x0060)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                          		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0048 (0x00A8 - 0x0060)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	struct FExpressionInput                            Alpha;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x0080 (0x0020) [0x0000000000000000]              
	float                                              BiasScale;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNormalize : 1;                                   		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x0068 (0x00C8 - 0x0060)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	struct FExpressionInput                            RGB;                                              		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Bias;                                             		// 0x00A0 (0x0020) [0x0000000000000000]              
	float                                              BiasScale;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNormalize : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                             		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDesaturation
// 0x0050 (0x00B0 - 0x0060)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Percent;                                          		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FLinearColor                                LuminanceFactors;                                 		// 0x00A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDistance
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDivide
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDotProduct
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDynamicParameter
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	struct TArray<struct FString>                      ParamNames;                                       		// 0x0060 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionMeshEmitterDynamicParameter
// 0x0000 (0x0070 - 0x0070)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFloor
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFluidNormal
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFmod
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFoliageImpulseDirection
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFontSample
// 0x000C (0x006C - 0x0060)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                             		// 0x0060 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                FontTexturePage;                                  		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0018 (0x0084 - 0x006C)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FGuid                                       ExpressionGUID;                                   		// 0x006C (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ParameterName;                                    		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFrac
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFresnel
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	struct FExpressionInput                            Normal;                                           		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Exponent;                                         		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionIf
// 0x00A0 (0x0100 - 0x0060)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            AGreaterThanB;                                    		// 0x00A0 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            AEqualsB;                                         		// 0x00C0 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            ALessThanB;                                       		// 0x00E0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLightmassReplace
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                         		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Lightmass;                                        		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionLinearInterpolate
// 0x0060 (0x00C0 - 0x0060)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Alpha;                                            		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionMultiply
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionNormalize
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                      		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionOcclusionPercentage
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionOneMinus
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionPanner
// 0x0048 (0x00A8 - 0x0060)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0080 (0x0020) [0x0000000000000000]              
	float                                              SpeedX;                                           		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpeedY;                                           		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionParameter
// 0x0018 (0x0078 - 0x0060)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FGuid                                       ExpressionGUID;                                   		// 0x0060 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ParameterName;                                    		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x007C - 0x0078)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioMaterialExpressionEffectMatFractionEnabled
// 0x0000 (0x007C - 0x007C)
class UBioMaterialExpressionEffectMatFractionEnabled : public UMaterialExpressionScalarParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x002C (0x00A4 - 0x0078)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x0078 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FExpressionInput                            Input;                                            		// 0x0080 (0x0020) [0x0000000000000000]              
	unsigned long                                      DefaultR : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      DefaultG : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      DefaultB : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      DefaultA : 1;                                     		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x004C (0x00C4 - 0x0078)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionParameter
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x0078 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FExpressionInput                            A;                                                		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x00A0 (0x0020) [0x0000000000000000]              
	unsigned long                                      DefaultValue : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      ExtendedCaptionDisplay : 1;                       		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x0088 - 0x0078)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                     		// 0x0078 (0x0010) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	unsigned long                                      bUseViewSpace : 1;                                		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                   		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionPower
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                             		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Exponent;                                         		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0060 (0x00C0 - 0x0060)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                   		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            PositionOnAxis;                                   		// 0x0080 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Position;                                         		// 0x00A0 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionRotator
// 0x004C (0x00AC - 0x0060)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                       		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            Time;                                             		// 0x0080 (0x0020) [0x0000000000000000]              
	float                                              CenterX;                                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterY;                                          		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSceneDepth
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0060 (0x0020) [0x0000000000000000]              
	unsigned long                                      bNormalize : 1;                                   		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSceneTexture
// 0x0025 (0x0085 - 0x0060)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0060 (0x0020) [0x0000000000000000]              
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SceneTextureType;                                 		// 0x0084 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSine
// 0x0024 (0x0084 - 0x0060)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	float                                              Period;                                           		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSphereMask
// 0x0048 (0x00A8 - 0x0060)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              
	float                                              AttenuationRadius;                                		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HardnessPercent;                                  		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSquareRoot
// 0x0020 (0x0080 - 0x0060)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionSubtract
// 0x0040 (0x00A0 - 0x0060)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                		// 0x0060 (0x0020) [0x0000000000000000]              
	struct FExpressionInput                            B;                                                		// 0x0080 (0x0020) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0070 - 0x0060)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                  		// 0x0060 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UTiling;                                          		// 0x0064 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VTiling;                                          		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      UnMirrorU : 1;                                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      UnMirrorV : 1;                                    		// 0x006C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSample
// 0x002C (0x008C - 0x0060)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                      		// 0x0060 (0x0020) [0x0000000000000000]              
	class UTexture*                                    Texture;                                          		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDecompressNormalMap : 1;                         		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0028 (0x00B4 - 0x008C)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	struct FExpressionInput                            Bias;                                             		// 0x008C (0x0020) [0x0000000000000000]              
	float                                              BiasScale;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNormalize : 1;                                   		// 0x00B0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionMeshSubUVBlend
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0018 (0x00A4 - 0x008C)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FGuid                                       ExpressionGUID;                                   		// 0x008C (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       ParameterName;                                    		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x00A9 - 0x00A4)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Channel;                                          		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x00A4 - 0x00A4)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTextureSampleParameterNormal
// 0x0008 (0x00AC - 0x00A4)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                                 		// 0x00A4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTime
// 0x0004 (0x0064 - 0x0060)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                 		// 0x0060 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTransform
// 0x0022 (0x0082 - 0x0060)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	unsigned char                                      TransformSourceType;                              		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      TransformType;                                    		// 0x0081 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTransformPosition
// 0x0021 (0x0081 - 0x0060)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                            		// 0x0060 (0x0020) [0x0000000000000000]              
	unsigned char                                      TransformType;                                    		// 0x0080 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0060 - 0x0060)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialInstance
// 0x0054 (0x00F8 - 0x00A4)
class UMaterialInstance : public UMaterialInterface
{
public:
	struct FPointer                                    StaticParameters[ 0x2 ];                          		// 0x00A4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    StaticPermutationResources[ 0x2 ];                		// 0x00B4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Resources[ 0x2 ];                                 		// 0x00C4 (0x0010) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FGuid                                       ParentLightingGuid;                               		// 0x00D4 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UPhysicalMaterial*                           PhysMaterial;                                     		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Parent;                                           		// 0x00EC (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasStaticPermutationResource : 1;                		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bStaticPermutationDirty : 1;                      		// 0x00F4 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )
	unsigned long                                      ReentrantFlag : 1;                                		// 0x00F4 (0x0004) [0x0000000000001002] [0x00000004] ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsInMapOrTransientPackage ( );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetEffectsMaterialFractionValue ( float Value );
	void SetEffectsMaterialNameValue ( struct FName EffectName );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

// Class Engine.MaterialInstanceConstant
// 0x0040 (0x0138 - 0x00F8)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	struct TArray<struct FFontParameterValue>          FontParameterValues;                              		// 0x00F8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FVectorParameterValue>        VectorParameterValues;                            		// 0x0108 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FScalarParameterValue>        ScalarParameterValues;                            		// 0x0118 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FTextureParameterValue>       TextureParameterValues;                           		// 0x0128 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

// Class Engine.BioMaterialInstanceConstant
// 0x0000 (0x0138 - 0x0138)
class UBioMaterialInstanceConstant : public UMaterialInstanceConstant
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.MaterialInstanceTimeVarying
// 0x0048 (0x0140 - 0x00F8)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	struct TArray<struct FFontParameterValueOverTime>  FontParameterValues;                              		// 0x00F8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FScalarParameterValueOverTime> ScalarParameterValues;                            		// 0x0108 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FTextureParameterValueOverTime> TextureParameterValues;                           		// 0x0118 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FVectorParameterValueOverTime> VectorParameterValues;                            		// 0x0128 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              Duration;                                         		// 0x0138 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoActivateAll : 1;                             		// 0x013C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMaxDurationFromAllParameters ( );
	void ClearParameterValues ( );
	void SetFontParameterValue ( struct FName ParameterName, class UFont* FontValue, int FontPage );
	void SetVectorStartTime ( struct FName ParameterName, float Value );
	void SetVectorCurveParameterValue ( struct FName ParameterName, struct FInterpCurveVector* Value );
	void SetVectorParameterValue ( struct FName ParameterName, struct FLinearColor* Value );
	void SetTextureParameterValue ( struct FName ParameterName, class UTexture* Value );
	void SetDuration ( float Value );
	void SetScalarStartTime ( struct FName ParameterName, float Value );
	void SetScalarCurveParameterValue ( struct FName ParameterName, struct FInterpCurveFloat* Value );
	void SetScalarParameterValue ( struct FName ParameterName, float Value );
	void SetParent ( class UMaterialInterface* NewParent );
};

// Class Engine.EmitterCameraLensEffectBase
// 0x0024 (0x02A8 - 0x0284)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                  		// 0x0284 (0x0008) [0x0000000000000000]              
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                 		// 0x028C (0x0008) [0x0000000000000000]              
	class ACamera*                                     BaseCamera;                                       		// 0x0294 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              BaseFOV;                                          		// 0x029C (0x0004) [0x0000000000000000]              
	float                                              DistFromCamera;                                   		// 0x02A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowMultipleInstances : 1;                      		// 0x02A4 (0x0004) [0x0000008000000003] [0x00000001] ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateLocation ( float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot );
	void ActivateLensEffect ( );
	void PostBeginPlay ( );
	void NotifyRetriggered ( );
	void RegisterCamera ( class ACamera* C );
	void Destroyed ( );
};

// Class Engine.PhysXEmitterSpawnable
// 0x0010 (0x0294 - 0x0284)
class APhysXEmitterSpawnable : public AEmitter
{
public:
	struct FPointer                                    VolumeFill;                                       		// 0x0284 (0x0008) [0x0000000000001000]              ( CPF_Native )
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x028C (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
	void eventDestroyed ( );
	void Term ( );
};

// Class Engine.ParticleEventManager
// 0x0002 (0x0270 - 0x026E)
class AParticleEventManager : public AActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventHandleParticleModuleEventSendToGame ( class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};

// Class Engine.ParticleSystemComponent
// 0x0146 (0x036A - 0x0224)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0224 (0x000C) MISSED OFFSET
	struct FRwVector3                                  OldPosition;                                      		// 0x0230 (0x0010) [0x0000000000000000]              
	struct FRwVector3                                  PartSysVelocity;                                  		// 0x0240 (0x0010) [0x0000000000000000]              
	struct TArray<struct FPointer>                     EmitterInstances;                                 		// 0x0250 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FViewParticleEmitterInstanceMotionBlurInfo> ViewMBInfoArray;                                  		// 0x0260 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UStaticMeshComponent*>         SMComponents;                                     		// 0x0270 (0x0010) [0x000000000468200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UMaterialInterface*>           SMMaterialInterfaces;                             		// 0x0280 (0x0010) [0x0000000000602002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FParticleSysParam>            InstanceParameters;                               		// 0x0290 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FMaterialViewRelevance>       CachedViewRelevanceFlags;                         		// 0x02A0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UParticleSystemReplay*>        ReplayClips;                                      		// 0x02B0 (0x0010) [0x0000000004400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FParticleEventSpawnData>      SpawnEvents;                                      		// 0x02C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FParticleEventDeathData>      DeathEvents;                                      		// 0x02D0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FParticleEventCollideData>    CollisionEvents;                                  		// 0x02E0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FParticleEventKismetData>     KismetEvents;                                     		// 0x02F0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                     		// 0x0300 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      LightEnvironmentClass;                            		// 0x0310 (0x0008) [0x0000000000000000]              
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0318 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ListPrev;                                         		// 0x0320 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FPointer                                    ListNext;                                         		// 0x0328 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UParticleSystem*                             Template;                                         		// 0x0330 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              WarmupTime;                                       		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                LODLevel;                                         		// 0x033C (0x0004) [0x0000000000000000]              
	float                                              SecondsBeforeInactive;                            		// 0x0340 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeSinceLastForceUpdateTransform;                		// 0x0344 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MaxTimeBeforeForceUpdateTransform;                		// 0x0348 (0x0004) [0x0000000000000000]              
	float                                              AccumTickTime;                                    		// 0x034C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ReplayClipIDNumber;                               		// 0x0350 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ReplayFrameIndex;                                 		// 0x0354 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              AccumLODDistanceCheckTime;                        		// 0x0358 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CustomTimeDilation;                               		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelay;                                     		// 0x0360 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoActivate : 1;                                		// 0x0364 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWasCompleted : 1;                                		// 0x0364 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bSuppressSpawning : 1;                            		// 0x0364 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bWasDeactivated : 1;                              		// 0x0364 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bResetOnDetach : 1;                               		// 0x0364 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUpdateOnDedicatedServer : 1;                     		// 0x0364 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bJustAttached : 1;                                		// 0x0364 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bIsActive : 1;                                    		// 0x0364 (0x0004) [0x0000000000002000] [0x00000080] ( CPF_Transient )
	unsigned long                                      bWarmingUp : 1;                                   		// 0x0364 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIsCachedInPool : 1;                              		// 0x0364 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bOverrideLODMethod : 1;                           		// 0x0364 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;             		// 0x0364 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bUpdateComponentInTick : 1;                       		// 0x0364 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bDeferredBeamUpdate : 1;                          		// 0x0364 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bForcedInActive : 1;                              		// 0x0364 (0x0004) [0x0000000000002000] [0x00004000] ( CPF_Transient )
	unsigned long                                      bIsWarmingUp : 1;                                 		// 0x0364 (0x0004) [0x0000000000002000] [0x00008000] ( CPF_Transient )
	unsigned long                                      bIsViewRelevanceDirty : 1;                        		// 0x0364 (0x0004) [0x0000000000002000] [0x00010000] ( CPF_Transient )
	unsigned long                                      bRecacheViewRelevance : 1;                        		// 0x0364 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      bLODUpdatePending : 1;                            		// 0x0364 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      bSkipSpawnCountCheck : 1;                         		// 0x0364 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned char                                      LODMethod;                                        		// 0x0368 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ReplayState;                                      		// 0x0369 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetStopSpawning ( int InEmitterIndex, unsigned long bInStopSpawning );
	void ResetToDefaults ( );
	void SetActive ( unsigned long bNowActive );
	void SuppressSpawning ( );
	void ClearAllParameters ( );
	void ClearParameter ( struct FName ParameterName, unsigned char ParameterType );
	bool GetMaterialParameter ( struct FName InName, class UMaterialInterface** OutMaterial );
	bool GetActorParameter ( struct FName InName, class AActor** OutActor );
	bool GetColorParameter ( struct FName InName, struct FColor* OutColor );
	bool GetVectorParameter ( struct FName InName, struct FVector* OutVector );
	bool GetFloatParameter ( struct FName InName, float* OutFloat );
	void SetMaterialParameter ( struct FName ParameterName, class UMaterialInterface* Param );
	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetColorParameter ( struct FName ParameterName, struct FColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	int GetEditorLODLevel ( );
	int GetLODLevel ( );
	void SetEditorLODLevel ( int InLODLevel );
	void SetLODLevel ( int InLODLevel );
	float GetMaxLifespan ( );
	int DetermineLODLevelForLocation ( struct FVector EffectLocation );
	void SetBeamTargetStrength ( int EmitterIndex, float NewTargetStrength, int TargetIndex );
	void SetBeamTargetTangent ( int EmitterIndex, struct FVector NewTangentPoint, int TargetIndex );
	void SetBeamTargetPoint ( int EmitterIndex, struct FVector NewTargetPoint, int TargetIndex );
	void SetBeamSourceStrength ( int EmitterIndex, float NewSourceStrength, int SourceIndex );
	void SetBeamSourceTangent ( int EmitterIndex, struct FVector NewTangentPoint, int SourceIndex );
	void SetBeamSourcePoint ( int EmitterIndex, struct FVector NewSourcePoint, int SourceIndex );
	void SetBeamDistance ( int EmitterIndex, float Distance );
	void SetBeamEndPoint ( int EmitterIndex, struct FVector NewEndPoint );
	void SetBeamTessellationFactor ( int EmitterIndex, float NewFactor );
	void SetBeamType ( int EmitterIndex, int NewMethod );
	void RewindEmitterInstances ( );
	void RewindEmitterInstance ( int EmitterIndex );
	void SetKillOnCompleted ( int EmitterIndex, unsigned long bKill );
	void SetKillOnDeactivate ( int EmitterIndex, unsigned long bKill );
	bool GetSkipUpdateDynamicDataDuringTick ( );
	void SetSkipUpdateDynamicDataDuringTick ( unsigned long bInSkipUpdateDynamicDataDuringTick );
	void KillParticlesForced ( );
	void DeactivateSystem ( );
	void ActivateSystem ( unsigned long bFlagAsJustAttached );
	void SetTemplate ( class UParticleSystem* NewTemplate );
	void OnSystemFinished ( class UParticleSystemComponent* PSystem );
};

// Class Engine.DistributionFloatParticleParameter
// 0x0003 (0x009C - 0x0099)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DistributionVectorParticleParameter
// 0x0001 (0x00CC - 0x00CB)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleEmitter
// 0x0039 (0x0099 - 0x0060)
class UParticleEmitter : public UObject
{
public:
	struct TArray<class UParticleModule*>              SpawnRateModules;                                 		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleLODLevel*>            LODLevels;                                        		// 0x0070 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct FName                                       EmitterName;                                      		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubUVDataOffset;                                  		// 0x0088 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                PeakActiveParticles;                              		// 0x008C (0x0004) [0x0000000000000000]              
	int                                                InitialAllocationCount;                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      ConvertedModules : 1;                             		// 0x0094 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsSoloing : 1;                                   		// 0x0094 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCookedOut : 1;                                   		// 0x0094 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      EmitterRenderMode;                                		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMaxLifespan ( float InComponentDelay );
};

// Class Engine.ParticleSpriteEmitter
// 0x0003 (0x009C - 0x0099)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleLODLevel
// 0x013C (0x019C - 0x0060)
class UParticleLODLevel : public UObject
{
public:
	struct TArray<class UParticleModuleSpawnBase*>     SpawningModules;                                  		// 0x0060 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModule*>              SpawnModules;                                     		// 0x0070 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModule*>              UpdateModules;                                    		// 0x0080 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModuleOrbit*>         OrbitModules;                                     		// 0x0090 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModuleEventReceiverBase*> EventReceiverModules;                             		// 0x00A0 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModule*>              SpawnRateModules;                                 		// 0x00B0 (0x0010) [0x0000000000001000]              ( CPF_Native )
	struct TArray<class UParticleModule*>              Modules;                                          		// 0x00C0 (0x0010) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00D0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.ParticleLODLevel.ModuleOffsetMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0118 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.ParticleLODLevel.ModuleInstanceOffsetMap
	class UParticleModule*                             TypeDataModule;                                   		// 0x0160 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleSpawn*                        SpawnModule;                                      		// 0x0168 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleEventGenerator*               EventGenerator;                                   		// 0x0170 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UParticleModuleRequired*                     RequiredModule;                                   		// 0x0178 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                Level;                                            		// 0x0180 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PeakActiveParticles;                              		// 0x0184 (0x0004) [0x0000000000000000]              
	int                                                ModuleMapsInstanceSize;                           		// 0x0188 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                ModuleMapsParticleSize;                           		// 0x018C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                ModuleMapsTypeDataOffset;                         		// 0x0190 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                ModuleMapsTypeDataInstanceOffset;                 		// 0x0194 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bEnabled : 1;                                     		// 0x0198 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      ConvertedModules : 1;                             		// 0x0198 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      ModuleMapsCreated : 1;                            		// 0x0198 (0x0004) [0x0000000000003000] [0x00000004] ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModule
// 0x0005 (0x0065 - 0x0060)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bUpdateModule : 1;                                		// 0x0060 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bFinalUpdateModule : 1;                           		// 0x0060 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCurvesAsColor : 1;                               		// 0x0060 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      b3DDrawMode : 1;                                  		// 0x0060 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSupported3DDrawMode : 1;                         		// 0x0060 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bEnabled : 1;                                     		// 0x0060 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEditable : 1;                                    		// 0x0060 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      LODDuplicate : 1;                                 		// 0x0060 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bSpawnRateModule : 1;                             		// 0x0060 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned char                                      LODValidity;                                      		// 0x0064 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAccelerationBase
// 0x0007 (0x006C - 0x0065)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned long                                      bAlwaysInWorldSpace : 1;                          		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAcceleration
// 0x0030 (0x009C - 0x006C)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FBioRawDistributionRwVector3                AccelerationRw;                                   		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bApplyOwnerScale : 1;                             		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x002C (0x0098 - 0x006C)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FBioRawDistributionRwVector3                AccelOverLifeRw;                                  		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAttractorBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAttractorLine
// 0x0060 (0x00C8 - 0x0068)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionFloat                       Range;                                            		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x008C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     EndPoint0;                                        		// 0x00B0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndPoint1;                                        		// 0x00BC (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAttractorParticle
// 0x0059 (0x00C1 - 0x0068)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionFloat                       Range;                                            		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x008C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       EmitterName;                                      		// 0x00B0 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	int                                                LastSelIndex;                                     		// 0x00B8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStrengthByDistance : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenewSource : 1;                                 		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bInheritSourceVel : 1;                            		// 0x00BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x00C0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleAttractorPoint
// 0x0078 (0x00E0 - 0x0068)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FBioRawDistributionRwVector3                PositionRw;                                       		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Range;                                            		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00B8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      StrengthByDistance : 1;                           		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAffectBaseVelocity : 1;                          		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOverrideVelocity : 1;                            		// 0x00DC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseWorldSpacePosition : 1;                       		// 0x00DC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleBeamBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleBeamBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleBeamModifier
// 0x008D (0x00F5 - 0x0068)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	struct FBioRawDistributionRwVector3                PositionRw;                                       		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                TangentRw;                                        		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Strength;                                         		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBeamModifierOptions                        PositionOptions;                                  		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        TangentOptions;                                   		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FBeamModifierOptions                        StrengthOptions;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAbsoluteTangent : 1;                             		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      ModifierType;                                     		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleBeamNoise
// 0x00E4 (0x014C - 0x0068)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	struct FBioRawDistributionRwVector3                NoiseRangeRw;                                     		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                NoiseSpeedRw;                                     		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseRangeScale;                                  		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseTangentStrength;                             		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       NoiseScale;                                       		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                Frequency;                                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Frequency_LowRange;                               		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockRadius;                                  		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseLockTime;                                    		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NoiseTension;                                     		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NoiseTessellation;                                		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyDistance;                                		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLowFreq_Enabled : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bNRScaleEmitterTime : 1;                          		// 0x0148 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSmooth : 1;                                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNoiseLock : 1;                                   		// 0x0148 (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bOscillate : 1;                                   		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseNoiseTangents : 1;                            		// 0x0148 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTargetNoise : 1;                                 		// 0x0148 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bApplyNoiseScale : 1;                             		// 0x0148 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleBeamSource
// 0x008A (0x00F2 - 0x0068)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	struct FBioRawDistributionRwVector3                SourceRw;                                         		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                SourceTangentRw;                                  		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       SourceName;                                       		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSourceAbsolute : 1;                              		// 0x00EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockSource : 1;                                  		// 0x00EC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockSourceTangent : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x00EC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      SourceMethod;                                     		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SourceTangentMethod;                              		// 0x00F1 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleBeamTarget
// 0x008E (0x00F6 - 0x0068)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	struct FBioRawDistributionRwVector3                TargetRw;                                         		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                TargetTangentRw;                                  		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       TargetName;                                       		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LockRadius;                                       		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTargetAbsolute : 1;                              		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLockTarget : 1;                                  		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLockTargetTangent : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bLockTargetStength : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      TargetMethod;                                     		// 0x00F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TargetTangentMethod;                              		// 0x00F5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleCollisionBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleCollision
// 0x00D1 (0x0139 - 0x0068)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FBioRawDistributionRwVector3                DampingFactorRw;                                  		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                DampingFactorRotationRw;                          		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       MaxCollisions;                                    		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       ParticleMass;                                     		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       DelayAmount;                                      		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              DirScalar;                                        		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VerticalFudgeFactor;                              		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyPhysics : 1;                                		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCollidePawns : 1;                                		// 0x0134 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                    		// 0x0134 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;           		// 0x0134 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDropDetail : 1;                                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      CollisionCompletionOption;                        		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleColorBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleColorBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleColor
// 0x0054 (0x00BC - 0x0068)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FBioRawDistributionRwVector3                StartColorRw;                                     		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartAlpha;                                       		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0074 - 0x0068)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                       		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      DefaultColor;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleColorOverLife
// 0x0054 (0x00BC - 0x0068)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FBioRawDistributionRwVector3                ColorOverLifeRw;                                  		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bClampAlpha : 1;                                  		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0054 (0x00BC - 0x0068)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FBioRawDistributionRwVector3                ColorScaleOverLifeRw;                             		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaScaleOverLife;                               		// 0x0094 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEmitterTime : 1;                                 		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleEventBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0078 - 0x0068)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	struct TArray<struct FParticleEvent_GenerateInfo>  Events;                                           		// 0x0068 (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventReceiverBase
// 0x0009 (0x0071 - 0x0068)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	struct FName                                       EventName;                                        		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EventGeneratorType;                               		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0007 (0x0078 - 0x0071)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned long                                      bStopSpawning : 1;                                		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x0057 (0x00C8 - 0x0071)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FBioRawDistributionRwVector3                InheritVelocityScaleRw;                           		// 0x0074 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       SpawnCount;                                       		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bUseParticleTime : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUsePSysLocation : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInheritVelocity : 1;                             		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleKillBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleKillBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleKillBox
// 0x005C (0x00C4 - 0x0068)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FBioRawDistributionRwVector3                LowerLeftCornerRw;                                		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                UpperRightCornerRw;                               		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillInside : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleKillHeight
// 0x0028 (0x0090 - 0x0068)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                           		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bAbsolute : 1;                                    		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bFloor : 1;                                       		// 0x008C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLifetimeBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLifetime
// 0x0024 (0x008C - 0x0068)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationBase
// 0x000F (0x0074 - 0x0065)
class UParticleModuleLocationBase : public UParticleModule
{
public:
	class UDistributionFloatParticleParameter*         m_Seed;                                           		// 0x0068 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      m_bUseSeed : 1;                                   		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bUpdateSeed : 1;                                		// 0x0070 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocation
// 0x002C (0x00A0 - 0x0074)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FBioRawDistributionRwVector3                StartLocationRw;                                  		// 0x0074 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationDirect
// 0x00B0 (0x0124 - 0x0074)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FBioRawDistributionRwVector3                LocationRw;                                       		// 0x0074 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                LocationOffsetRw;                                 		// 0x00A0 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                ScaleFactorRw;                                    		// 0x00CC (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                DirectionRw;                                      		// 0x00F8 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationEmitter
// 0x0015 (0x0089 - 0x0074)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0074 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )
	float                                              InheritSourceVelocityScale;                       		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InheritSourceRotationScale;                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      InheritSourceVelocity : 1;                        		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritSourceRotation : 1;                       		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x0088 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x007C - 0x0074)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                      		// 0x0074 (0x0008) [0x0000000002000009]              ( CPF_Edit | CPF_ExportObject | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0054 (0x00C8 - 0x0074)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	struct FBioRawDistributionRwVector3                StartLocationRw;                                  		// 0x0074 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       VelocityScale;                                    		// 0x00A0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Positive_X : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      Positive_Y : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      Positive_Z : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Negative_X : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      Negative_Y : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      Negative_Z : 1;                                   		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SurfaceOnly : 1;                                  		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      Velocity : 1;                                     		// 0x00C4 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x004D (0x0115 - 0x00C8)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00C8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartHeight;                                      		// 0x00EC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      RadialVelocity : 1;                               		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      HeightAxis;                                       		// 0x0114 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0024 (0x00EC - 0x00C8)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                      		// 0x00C8 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSourceMovement
// 0x002C (0x00A0 - 0x0074)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FBioRawDistributionRwVector3                SourceMovementScaleRw;                            		// 0x0074 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMaterialBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMaterialByParameter
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	struct TArray<struct FName>                        MaterialParameters;                               		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UMaterialInterface*>           DefaultMaterials;                                 		// 0x0078 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0078 - 0x0068)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	struct TArray<class UMaterialInterface*>           MeshMaterials;                                    		// 0x0068 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleOrbitBase
// 0x0007 (0x006C - 0x0065)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleOrbit
// 0x0091 (0x00FD - 0x006C)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	struct FBioRawDistributionRwVector3                OffsetAmountRw;                                   		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                RotationAmountRw;                                 		// 0x0098 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                RotationRateAmountRw;                             		// 0x00C4 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FOrbitOptions                               OffsetOptions;                                    		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FOrbitOptions                               RotationOptions;                                  		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FOrbitOptions                               RotationRateOptions;                              		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ChainMode;                                        		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleOrientationBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0069 - 0x0068)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	unsigned char                                      LockAxisFlags;                                    		// 0x0068 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleParameterBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleParameterBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleParameterDynamic
// 0x0010 (0x0078 - 0x0068)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	struct TArray<struct FEmitterDynamicParameter>     DynamicParams;                                    		// 0x0068 (0x0010) [0x0000000000480041]              ( CPF_Edit | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRequired
// 0x008C (0x00F1 - 0x0065)
class UParticleModuleRequired : public UParticleModule
{
public:
	struct FRawDistributionFloat                       SpawnRate;                                        		// 0x0068 (0x0024) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FParticleBurst>               BurstList;                                        		// 0x008C (0x0010) [0x0000000002400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	struct FVector                                     NormalsSphereCenter;                              		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     NormalsCylinderDirection;                         		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Material;                                         		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDuration;                                  		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDurationLow;                               		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                EmitterLoops;                                     		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelay;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EmitterDelayLow;                                  		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Horizontal;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SubImages_Vertical;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomImageTime;                                  		// 0x00D8 (0x0004) [0x0000000000000000]              
	int                                                RandomImageChanges;                               		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxDrawCount;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DownsampleThresholdScreenFraction;                		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLocalSpace : 1;                               		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bKillOnDeactivate : 1;                            		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bKillOnCompleted : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseLegacyEmitterTime : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bEmitterDurationUseRange : 1;                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDurationRecalcEachLoop : 1;                      		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bEmitterDelayUseRange : 1;                        		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bDelayFirstLoopOnly : 1;                          		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bScaleUV : 1;                                     		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDirectUV : 1;                                    		// 0x00E8 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bUseMaxDrawCount : 1;                             		// 0x00E8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned char                                      ScreenAlignment;                                  		// 0x00EC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SortMode;                                         		// 0x00ED (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ParticleBurstMethod;                              		// 0x00EE (0x0001) [0x0000000000000000]              
	unsigned char                                      InterpolationMethod;                              		// 0x00EF (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EmitterNormalsMode;                               		// 0x00F0 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotationBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleRotationBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMeshRotation
// 0x0030 (0x0098 - 0x0068)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FBioRawDistributionRwVector3                StartRotationRw;                                  		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotation
// 0x0024 (0x008C - 0x0068)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0028 (0x0090 - 0x0068)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                 		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Scale : 1;                                        		// 0x008C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotationRateBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMeshRotationRate
// 0x002C (0x0094 - 0x0068)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FBioRawDistributionRwVector3                StartRotationRateRw;                              		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x002C (0x0094 - 0x0068)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FBioRawDistributionRwVector3                LifeMultiplierRw;                                 		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotationRate
// 0x0024 (0x008C - 0x0068)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0024 (0x008C - 0x0068)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                   		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSizeBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleSizeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSize
// 0x002C (0x0094 - 0x0068)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FBioRawDistributionRwVector3                StartSizeRw;                                      		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0030 (0x0098 - 0x0068)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FBioRawDistributionRwVector3                LifeMultiplierRw;                                 		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0030 (0x0098 - 0x0068)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FBioRawDistributionRwVector3                VelocityMultiplierRw;                             		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSizeScale
// 0x0030 (0x0098 - 0x0068)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FBioRawDistributionRwVector3                SizeScaleRw;                                      		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      EnableX : 1;                                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableY : 1;                                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableZ : 1;                                      		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSizeScaleByTime
// 0x0030 (0x0098 - 0x0068)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FBioRawDistributionRwVector3                SizeScaleByTimeRw;                                		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bEnableX : 1;                                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableY : 1;                                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableZ : 1;                                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSpawnBase
// 0x0007 (0x006C - 0x0065)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                            		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bProcessBurstList : 1;                            		// 0x0068 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSpawn
// 0x0059 (0x00C5 - 0x006C)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                             		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       RateScale;                                        		// 0x0090 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FParticleBurst>               BurstList;                                        		// 0x00B4 (0x0010) [0x0000000002400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear )
	unsigned char                                      ParticleBurstMethod;                              		// 0x00C4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0030 (0x009C - 0x006C)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       SpawnPerUnit;                                     		// 0x006C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	float                                              UnitScalar;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementTolerance;                                		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                   		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleStoreSpawnTimeBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleStoreSpawnTime
// 0x0000 (0x0068 - 0x0068)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSubUVBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSubUV
// 0x0024 (0x008C - 0x0068)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                    		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSubUVMovie
// 0x002C (0x00B8 - 0x008C)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	struct FRawDistributionFloat                       FrameRate;                                        		// 0x008C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                StartingFrame;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseEmitterTime : 1;                              		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSubUVDirect
// 0x0058 (0x00C0 - 0x0068)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FBioRawDistributionRwVector3                SubUVPositionRw;                                  		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                SubUVSizeRw;                                      		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleSubUVSelect
// 0x002C (0x0094 - 0x0068)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FBioRawDistributionRwVector3                SubImageSelectRw;                                 		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTrailBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleTrailBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTrailSource
// 0x0046 (0x00AE - 0x0068)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	struct FRawDistributionFloat                       SourceStrength;                                   		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FRwVector3>                   SourceOffsetDefaults;                             		// 0x008C (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct FName                                       SourceName;                                       		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SourceOffsetCount;                                		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLockSourceStength : 1;                           		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInheritRotation : 1;                             		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      SourceMethod;                                     		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SelectionMethod;                                  		// 0x00AD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTrailSpawn
// 0x000C (0x0074 - 0x0068)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                 		// 0x0068 (0x0008) [0x0000000006080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	float                                              MinSpawnVelocity;                                 		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTrailTaper
// 0x0025 (0x008D - 0x0068)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned char                                      TaperMethod;                                      		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataBase
// 0x0003 (0x0068 - 0x0065)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x001C (0x0084 - 0x0068)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	struct FName                                       ControlEdgeName;                                  		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                SheetsPerTrail;                                   		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0080 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0080 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0080 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x0080 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x0080 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x0080 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x0080 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x0080 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataBeam
// 0x00D2 (0x013A - 0x0068)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	struct FBioRawDistributionRwVector3                EndPointRw;                                       		// 0x0068 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FBioRawDistributionRwVector3                EndPointDirectionRw;                              		// 0x0094 (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       Distance;                                         		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       EmitterStrength;                                  		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TargetStrength;                                   		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	int                                                TessellationFactor;                               		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0134 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0134 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      BeamMethod;                                       		// 0x0138 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      EndPointMethod;                                   		// 0x0139 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataBeam2
// 0x0096 (0x00FE - 0x0068)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	struct FRawDistributionFloat                       Distance;                                         		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperFactor;                                      		// 0x008C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       TaperScale;                                       		// 0x00B0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FName                                       BranchParentName;                                 		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TextureTileDistance;                              		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxBeamCount;                                     		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Speed;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InterpolationPoints;                              		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                UpVectorStepSize;                                 		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAlwaysOn : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      BeamMethod;                                       		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      TaperMethod;                                      		// 0x00FD (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataMesh
// 0x001B (0x0083 - 0x0068)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                             		// 0x0068 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Pitch;                                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Roll;                                             		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Yaw;                                              		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      CastShadows : 1;                                  		// 0x007C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      DoCollisions : 1;                                 		// 0x007C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAllowMotionBlur : 1;                             		// 0x007C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bOverrideMaterial : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCameraFacing : 1;                                		// 0x007C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      MeshAlignment;                                    		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AxisLockOption;                                   		// 0x0081 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CameraFacingOption;                               		// 0x0082 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0026 (0x00A9 - 0x0083)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	struct FPointer                                    RenderInstance;                                   		// 0x0084 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x008C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidRotationCoefficient;                         		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PhysXRotationMethod;                              		// 0x00A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataPhysX
// 0x0018 (0x0080 - 0x0068)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                      		// 0x0068 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UPhysXParticleSystem*                        PhysXParSys;                                      		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0025 (0x008D - 0x0068)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                  		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                SheetsPerTrail;                                   		// 0x006C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxTrailCount;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentSpawningScalar;                            		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TilingDistance;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DistanceTessellationStepSize;                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TangentTessellationScalar;                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                      		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTangentRecalculationEveryFrame : 1;              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bRenderGeometry : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRenderSpawnPoints : 1;                           		// 0x0088 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRenderTangents : 1;                              		// 0x0088 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRenderTessellation : 1;                          		// 0x0088 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned char                                      RenderAxis;                                       		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataTrail
// 0x0038 (0x00A0 - 0x0068)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	struct FRawDistributionFloat                       Tension;                                          		// 0x0068 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FVector                                     SpawnDistance;                                    		// 0x008C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                TessellationFactor;                               		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x009C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x009C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x009C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      Tapered : 1;                                      		// 0x009C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      SpawnByDistance : 1;                              		// 0x009C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0088 - 0x0068)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                               		// 0x0068 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationFactorDistance;                       		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              TessellationStrength;                             		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                TextureTile;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Sheets;                                           		// 0x0078 (0x0004) [0x0000000000000000]              
	int                                                MaxTrailCount;                                    		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticleInTrailCount;                          		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bClipSourceSegement : 1;                          		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RenderGeometry : 1;                               		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      RenderDirectLine : 1;                             		// 0x0084 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      RenderLines : 1;                                  		// 0x0084 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      RenderTessellation : 1;                           		// 0x0084 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberBase
// 0x0013 (0x0078 - 0x0065)
class UParticleModuleUberBase : public UParticleModule
{
public:
	struct TArray<struct FName>                        RequiredModules;                                  		// 0x0068 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberLTISIVCL
// 0x00D8 (0x0150 - 0x0078)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0108 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x012C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00FC (0x0174 - 0x0078)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0108 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x012C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0150 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x016C (0x01E4 - 0x0078)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartVelocity;                                    		// 0x00C0 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x00E4 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0108 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x012C (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      StartLocation;                                    		// 0x0150 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartRotation;                                    		// 0x0174 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionVector                      SizeLifeMultiplier;                               		// 0x0198 (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x01BC (0x0024) [0x0000000002480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_NoClear )
	unsigned long                                      SizeMultiplyX : 1;                                		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      SizeMultiplyY : 1;                                		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      SizeMultiplyZ : 1;                                		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberRainDrops
// 0x0085 (0x00FD - 0x0078)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	struct FVector                                     StartSizeMin;                                     		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartSizeMax;                                     		// 0x0084 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMin;                                 		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartVelocityMax;                                 		// 0x009C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ColorOverLife;                                    		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PC_StartLocation;                                 		// 0x00B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMin;                                 		// 0x00C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartLocationMax;                                 		// 0x00CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMin;                                      		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LifetimeMax;                                      		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMin;                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StartVelocityRadialMax;                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlphaOverLife;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_VelocityScale;                                 		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartRadius;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PC_StartHeight;                                   		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberRainImpacts
// 0x016D (0x01E5 - 0x0078)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_VelocityScale;                                 		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      PC_StartLocation;                                 		// 0x012C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartRadius;                                   		// 0x0150 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       PC_StartHeight;                                   		// 0x0174 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0198 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x01BC (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsUsingCylinder : 1;                             		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bPositive_X : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bPositive_Y : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bPositive_Z : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNegative_X : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bNegative_Y : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bNegative_Z : 1;                                  		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bSurfaceOnly : 1;                                 		// 0x01E0 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bVelocity : 1;                                    		// 0x01E0 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bRadialVelocity : 1;                              		// 0x01E0 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned char                                      PC_HeightAxis;                                    		// 0x01E4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberRainSplashA
// 0x00DC (0x0154 - 0x0078)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartRotation;                                    		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x012C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bInheritParent : 1;                               		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleUberRainSplashB
// 0x00DC (0x0154 - 0x0078)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                         		// 0x0078 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      StartSize;                                        		// 0x009C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      ColorOverLife;                                    		// 0x00C0 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       AlphaOverLife;                                    		// 0x00E4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionVector                      LifeMultiplier;                                   		// 0x0108 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartRotationRate;                                		// 0x012C (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      MultiplyX : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      MultiplyY : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      MultiplyZ : 1;                                    		// 0x0150 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleVelocityBase
// 0x0007 (0x006C - 0x0065)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned long                                      bInWorldSpace : 1;                                		// 0x0068 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleVelocity
// 0x0050 (0x00BC - 0x006C)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FBioRawDistributionRwVector3                StartVelocityRw;                                  		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       StartVelocityRadial;                              		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleVelocityInheritParent
// 0x002C (0x0098 - 0x006C)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FBioRawDistributionRwVector3                ScaleRw;                                          		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0030 (0x009C - 0x006C)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FBioRawDistributionRwVector3                VelOverLifeRw;                                    		// 0x006C (0x002C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      Absolute : 1;                                     		// 0x0098 (0x0004) [0x0000000000000009] [0x00000001] ( CPF_Edit | CPF_ExportObject )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0060 - 0x0060)
class UParticleModuleEventSendToGame : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoEvent ( struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName );
};

// Class Engine.ParticleSystemReplay
// 0x0014 (0x0074 - 0x0060)
class UParticleSystemReplay : public UObject
{
public:
	struct TArray<struct FParticleSystemReplayFrame>   Frames;                                           		// 0x0060 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ClipIDNumber;                                     		// 0x0070 (0x0004) [0x0000000000001001]              ( CPF_Edit | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysXParticleSystem
// 0x005F (0x00BF - 0x0060)
class UPhysXParticleSystem : public UObject
{
public:
	struct FPointer                                    CascadeScene;                                     		// 0x0060 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FPointer                                    PSys;                                             		// 0x0068 (0x0008) [0x0000000000001000]              ( CPF_Native )
	struct FVector                                     ExternalAcceleration;                             		// 0x0070 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxParticles;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                            		// 0x0080 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              CollisionDistance;                                		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithStaticShapes;                      		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestitutionWithDynamicShapes;                     		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithStaticShapes;                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionWithDynamicShapes;                        		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxMotionDistance;                                		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Damping;                                          		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestParticleDistance;                             		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RestDensity;                                      		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              KernelRadiusMultiplier;                           		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Stiffness;                                        		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Viscosity;                                        		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CollisionResponseCoefficient;                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDynamicCollision : 1;                            		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableGravity : 1;                              		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bStaticCollision : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bTwoWayCollision : 1;                             		// 0x00B8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bDestroy : 1;                                     		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bSyncFailed : 1;                                  		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bIsInGame : 1;                                    		// 0x00B8 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned char                                      RBChannel;                                        		// 0x00BC (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      SimulationMethod;                                 		// 0x00BD (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PacketSizeMultiplier;                             		// 0x00BE (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.KActor
// 0x00E0 (0x0398 - 0x02B8)
class AKActor : public ADynamicSMActor
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x02B8 (0x0008) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                          		// 0x02C0 (0x0040) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	struct FPhysEffectInfo                             ImpactEffectInfo;                                 		// 0x0300 (0x0018) [0x0000000000000000]              
	struct FPhysEffectInfo                             SlideEffectInfo;                                  		// 0x0318 (0x0018) [0x0000000000000000]              
	struct FVector                                     ReplicatedDrawScale3D;                            		// 0x0330 (0x000C) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	struct FVector                                     InitialLocation;                                  		// 0x033C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FRotator                                    InitialRotation;                                  		// 0x0348 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UParticleSystemComponent*                    ImpactEffectComponent;                            		// 0x0354 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent;                             		// 0x035C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             ImpactSoundComponent2;                            		// 0x0364 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UParticleSystemComponent*                    SlideEffectComponent;                             		// 0x036C (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SlideSoundComponent;                              		// 0x0374 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              LastImpactTime;                                   		// 0x037C (0x0004) [0x0000000000000000]              
	float                                              LastSlideTime;                                    		// 0x0380 (0x0004) [0x0000000000000000]              
	float                                              StayUprightTorqueFactor;                          		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightMaxTorque;                             		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxPhysicsVelocity;                               		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngErrorAccumulator;                              		// 0x0390 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0394 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0394 (0x0004) [0x0000000100000021] [0x00000002] ( CPF_Edit | CPF_Net | CPF_RepNotify )
	unsigned long                                      bCurrentSlide : 1;                                		// 0x0394 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bSlideActive : 1;                                 		// 0x0394 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableStayUprightSpring : 1;                     		// 0x0394 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLimitMaxPhysicsVelocity : 1;                     		// 0x0394 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNeedsRBStateReplication : 1;                     		// 0x0394 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bDisableClientSidePawnInteractions : 1;           		// 0x0394 (0x0004) [0x0000000000000000] [0x00000080] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Reset ( );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSpawnedByKismet ( );
	void SetPhysicalCollisionProperties ( );
	void eventDestroyed ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventPostBeginPlay ( );
	void ResolveRBState ( );
	class UPhysicalMaterial* GetKActorPhysMaterial ( );
};

// Class Engine.KActorFromStatic
// 0x000C (0x03A4 - 0x0398)
class AKActorFromStatic : public AKActor
{
public:
	class AActor*                                      MyStaticMeshActor;                                		// 0x0398 (0x0008) [0x0000000000000000]              
	float                                              MaxImpulseSpeed;                                  		// 0x03A0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventBump ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitNormal );
	void eventApplyImpulse ( struct FVector ImpulseDir, float ImpulseMag, struct FVector HitLocation, struct FTraceHitInfo HitInfo, class UClass* DamageType );
	class AKActorFromStatic* MakeDynamic ( class UStaticMeshComponent* MovableMesh );
	void MakeStatic ( );
	void BecomeStatic ( );
	void eventOnWakeRBPhysics ( );
	void eventOnSleepRBPhysics ( );
};

// Class Engine.KActorSpawnable
// 0x0004 (0x039C - 0x0398)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                          		// 0x0398 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bScalingToZero : 1;                               		// 0x0398 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetComponents ( );
	void eventRecycleInternal ( );
	void Recycle ( );
	void Initialize ( );
};

// Class Engine.KAsset
// 0x001E (0x028C - 0x026E)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                            		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class USkeletalMesh*                               ReplicatedMesh;                                   		// 0x0278 (0x0008) [0x0000000100002020]              ( CPF_Net | CPF_Transient | CPF_RepNotify )
	class UPhysicsAsset*                               ReplicatedPhysAsset;                              		// 0x0280 (0x0008) [0x0000000100002020]              ( CPF_Net | CPF_Transient | CPF_RepNotify )
	unsigned long                                      bDamageAppliesImpulse : 1;                        		// 0x0288 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bWakeOnLevelStart : 1;                            		// 0x0288 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bBlockPawns : 1;                                  		// 0x0288 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void OnTeleport ( class USeqAct_Teleport* inAction );
	void OnToggle ( class USeqAct_Toggle* Action );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	void eventReplicatedEvent ( struct FName VarName );
	void SetMeshAndPhysAsset ( class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset );
	void eventPostBeginPlay ( );
};

// Class Engine.Pawn
// 0x0316 (0x0584 - 0x026E)
class APawn : public AActor
{
public:
	struct FDouble                                     TimeSpentCalculatingReachableThisFrame;           		// 0x0270 (0x0008) [0x0000000000000000]              
	struct FRootMotionCurve                            RootMotionInterpCurve;                            		// 0x0278 (0x0020) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCachedReachableResult>       CachedReachableResults;                           		// 0x0298 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     MenuName;                                         		// 0x02A8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<class UAnimNodeSlot*>                SlotNodes;                                        		// 0x02B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UInterpGroup*>                 InterpGroupList;                                  		// 0x02C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ControllerClass;                                  		// 0x02D8 (0x0008) [0x0000000000000000]              
	class UClass*                                      HitDamageType;                                    		// 0x02E0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class UClass*                                      InventoryManagerClass;                            		// 0x02E8 (0x0008) [0x0000000000000000]              
	struct FVector                                     SerpentineDir;                                    		// 0x02F0 (0x000C) [0x0000000000000000]              
	struct FVector                                     Floor;                                            		// 0x02FC (0x000C) [0x0000000000000000]              
	struct FVector                                     RMVelocity;                                       		// 0x0308 (0x000C) [0x0000000000000000]              
	struct FVector                                     noise1spot;                                       		// 0x0314 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     noise2spot;                                       		// 0x0320 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     TakeHitLocation;                                  		// 0x032C (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FVector                                     TearOffMomentum;                                  		// 0x0338 (0x000C) [0x0000000000000020]              ( CPF_Net )
	struct FRotator                                    DesiredRotation;                                  		// 0x0344 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     FlashLocation;                                    		// 0x0350 (0x000C) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	struct FVector                                     LastFiringFlashLocation;                          		// 0x035C (0x000C) [0x0000000000000000]              
	struct FVector                                     RootMotionInterpCurveLastValue;                   		// 0x0368 (0x000C) [0x0000000000000020]              ( CPF_Net )
	class AController*                                 Controller;                                       		// 0x0374 (0x0008) [0x0000000104000020]              ( CPF_Net | CPF_EditInline | CPF_RepNotify )
	class APawn*                                       NextPawn;                                         		// 0x037C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APlayerController*                           LastRealViewer;                                   		// 0x0384 (0x0008) [0x0000000000000000]              
	class AActor*                                      LastViewer;                                       		// 0x038C (0x0008) [0x0000000000000000]              
	class UPathConstraint*                             PathConstraintList;                               		// 0x0394 (0x0008) [0x0000000000000000]              
	class UPathGoalEvaluator*                          PathGoalList;                                     		// 0x039C (0x0008) [0x0000000000000000]              
	class ANavigationPoint*                            Anchor;                                           		// 0x03A4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class ANavigationPoint*                            LastAnchor;                                       		// 0x03AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APhysicsVolume*                              HeadVolume;                                       		// 0x03B4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class APawn*                                       noise1other;                                      		// 0x03BC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APawn*                                       noise2other;                                      		// 0x03C4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x03CC (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class ALadderVolume*                               OnLadder;                                         		// 0x03D4 (0x0008) [0x0000000000000000]              
	struct FName                                       LandMovementState;                                		// 0x03DC (0x0008) [0x0000000000000000]              
	struct FName                                       WaterMovementState;                               		// 0x03E4 (0x0008) [0x0000000000000000]              
	class APlayerStart*                                LastStartSpot;                                    		// 0x03EC (0x0008) [0x0000000000000000]              
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x03F4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x03FC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AVehicle*                                    DrivenVehicle;                                    		// 0x0404 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class AController*                                 LastHitBy;                                        		// 0x040C (0x0008) [0x0000000000000000]              
	class AInventoryManager*                           InvManager;                                       		// 0x0414 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class AWeapon*                                     Weapon;                                           		// 0x041C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                     		// 0x0424 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_BodyInstance*                            PhysicsPushBody;                                  		// 0x042C (0x0008) [0x0000000000000000]              
	class UAudioComponent*                             FacialAudioComp;                                  		// 0x0434 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class UMaterialInstanceConstant*                   MIC_PawnMat;                                      		// 0x043C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UMaterialInstanceConstant*                   MIC_PawnHair;                                     		// 0x0444 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     Stats;                                            		// 0x044C (0x0008) [0x0000000004402008]              ( CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	float                                              MaxStepHeight;                                    		// 0x0454 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxJumpHeight;                                    		// 0x0458 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              WalkableFloorZ;                                   		// 0x045C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LedgeCheckThreshold;                              		// 0x0460 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NetRelevancyTime;                                 		// 0x0464 (0x0004) [0x0000000000000000]              
	float                                              UncrouchTime;                                     		// 0x0468 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CrouchHeight;                                     		// 0x046C (0x0004) [0x0000000000000000]              
	float                                              CrouchRadius;                                     		// 0x0470 (0x0004) [0x0000000000000000]              
	int                                                FullHeight;                                       		// 0x0474 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              NonPreferredVehiclePathMultiplier;                		// 0x0478 (0x0004) [0x0000000000000000]              
	float                                              DesiredSpeed;                                     		// 0x047C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDesiredSpeed;                                  		// 0x0480 (0x0004) [0x0000000000000000]              
	float                                              HearingThreshold;                                 		// 0x0484 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Alertness;                                        		// 0x0488 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SightRadius;                                      		// 0x048C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PeripheralVision;                                 		// 0x0490 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AvgPhysicsTime;                                   		// 0x0494 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Mass;                                             		// 0x0498 (0x0004) [0x0000000000000000]              
	float                                              Buoyancy;                                         		// 0x049C (0x0004) [0x0000000000000000]              
	float                                              MeleeRange;                                       		// 0x04A0 (0x0004) [0x0000000000000000]              
	int                                                AnchorItem;                                       		// 0x04A4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              FindAnchorFailedTime;                             		// 0x04A8 (0x0004) [0x0000000000000000]              
	float                                              LastValidAnchorTime;                              		// 0x04AC (0x0004) [0x0000000000000000]              
	float                                              DestinationOffset;                                		// 0x04B0 (0x0004) [0x0000000000000000]              
	float                                              NextPathRadius;                                   		// 0x04B4 (0x0004) [0x0000000000000000]              
	float                                              SerpentineDist;                                   		// 0x04B8 (0x0004) [0x0000000000000000]              
	float                                              SerpentineTime;                                   		// 0x04BC (0x0004) [0x0000000000000000]              
	float                                              SpawnTime;                                        		// 0x04C0 (0x0004) [0x0000000000000000]              
	int                                                MaxPitchLimit;                                    		// 0x04C4 (0x0004) [0x0000000000000000]              
	float                                              TimeToRememberReachableResults;                   		// 0x04C8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                LastFrameCalculatedReachable;                     		// 0x04CC (0x0004) [0x0000000000000000]              
	float                                              GroundSpeed;                                      		// 0x04D0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WaterSpeed;                                       		// 0x04D4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              AirSpeed;                                         		// 0x04D8 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              LadderSpeed;                                      		// 0x04DC (0x0004) [0x0000000000000000]              
	float                                              AccelRate;                                        		// 0x04E0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              JumpZ;                                            		// 0x04E4 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              OutofWaterZ;                                      		// 0x04E8 (0x0004) [0x0000000000000000]              
	float                                              MaxOutOfWaterStepHeight;                          		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              AirControl;                                       		// 0x04F0 (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              WalkingPct;                                       		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              CrouchedPct;                                      		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              MaxFallSpeed;                                     		// 0x04FC (0x0004) [0x0000000000000000]              
	float                                              AIMaxFallSpeedFactor;                             		// 0x0500 (0x0004) [0x0000000000000000]              
	float                                              BaseEyeHeight;                                    		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EyeHeight;                                        		// 0x0508 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplashTime;                                       		// 0x050C (0x0004) [0x0000000000000000]              
	float                                              OldZ;                                             		// 0x0510 (0x0004) [0x0000000000000000]              
	int                                                Health;                                           		// 0x0514 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	int                                                HealthMax;                                        		// 0x0518 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BreathTime;                                       		// 0x051C (0x0004) [0x0000000000000000]              
	float                                              UnderWaterTime;                                   		// 0x0520 (0x0004) [0x0000000000000000]              
	float                                              LastPainTime;                                     		// 0x0524 (0x0004) [0x0000000000000000]              
	float                                              noise1time;                                       		// 0x0528 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise1loudness;                                   		// 0x052C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2time;                                       		// 0x0530 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              noise2loudness;                                   		// 0x0534 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SoundDampening;                                   		// 0x0538 (0x0004) [0x0000000000000000]              
	float                                              DamageScaling;                                    		// 0x053C (0x0004) [0x0000000000000000]              
	float                                              LastStartTime;                                    		// 0x0540 (0x0004) [0x0000000000000000]              
	float                                              RBPushRadius;                                     		// 0x0544 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RBPushStrength;                                   		// 0x0548 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AlwaysRelevantDistanceSquared;                    		// 0x054C (0x0004) [0x0000000000000000]              
	float                                              VehicleCheckRadius;                               		// 0x0550 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewPitchMin;                                     		// 0x0554 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ViewPitchMax;                                     		// 0x0558 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AllowedYawError;                                  		// 0x055C (0x0004) [0x0000000000000000]              
	float                                              m_fWallSlideSpeedAdj;                             		// 0x0560 (0x0004) [0x0000000000000000]              
	int                                                ShotCount;                                        		// 0x0564 (0x0004) [0x0000000000000000]              
	int                                                FailedLandingCount;                               		// 0x0568 (0x0004) [0x0000000000000000]              
	float                                              RootMotionInterpRate;                             		// 0x056C (0x0004) [0x0000000000000020]              ( CPF_Net )
	float                                              RootMotionInterpCurrentTime;                      		// 0x0570 (0x0004) [0x0000000000000020]              ( CPF_Net )
	unsigned long                                      bUseDeltaReplication : 1;                         		// 0x0574 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bSkipPawnPropertyReplication : 1;                 		// 0x0574 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      BioSoftwareSkinned : 1;                           		// 0x0574 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bUpAndOut : 1;                                    		// 0x0574 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bIsWalking : 1;                                   		// 0x0574 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bWantsToCrouch : 1;                               		// 0x0574 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bIsCrouched : 1;                                  		// 0x0574 (0x0004) [0x0000000000000022] [0x00000040] ( CPF_Const | CPF_Net )
	unsigned long                                      bTryToUncrouch : 1;                               		// 0x0574 (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanCrouch : 1;                                   		// 0x0574 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bCrawler : 1;                                     		// 0x0574 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bReducedSpeed : 1;                                		// 0x0574 (0x0004) [0x0000000000000002] [0x00000400] ( CPF_Const )
	unsigned long                                      bJumpCapable : 1;                                 		// 0x0574 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bCanJump : 1;                                     		// 0x0574 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCanWalk : 1;                                     		// 0x0574 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCanSwim : 1;                                     		// 0x0574 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bCanFly : 1;                                      		// 0x0574 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bCanClimbLadders : 1;                             		// 0x0574 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCanStrafe : 1;                                   		// 0x0574 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bAvoidLedges : 1;                                 		// 0x0574 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bStopAtLedges : 1;                                		// 0x0574 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bAllowLedgeOverhang : 1;                          		// 0x0574 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bSimulateGravity : 1;                             		// 0x0574 (0x0004) [0x0000000000000002] [0x00200000] ( CPF_Const )
	unsigned long                                      bIgnoreForces : 1;                                		// 0x0574 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bCanWalkOffLedges : 1;                            		// 0x0574 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bCanBeBaseForPawns : 1;                           		// 0x0574 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bSimGravityDisabled : 1;                          		// 0x0574 (0x0004) [0x0000000000000002] [0x02000000] ( CPF_Const )
	unsigned long                                      bDirectHitWall : 1;                               		// 0x0574 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bPushesRigidBodies : 1;                           		// 0x0574 (0x0004) [0x0000000000000002] [0x08000000] ( CPF_Const )
	unsigned long                                      bForceFloorCheck : 1;                             		// 0x0574 (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bForceKeepAnchor : 1;                             		// 0x0574 (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bCanMantle : 1;                                   		// 0x0574 (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bCanClimbUp : 1;                                  		// 0x0574 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bCanClimbCeilings : 1;                            		// 0x0578 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCanSwatTurn : 1;                                 		// 0x0578 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bCanLeap : 1;                                     		// 0x0578 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bCanCoverSlip : 1;                                		// 0x0578 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bDisplayPathErrors : 1;                           		// 0x0578 (0x0004) [0x0000000000044000] [0x00000010] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0578 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bCanPickupInventory : 1;                          		// 0x0578 (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bAmbientCreature : 1;                             		// 0x0578 (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bLOSHearing : 1;                                  		// 0x0578 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMuffledHearing : 1;                              		// 0x0578 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bDontPossess : 1;                                 		// 0x0578 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bAutoFire : 1;                                    		// 0x0578 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bRollToDesired : 1;                               		// 0x0578 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bStationary : 1;                                  		// 0x0578 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bCachedRelevant : 1;                              		// 0x0578 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bSpecialHUD : 1;                                  		// 0x0578 (0x0004) [0x0000000000000000] [0x00008000] 
	unsigned long                                      bNoWeaponFiring : 1;                              		// 0x0578 (0x0004) [0x0000000000000000] [0x00010000] 
	unsigned long                                      bCanUse : 1;                                      		// 0x0578 (0x0004) [0x0000000000000000] [0x00020000] 
	unsigned long                                      bModifyReachSpecCost : 1;                         		// 0x0578 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bModifyNavPointDest : 1;                          		// 0x0578 (0x0004) [0x0000000000000000] [0x00080000] 
	unsigned long                                      bPathfindsAsVehicle : 1;                          		// 0x0578 (0x0004) [0x0000000000000000] [0x00100000] 
	unsigned long                                      bRunPhysicsWithNoController : 1;                  		// 0x0578 (0x0004) [0x0000000000000000] [0x00200000] 
	unsigned long                                      bForceMaxAccel : 1;                               		// 0x0578 (0x0004) [0x0000000000000000] [0x00400000] 
	unsigned long                                      bLimitFallAccel : 1;                              		// 0x0578 (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bReplicateHealthToAll : 1;                        		// 0x0578 (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bForceRMVelocity : 1;                             		// 0x0578 (0x0004) [0x0000000000000000] [0x02000000] 
	unsigned long                                      bForceRegularVelocity : 1;                        		// 0x0578 (0x0004) [0x0000000000000000] [0x04000000] 
	unsigned long                                      bPlayedDeath : 1;                                 		// 0x0578 (0x0004) [0x0000000000000000] [0x08000000] 
	unsigned long                                      bDesiredRotationSet : 1;                          		// 0x0578 (0x0004) [0x0000000000000002] [0x10000000] ( CPF_Const )
	unsigned long                                      bLockDesiredRotation : 1;                         		// 0x0578 (0x0004) [0x0000000000000002] [0x20000000] ( CPF_Const )
	unsigned long                                      bUnlockWhenReached : 1;                           		// 0x0578 (0x0004) [0x0000000000000002] [0x40000000] ( CPF_Const )
	unsigned long                                      m_bEnableRagdollRecovery : 1;                     		// 0x0578 (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      m_bIsWallSliding : 1;                             		// 0x057C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bNeedsBaseTickedFirst : 1;                        		// 0x057C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bRootMotionFromInterpCurve : 1;                   		// 0x057C (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bDebugShowCameraLocation : 1;                     		// 0x057C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      PathSearchType;                                   		// 0x0580 (0x0001) [0x0000000000000000]              
	unsigned char                                      RemoteViewPitch;                                  		// 0x0581 (0x0001) [0x0000000000000022]              ( CPF_Const | CPF_Net )
	unsigned char                                      FlashCount;                                       		// 0x0582 (0x0001) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	unsigned char                                      FiringMode;                                       		// 0x0583 (0x0001) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USkeletalMeshComponent* GetPrimarySkelMeshComponent ( );
	bool IsOnSamePathNetwork ( class APawn* P );
	bool IsBioSoftwareSkinned ( );
	void GetAdjustedMoveDirection ( class AActor* MoveTarget, struct FVector* Dest, struct FVector* Direction );
	bool IsDead ( );
	bool InPlayerParty ( );
	float GetMaxSpeed ( );
	float GetDesiredSpeed ( );
	void SetDesiredSpeed ( float fSpeedScaling );
	void SetRootMotionInterpCurrentTime ( float inTime, float DeltaTime, unsigned long bUpdateSkelPose );
	void SetCinematicMode ( unsigned long bInCinematicMode );
	void ZeroMovementVariables ( );
	void ClearPathStep ( );
	void DrawPathStep ( class UCanvas* C );
	void IncrementPathChild ( int Cnt, class UCanvas* C );
	void IncrementPathStep ( int Cnt, class UCanvas* C );
	class UPathGoalEvaluator* CreatePathGoalEvaluator ( class UClass* GoalEvalClass );
	class UPathConstraint* CreatePathConstraint ( class UClass* ConstraintClass );
	void AddGoalEvaluator ( class UPathGoalEvaluator* Evaluator );
	void AddPathConstraint ( class UPathConstraint* Constraint );
	void ClearConstraints ( );
	void eventSoakPause ( );
	void eventBecomeViewTarget ( class APlayerController* PC );
	void AdjustCameraScale ( unsigned long bMoveCameraIn );
	void eventMessagePlayer ( struct FString Msg );
	bool EffectIsRelevant ( struct FVector SpawnLocation, unsigned long bForceDedicated, float CullDistance );
	void OnTeleport ( class USeqAct_Teleport* Action );
	void OnSetMaterial ( class USeqAct_SetMaterial* Action );
	float GetDamageScaling ( );
	void DoKismetAttachment ( class AActor* Attachment, class USeqAct_AttachToActor* Action );
	void eventSpawnedByKismet ( );
	bool IsStationary ( );
	struct FVector GetCollisionExtent ( );
	float GetCollisionHeight ( );
	float GetCollisionRadius ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void PlayWeaponSwitch ( class AWeapon* OldWeapon, class AWeapon* NewWeapon );
	void SetActiveWeapon ( class AWeapon* NewWeapon );
	void TossInventory ( class AInventory* Inv, struct FVector ForceVelocity );
	void ThrowActiveWeapon ( );
	void DrawHUD ( class AHUD* H );
	class AInventory* FindInventoryType ( class UClass* DesiredClass, unsigned long bAllowSubclass );
	class AInventory* eventCreateInventory ( class UClass* NewInvClass, unsigned long bDoNotActivate );
	void AddDefaultInventory ( );
	void eventStopDriving ( class AVehicle* V );
	void eventStartDriving ( class AVehicle* V );
	bool CanThrowWeapon ( );
	void Suicide ( );
	class AVehicle* GetVehicleBase ( );
	void PlayLanded ( float ImpactVel );
	bool CannotJumpNow ( );
	void eventPlayFootStepSound ( int FootDown );
	void eventTornOff ( );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void SetDyingPhysics ( );
	void TurnOff ( );
	void PlayHit ( float Damage, class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, struct FTraceHitInfo HitInfo, class APawn* DamageCauser );
	void PlayDyingSound ( );
	bool DoJump ( unsigned long bUpdating );
	bool CheckWaterJump ( struct FVector* WallNormal );
	void TakeDrowningDamage ( );
	void eventBreathTimer ( );
	bool IsInPain ( );
	bool TouchingWaterVolume ( );
	void eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume );
	void eventLanded ( struct FVector HitNormal, class AActor* FloorActor );
	void eventFalling ( );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowWeaponOnDeath ( );
	bool eventIsSameTeam ( class APawn* Other );
	class ATeamInfo* GetTeam ( );
	unsigned char GetTeamNum ( );
	void eventTakeDamage ( float Damage, class AController* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* instigatedBy, class UClass* DamageType );
	void NotifyTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	bool eventTakeRadiusDamageOnBones ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, struct TArray<struct FName> Bones );
	void PruneDamagedBoneList ( struct TArray<struct FName>* Bones );
	bool eventHealDamage ( int Amount, class AController* Healer, class UClass* DamageType );
	void AdjustDamage ( class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo, int* inDamage, struct FVector* Momentum );
	void SetMovementPhysics ( );
	void Gasp ( );
	void OnGiveInventory ( class USeqAct_GiveInventory* inAction );
	void OnAssignController ( class USeqAct_AssignController* inAction );
	void eventReceivedNewEvent ( class USequenceEvent* Evt );
	void SpawnDefaultController ( );
	void eventPostBeginPlay ( );
	void eventPreBeginPlay ( );
	void eventDestroyed ( );
	void DetachFromController ( unsigned long bDestroyController );
	void CrushedBy ( class APawn* OtherPawn );
	bool CanBeBaseForPawn ( class APawn* aPawn );
	void eventBaseChange ( );
	void eventStuckOnPawn ( class APawn* OtherPawn );
	void JumpOffPawn ( );
	void gibbedBy ( class AActor* Other );
	void eventEncroachedBy ( class AActor* Other );
	bool eventEncroachingOn ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	void eventUpdatePawnRotation ( struct FRotator NewRotation );
	void ClientSetRotation ( struct FRotator NewRotation );
	void ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );
	void ClientRestart ( );
	void Restart ( );
	void TakeFallingDamage ( );
	void KilledBy ( class APawn* EventInstigator );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void HandleMomentum ( struct FVector Momentum, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void RestartPlayer ( );
	void eventStartCrouch ( float HeightAdjust );
	void eventEndCrouch ( float HeightAdjust );
	void ShouldCrouch ( unsigned long bCrouch );
	void UnCrouch ( );
	void eventOutsideWorldBounds ( );
	void eventFellOutOfWorld ( class UClass* dmgType );
	void eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity );
	void JumpOutOfWater ( struct FVector jumpDir );
	void FinishedInterpolation ( );
	void eventClientMessage ( struct FString S, struct FName Type );
	void ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void HandlePickup ( class AInventory* Inv );
	float AdjustedStrength ( );
	bool LineOfSightTo ( class AActor* Other );
	void SetMoveTarget ( class AActor* NewTarget );
	class AActor* GetMoveTarget ( );
	bool NearMoveTarget ( );
	bool AffectedByHitEffects ( );
	bool InGodMode ( );
	bool PawnCalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	void SetViewRotation ( struct FRotator NewRotation );
	struct FRotator GetAdjustedAimFor ( class AWeapon* W, struct FVector StartFireLoc );
	bool eventInFreeCam ( );
	struct FRotator eventGetBaseAimRotation ( );
	struct FVector eventGetWeaponStartTraceLocation ( class AWeapon* CurrentWeapon );
	struct FVector eventGetPawnViewLocation ( );
	struct FRotator eventGetViewRotation ( );
	void eventGetActorEyesViewPoint ( struct FVector* out_Location, struct FRotator* out_rotation );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	bool IsFirstPerson ( );
	bool WasPlayerPawn ( );
	bool IsPlayerPawn ( );
	bool IsLocallyControlled ( class AController* PawnController );
	bool IsHumanControlled ( class AController* PawnController );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void ClimbLadder ( class ALadderVolume* L );
	void EndClimbLadder ( class ALadderVolume* OldLadder );
	bool CanSplash ( );
	void eventSetWalking ( unsigned long bNewIsWalking );
	float RangedAttackTime ( );
	bool RecommendLongRangedAttack ( );
	bool CanGrabLadder ( );
	void DropToGround ( );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void UnPossessed ( );
	void UpdateControllerOnPossess ( unsigned long bVehicleTransition );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	void NotifyTeamChanged ( );
	void PlayTeleportEffect ( unsigned long bOut, unsigned long bSound );
	struct FString GetHumanReadableName ( );
	bool NeedToTurn ( struct FVector targ );
	bool IsFiring ( );
	bool HasRangedAttack ( );
	bool FireOnRelease ( );
	bool TooCloseToAttack ( class AActor* Other );
	bool CanAttack ( class AActor* Other );
	unsigned char ChooseFireMode ( );
	bool BotFire ( unsigned long bFinished );
	void WeaponStoppedFiring ( class AWeapon* InWeapon, unsigned long bViaReplication );
	void WeaponFired ( class AWeapon* InWeapon, unsigned long bViaReplication, struct FVector HitLocation );
	void FlashLocationUpdated ( class AWeapon* InWeapon, struct FVector InFlashLocation, unsigned long bViaReplication );
	void Internal_ClearFlashLocation ( class AWeapon* InWeapon, struct FVector* out_FlashLocation );
	void ClearFlashLocation ( class AWeapon* InWeapon );
	void Internal_SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc, struct FVector* out_FlashLocation );
	void SetFlashLocation ( class AWeapon* InWeapon, unsigned char InFiringMode, struct FVector NewLoc );
	void Internal_ClearFlashCount ( class AWeapon* InWeapon, unsigned char* out_FlashCountVar );
	void ClearFlashCount ( class AWeapon* InWeapon );
	void FlashCountUpdated ( class AWeapon* InWeapon, unsigned char InFlashCount, unsigned long bViaReplication );
	void Internal_IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned char* out_FlashCountVar );
	void IncrementFlashCount ( class AWeapon* InWeapon, unsigned char InFiringMode );
	void FiringModeUpdated ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned long bViaReplication );
	void Internal_SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode, unsigned char* out_FiringModeVar );
	void SetFiringMode ( class AWeapon* InWeapon, unsigned char InFiringMode );
	unsigned char GetWeaponFiringMode ( class AWeapon* InWeapon );
	void StopFire ( unsigned char FireModeNum );
	void StartFire ( unsigned char FireModeNum );
	bool StopFiring ( );
	void Reset ( );
	void PlayerChangedTeam ( );
	void SetBaseEyeheight ( );
	bool IsFriendly ( class APawn* Other );
	bool IsHostile ( class APawn* Other );
	bool eventSpecialMoveThruEdge ( unsigned char Type, int Dir, struct FVector MoveStart, struct FVector MoveDest, class AActor* RelActor, int RelItem );
	bool SpecialMoveTo ( class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next );
	bool TermRagdoll ( );
	bool InitRagdoll ( );
	bool IsValidEnemy ( );
	int SpecialCostForPath ( class UReachSpec* Path );
	void GetBoundingCylinder ( float* CollisionRadius, float* CollisionHeight );
	bool ReachedDesiredRotation ( );
	void SetPushesRigidBodies ( unsigned long NewPush );
	void ForceCrouch ( );
	bool ReachedPoint ( struct FVector Point, class AActor* NewAnchor );
	bool ReachedDestination ( class AActor* Goal );
	class ANavigationPoint* GetBestAnchor ( class AActor* TestActor, struct FVector TestLocation, unsigned long bStartPoint, unsigned long bOnlyCheckVisible, float* out_Dist );
	void SetAnchor ( class ANavigationPoint* NewAnchor );
	void SetRemoteViewPitch ( int NewRemoteViewPitch );
	bool IsInvisible ( );
	bool IsValidEnemyTargetFor ( class APlayerReplicationInfo* PRI, unsigned long bNoPRIisEnemy );
	bool IsValidTargetFor ( class AController* C );
	float GetFallDuration ( );
	bool SuggestJumpVelocity ( struct FVector Destination, struct FVector Start, struct FVector* JumpVelocity );
	bool ValidAnchor ( );
	struct FVector AdjustDestination ( class AActor* GoalActor, struct FVector Dest );
	bool IsAliveAndWell ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventSetSkelControlScale ( struct FName SkelControlName, float Scale );
	void eventSetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	class UFaceFXAsset* eventGetActorFaceFXAsset ( );
	void FaceFXAudioFinished ( class UAudioComponent* AC );
	void OnPlayFaceFXAnim ( class USeqAct_PlayFaceFXAnim* inAction );
	bool CanActorPlayFaceFXAnim ( );
	bool IsActorPlayingFaceFXAnim ( );
	class UAudioComponent* eventGetFaceFXAudioComponent ( );
	void eventStopActorFaceFXAnim ( );
	bool eventPlayActorFaceFXAnim ( class UFaceFXAnimSet* AnimSet, struct FString GroupName, struct FString SeqName, class USoundCue* SoundCueToPlay );
	void eventMAT_BeginAIGroup ( struct FVector StartLoc, struct FRotator StartRot );
	void eventInterpolationFinished ( class USeqAct_Interp* InterpAction );
	void eventInterpolationStarted ( class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst );
	void MAT_SetSkelControlScale ( struct FName SkelControlName, float Scale );
	void MAT_SetMorphWeight ( struct FName MorphNodeName, float MorphWeight );
	void MAT_SetAnimWeights ( struct TArray<struct FAnimSlotInfo> SlotInfos );
	void MAT_SetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void eventSetAnimPosition ( struct FName SlotName, int ChannelIndex, struct FName InAnimSeqName, float InPosition, unsigned long bFireNotifies, unsigned long bLooping );
	void MAT_FinishAnimControl ( class UInterpGroup* InInterpGroup );
	void eventFinishAnimControl ( class UInterpGroup* InInterpGroup );
	void MAT_BeginAnimControl ( class UInterpGroup* InInterpGroup );
	void eventBeginAnimControl ( class UInterpGroup* InInterpGroup );
	bool eventRestoreAnimSetsToDefault ( );
	void eventAnimSetListUpdated ( );
	void eventBuildScriptAnimSetList ( );
	void UpdateAnimSetList ( );
	void ClearAnimNodes ( );
	void CacheAnimNodes ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	bool IsDesiredRotationLocked ( );
	bool IsDesiredRotationInUse ( );
	void CheckDesiredRotation ( );
	void ResetDesiredRotation ( );
	void LockDesiredRotation ( unsigned long Lock, unsigned long InUnlockWhenReached );
	bool SetDesiredRotation ( struct FRotator TargetDesiredRotation, unsigned long InLockDesiredRotation, unsigned long InUnlockWhenReached, float InterpolationTime );
};

// Class Engine.Vehicle
// 0x007D (0x0601 - 0x0584)
class AVehicle : public APawn
{
public:
	struct TArray<struct FVector>                      ExitPositions;                                    		// 0x0584 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      CrushedDamageType;                                		// 0x0594 (0x0008) [0x0000000000000000]              
	struct FVector                                     ExitOffset;                                       		// 0x059C (0x000C) [0x0000000000000000]              
	struct FVector                                     TargetLocationAdjustment;                         		// 0x05A8 (0x000C) [0x0000000000000000]              
	class APawn*                                       Driver;                                           		// 0x05B4 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	float                                              ExitRadius;                                       		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              Steering;                                         		// 0x05C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Throttle;                                         		// 0x05C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rise;                                             		// 0x05C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DriverDamageMult;                                 		// 0x05CC (0x0004) [0x0000000000000000]              
	float                                              MomentumMult;                                     		// 0x05D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinCrushSpeed;                                    		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              ForceCrushPenetration;                            		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              ThrottleTime;                                     		// 0x05DC (0x0004) [0x0000000000000000]              
	float                                              StuckTime;                                        		// 0x05E0 (0x0004) [0x0000000000000000]              
	float                                              OldSteering;                                      		// 0x05E4 (0x0004) [0x0000000000000000]              
	float                                              OnlySteeringStartTime;                            		// 0x05E8 (0x0004) [0x0000000000000000]              
	float                                              OldThrottle;                                      		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              AIMoveCheckTime;                                  		// 0x05F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              VehicleMovingTime;                                		// 0x05F4 (0x0004) [0x0000000000000000]              
	float                                              TurnTime;                                         		// 0x05F8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDriving : 1;                                     		// 0x05FC (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bDriverIsVisible : 1;                             		// 0x05FC (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bAttachDriver : 1;                                		// 0x05FC (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x05FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSeparateTurretFocus : 1;                         		// 0x05FC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bFollowLookDir : 1;                               		// 0x05FC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bHasHandbrake : 1;                                		// 0x05FC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bScriptedRise : 1;                                		// 0x05FC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bDuckObstacles : 1;                               		// 0x05FC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bAvoidReversing : 1;                              		// 0x05FC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bRetryPathfindingWithDriver : 1;                  		// 0x05FC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bIgnoreStallZ : 1;                                		// 0x05FC (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                   		// 0x05FC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned char                                      StuckCount;                                       		// 0x0600 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ZeroMovementVariables ( );
	void NotifyDriverTakeHit ( class AController* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum );
	void eventReplicatedEvent ( struct FName VarName );
	void DrivingStatusChanged ( );
	void HandleDeadVehicleDriver ( );
	void SetDriving ( unsigned long B );
	struct FVector eventGetEntryLocation ( );
	void CrushedBy ( class APawn* OtherPawn );
	void PancakeOther ( class APawn* Other );
	bool eventEncroachingOn ( class AActor* Other );
	class AController* GetCollisionDamageInstigator ( );
	void eventEncroachedBy ( class AActor* Other );
	void FaceRotation ( struct FRotator NewRotation, float DeltaTime );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	void PlayDying ( class UClass* DamageType, struct FVector HitLoc );
	void DriverDied ( class UClass* DamageType );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void ThrowActiveWeapon ( );
	void AdjustDriverDamage ( class AController* instigatedBy, struct FVector HitLocation, class UClass* DamageType, float* Damage, struct FVector* Momentum );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
	class AController* SetKillInstigator ( class AController* instigatedBy, class UClass* DamageType );
	void UnPossessed ( );
	bool TryExitPos ( class APawn* ExitingDriver, struct FVector ExitPos, unsigned long bMustFindGround );
	bool FindAutoExit ( class APawn* ExitingDriver );
	bool PlaceExitingDriver ( class APawn* ExitingDriver );
	void DriverLeft ( );
	void SetInputs ( float InForward, float InStrafe, float InUp );
	bool eventDriverLeave ( unsigned long bForceLeave );
	struct FRotator GetExitRotation ( class AController* C );
	bool eventContinueOnFoot ( );
	void DetachDriver ( class APawn* P );
	void AttachDriver ( class APawn* P );
	void EntryAnnouncement ( class AController* C );
	void PossessedBy ( class AController* C, unsigned long bVehicleTransition );
	bool DriverEnter ( class APawn* P );
	bool TryToDrive ( class APawn* P );
	bool AnySeatAvailable ( );
	bool CanEnterVehicle ( class APawn* P );
	void Destroyed_HandleDriver ( );
	void eventDestroyed ( );
	bool CheatFly ( );
	bool CheatGhost ( );
	bool CheatWalk ( );
	void eventPostBeginPlay ( );
	void SetBaseEyeheight ( );
	void PlayerChangedTeam ( );
	void DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation, class AActor* DamageCauser, float DamageFalloffExponent );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	struct FVector GetTargetLocation ( class AActor* RequestedBy, unsigned long bRequestAlternateLoc );
	float GetMaxRiseForce ( );
	void Suicide ( );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void NotifyTeamChanged ( );
};

// Class Engine.SVehicle
// 0x014F (0x0750 - 0x0601)
class ASVehicle : public AVehicle
{
public:
	unsigned char                                      UnknownData00[ 0xF ];                             		// 0x0601 (0x000F) MISSED OFFSET
	struct FVehicleState                               VState;                                           		// 0x0610 (0x0050) [0x0000000000001022]              ( CPF_Const | CPF_Net | CPF_Native )
	struct TArray<class USVehicleWheel*>               Wheels;                                           		// 0x0660 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FVector                                     COMOffset;                                        		// 0x0670 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     InertiaTensorMultiplier;                          		// 0x067C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     BaseOffset;                                       		// 0x0688 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class USVehicleSimBase*                            SimObj;                                           		// 0x0694 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UAudioComponent*                             EngineSound;                                      		// 0x069C (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAudioComponent*                             SquealSound;                                      		// 0x06A4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USoundCue*                                   CollisionSound;                                   		// 0x06AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EnterVehicleSound;                                		// 0x06B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitVehicleSound;                                 		// 0x06BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                       		// 0x06C4 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                    		// 0x06CC (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              StayUprightRollResistAngle;                       		// 0x06D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightPitchResistAngle;                      		// 0x06D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightStiffness;                             		// 0x06DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StayUprightDamping;                               		// 0x06E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HeavySuspensionShiftPercent;                      		// 0x06E4 (0x0004) [0x0000000000000000]              
	float                                              MaxSpeed;                                         		// 0x06E8 (0x0004) [0x0000000000000021]              ( CPF_Edit | CPF_Net )
	float                                              MaxAngularVelocity;                               		// 0x06EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TimeOffGround;                                    		// 0x06F0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              UprightLiftStrength;                              		// 0x06F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTorqueStrength;                            		// 0x06F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightTime;                                      		// 0x06FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              UprightStartTime;                                 		// 0x0700 (0x0004) [0x0000000000000000]              
	float                                              CollisionIntervalSecs;                            		// 0x0704 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SquealThreshold;                                  		// 0x0708 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SquealLatThreshold;                               		// 0x070C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LatAngleVolumeMult;                               		// 0x0710 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStartOffsetSecs;                            		// 0x0714 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              EngineStopOffsetSecs;                             		// 0x0718 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LastCollisionSoundTime;                           		// 0x071C (0x0004) [0x0000000000000000]              
	float                                              OutputBrake;                                      		// 0x0720 (0x0004) [0x0000000000000000]              
	float                                              OutputGas;                                        		// 0x0724 (0x0004) [0x0000000000000000]              
	float                                              OutputSteering;                                   		// 0x0728 (0x0004) [0x0000000000000000]              
	float                                              OutputRise;                                       		// 0x072C (0x0004) [0x0000000000000000]              
	float                                              ForwardVel;                                       		// 0x0730 (0x0004) [0x0000000000000000]              
	int                                                NumPoweredWheels;                                 		// 0x0734 (0x0004) [0x0000000000000000]              
	float                                              CamDist;                                          		// 0x0738 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DriverViewPitch;                                  		// 0x073C (0x0004) [0x0000000000000000]              
	int                                                DriverViewYaw;                                    		// 0x0740 (0x0004) [0x0000000000000000]              
	float                                              AngErrorAccumulator;                              		// 0x0744 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              RadialImpulseScaling;                             		// 0x0748 (0x0004) [0x0000000000000000]              
	unsigned long                                      bStayUpright : 1;                                 		// 0x074C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSuspensionAxis : 1;                           		// 0x074C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bUpdateWheelShapes : 1;                           		// 0x074C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bVehicleOnGround : 1;                             		// 0x074C (0x0004) [0x0000000000000002] [0x00000008] ( CPF_Const )
	unsigned long                                      bVehicleOnWater : 1;                              		// 0x074C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bIsInverted : 1;                                  		// 0x074C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bChassisTouchingGround : 1;                       		// 0x074C (0x0004) [0x0000000000000002] [0x00000040] ( CPF_Const )
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;            		// 0x074C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )
	unsigned long                                      bCanFlip : 1;                                     		// 0x074C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bFlipRight : 1;                                   		// 0x074C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsUprighting : 1;                                		// 0x074C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bOutputHandbrake : 1;                             		// 0x074C (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned long                                      bHoldingDownHandbrake : 1;                        		// 0x074C (0x0004) [0x0000000000000000] [0x00001000] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetAllWheelParticleSystem ( class UParticleSystem* NewSystem );
	void GetSVehicleDebug ( struct TArray<struct FString>* DebugInfo );
	float HermiteEval ( float Slip );
	void DisplayWheelsDebug ( class AHUD* HUD, float YL );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void PostTeleport ( class ATeleporter* OutTeleporter );
	void eventSuspensionHeavyShift ( float Delta );
	void eventRigidBodyCollision ( class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData );
	void DrivingStatusChanged ( );
	void VehiclePlayExitSound ( );
	void VehiclePlayEnterSound ( );
	void StopEngineSoundTimed ( );
	void StopEngineSound ( );
	void StartEngineSoundTimed ( );
	void StartEngineSound ( );
	bool HasWheelsOnGround ( );
	bool TryToDrive ( class APawn* P );
	struct FName GetDefaultCameraMode ( class APlayerController* RequestedBy );
	bool CalcCamera ( float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV );
	bool Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation );
	void AddVelocity ( struct FVector NewVelocity, struct FVector HitLocation, class UClass* DamageType, struct FTraceHitInfo HitInfo );
	void InitVehicleRagdoll ( class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, struct FVector ActorMove, unsigned long bClearAnimTree );
	void TakeRadiusDamage ( class AController* instigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HurtOrigin, unsigned long bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent, struct FTraceHitInfo HitInfo );
	void StopVehicleSounds ( );
	void TurnOff ( );
	void eventDestroyed ( );
	void eventPostInitAnimTree ( class USkeletalMeshComponent* SkelComp );
	void eventPostBeginPlay ( );
	void SetWheelCollision ( int WheelNum, unsigned long bCollision );
	bool IsSleeping ( );
	void AddTorque ( struct FVector Torque );
	void AddImpulse ( struct FVector impulse );
	void AddForce ( struct FVector Force );
};

// Class Engine.RB_ConstraintActor
// 0x0034 (0x02A4 - 0x0270)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                                 		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      ConstraintActor2;                                 		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor1;                                		// 0x0280 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      PulleyPivotActor2;                                		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class URB_ConstraintSetup*                         ConstraintSetup;                                  		// 0x0290 (0x0008) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	class URB_ConstraintInstance*                      ConstraintInstance;                               		// 0x0298 (0x0008) [0x0000000006400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoClear | CPF_EditInline )
	unsigned long                                      bDisableCollision : 1;                            		// 0x02A0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateActor1RefFrame : 1;                        		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateActor2RefFrame : 1;                        		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggleConstraintDrive ( class USeqAct_ToggleConstraintDrive* Action );
	void OnToggle ( class USeqAct_Toggle* Action );
	void OnDestroy ( class USeqAct_Destroy* Action );
	void TermConstraint ( );
	void InitConstraint ( class AActor* Actor1, class AActor* Actor2, struct FName Actor1Bone, struct FName Actor2Bone, float BreakThreshold );
	void SetDisableCollision ( unsigned long NewDisableCollision );
};

// Class Engine.RB_LineImpulseActor
// 0x0015 (0x0285 - 0x0270)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	class UArrowComponent*                             Arrow;                                            		// 0x0270 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ImpulseStrength;                                  		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRange;                                     		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopAtFirstHit : 1;                              		// 0x0280 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0280 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      ImpulseCount;                                     		// 0x0284 (0x0001) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
	void FireLineImpulse ( );
};

// Class Engine.RB_RadialImpulseActor
// 0x0011 (0x0281 - 0x0270)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0270 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                 		// 0x0278 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned char                                      ImpulseCount;                                     		// 0x0280 (0x0001) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

// Class Engine.RB_Thruster
// 0x0008 (0x0278 - 0x0270)
class ARB_Thruster : public ARigidBodyBase
{
public:
	float                                              ThrustStrength;                                   		// 0x0270 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      bThrustEnabled : 1;                               		// 0x0274 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
};

// Class Engine.RB_ConstraintDrawComponent
// 0x0008 (0x022C - 0x0224)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                    		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_RadialImpulseComponent
// 0x0015 (0x0239 - 0x0224)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	class UDrawSphereComponent*                        PreviewSphere;                                    		// 0x0224 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ImpulseStrength;                                  		// 0x022C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpulseRadius;                                    		// 0x0230 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelChange : 1;                                   		// 0x0234 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCauseFracture : 1;                               		// 0x0234 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      ImpulseFalloff;                                   		// 0x0238 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void FireImpulse ( struct FVector Origin );
};

// Class Engine.RB_Handle
// 0x0076 (0x00FC - 0x0086)
class URB_Handle : public UActorComponent
{
public:
	struct FPointer                                    HandleData;                                       		// 0x0088 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    KinActorData;                                     		// 0x0090 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     LinearStiffnessScale3D;                           		// 0x0098 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     LinearDampingScale3D;                             		// 0x00A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Destination;                                      		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FVector                                     StepSize;                                         		// 0x00BC (0x000C) [0x0000000000000000]              
	struct FVector                                     location;                                         		// 0x00C8 (0x000C) [0x0000000000000000]              
	class UPrimitiveComponent*                         GrabbedComponent;                                 		// 0x00D4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       GrabbedBoneName;                                  		// 0x00DC (0x0008) [0x0000000000000000]              
	int                                                SceneIndex;                                       		// 0x00E4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              LinearDamping;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearStiffness;                                  		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularStiffness;                                 		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInHardware : 1;                                  		// 0x00F8 (0x0004) [0x0000000000003002] [0x00000001] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bRotationConstrained : 1;                         		// 0x00F8 (0x0004) [0x0000000000003002] [0x00000002] ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bInterpolating : 1;                               		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000004] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FQuat GetOrientation ( );
	void SetOrientation ( struct FQuat* NewOrientation );
	void UpdateSmoothLocation ( struct FVector* NewLocation );
	void SetSmoothLocation ( struct FVector NewLocation, float MoveTime );
	void SetLocation ( struct FVector NewLocation );
	void ReleaseComponent ( );
	void GrabComponent ( class UPrimitiveComponent* Component, struct FName InBoneName, struct FVector GrabLocation, unsigned long bConstrainRotation );
};

// Class Engine.RB_Spring
// 0x0062 (0x00E8 - 0x0086)
class URB_Spring : public UActorComponent
{
public:
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                          		// 0x0088 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FPointer                                    SpringData;                                       		// 0x009C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UPrimitiveComponent*                         Component1;                                       		// 0x00A4 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName1;                                        		// 0x00AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrimitiveComponent*                         Component2;                                       		// 0x00B4 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       BoneName2;                                        		// 0x00BC (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x00C4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeSinceActivation;                              		// 0x00C8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              MinBodyMass;                                      		// 0x00CC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              SpringSaturateDist;                               		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpringMaxForce;                                   		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForceMassRatio;                                		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampSaturateVel;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DampMaxForce;                                     		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInHardware : 1;                                  		// 0x00E4 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bEnableForceMassRatio : 1;                        		// 0x00E4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Clear ( );
	void SetComponents ( class UPrimitiveComponent* InComponent1, struct FName InBoneName1, struct FVector Position1, class UPrimitiveComponent* InComponent2, struct FName InBoneName2, struct FVector Position2 );
};

// Class Engine.SVehicleSimBase
// 0x003A (0x00C0 - 0x0086)
class USVehicleSimBase : public UActorComponent
{
public:
	float                                              WheelSuspensionStiffness;                         		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionDamping;                           		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelSuspensionBias;                              		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumSlip;                            		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongExtremumValue;                           		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteSlip;                           		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLongAsymptoteValue;                          		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumSlip;                             		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatExtremumValue;                            		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteSlip;                            		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelLatAsymptoteValue;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelInertia;                                     		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AutoDriveSteer;                                   		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bWheelSpeedOverride : 1;                          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bClampedFrictionModel : 1;                        		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAutoDrive : 1;                                   		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SVehicleSimCar
// 0x0038 (0x00F8 - 0x00C0)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                               		// 0x00C0 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              ChassisTorqueScale;                               		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteerSpeed;                                       		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReverseThrottle;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineBrakeFactor;                                		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxBrakeTorque;                                   		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopThreshold;                                    		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ActualSteering;                                   		// 0x00EC (0x0004) [0x0000000000000000]              
	float                                              TimeSinceThrottle;                                		// 0x00F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsDriving : 1;                                   		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SVehicleSimTank
// 0x0030 (0x0128 - 0x00F8)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                     		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              RightTrackVel;                                    		// 0x00FC (0x0004) [0x0000000000000000]              
	float                                              LeftTrackTorque;                                  		// 0x0100 (0x0004) [0x0000000000000000]              
	float                                              RightTrackTorque;                                 		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              MaxEngineTorque;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              EngineDamping;                                    		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InsideTrackTorqueFactor;                          		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteeringLatStiffnessFactor;                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnInPlaceThrottle;                              		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnMaxGripReduction;                             		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TurnGripScaleRate;                                		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTurnInPlaceOnSteer : 1;                          		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysicalMaterial
// 0x0094 (0x00F4 - 0x0060)
class UPhysicalMaterial : public UObject
{
public:
	struct FVector                                     AnisoFrictionDir;                                 		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             ImpactEffect;                                     		// 0x006C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ImpactSound;                                      		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             SlideEffect;                                      		// 0x007C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SlideSound;                                       		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundExplosion;                           		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   FractureSoundSingle;                              		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       m_nmPhysicsCollisionSound;                        		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterial*                           Parent;                                           		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                         		// 0x00AC (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaterialIndex;                                    		// 0x00B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Friction;                                         		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Restitution;                                      		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrictionV;                                        		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Density;                                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularDamping;                                   		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearDamping;                                    		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MagneticResponse;                                 		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindResponse;                                     		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactThreshold;                                  		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ImpactReFireDelay;                                		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideThreshold;                                   		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SlideReFireDelay;                                 		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioObstruction;                                 		// 0x00E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AudioOcclusion;                                   		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceConeFriction : 1;                           		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAnisotropicFriction : 1;                   		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bIgnoreSelfCollisions : 1;                      		// 0x00F0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void AllPhysicalMaterials ( class UPhysicalMaterial** OutPhysMat );
	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty ( class UClass* DesiredClass );
	void FindFractureSounds ( class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle );
	struct FPhysEffectInfo FindPhysEffectInfo ( unsigned char Type );
};

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0060 - 0x0060)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysicsAsset
// 0x0080 (0x00E0 - 0x0060)
class UPhysicsAsset : public UObject
{
public:
	struct FMap_Mirror                                 BodySetupIndexMap;                                		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class URB_BodySetup*>                BodySetup;                                        		// 0x00A8 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<int>                                 BoundsBodies;                                     		// 0x00B8 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class URB_ConstraintSetup*>          ConstraintSetup;                                  		// 0x00C8 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class UPhysicsAssetInstance*                       DefaultInstance;                                  		// 0x00D8 (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int FindBodyIndex ( struct FName BodyName );
};

// Class Engine.PhysicsAssetInstance
// 0x0090 (0x00F0 - 0x0060)
class UPhysicsAssetInstance : public UObject
{
public:
	struct FMap_Mirror                                 CollisionDisableTable;                            		// 0x0060 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class URB_BodyInstance*>             Bodies;                                           		// 0x00A8 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class URB_ConstraintInstance*>       Constraints;                                      		// 0x00B8 (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class AActor*                                      Owner;                                            		// 0x00C8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                RootBodyIndex;                                    		// 0x00D0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LinearSpringScale;                                		// 0x00D4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearDampingScale;                               		// 0x00D8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              LinearForceLimitScale;                            		// 0x00DC (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularSpringScale;                               		// 0x00E0 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularDampingScale;                              		// 0x00E4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              AngularForceLimitScale;                           		// 0x00E8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bInitBodies : 1;                                  		// 0x00EC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bHasFixedBody : 1;                                		// 0x00EC (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class URB_ConstraintInstance* FindConstraintInstance ( struct FName ConName, class UPhysicsAsset* InAsset );
	class URB_BodyInstance* FindBodyInstance ( struct FName BodyName, class UPhysicsAsset* InAsset );
	void SetFullAnimWeightBonesFixed ( unsigned long bNewFixed, class USkeletalMeshComponent* SkelMesh );
	void SetFullAnimWeightBlockRigidBody ( unsigned long bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh );
	void SetNamedBodiesBlockRigidBody ( unsigned long bNewBlockRigidBody, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh );
	void SetNamedRBBoneSprings ( unsigned long bEnable, struct TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp );
	void SetNamedMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetNamedMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSetOtherBodiesToComplement );
	void SetAllMotorsAngularDriveParams ( float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, unsigned long bSkipFullAnimWeightBodies );
	void SetAllMotorsAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, unsigned long bSkipFullAnimWeightBodies );
	void ForceAllBodiesBelowUnfixed ( class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, unsigned long InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName );
	void SetNamedBodiesFixed ( unsigned long bNewFixed, struct TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, unsigned long bSetOtherBodiesToComplement, unsigned long bSkipFullAnimWeightBodies );
	void SetAllBodiesFixed ( unsigned long bNewFixed );
	float GetTotalMassBelowBone ( struct FName InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh );
	void SetAngularDriveScale ( float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale );
	void SetLinearDriveScale ( float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale );
};

// Class Engine.PhysicsLODVerticalDestructible
// 0x0008 (0x0068 - 0x0060)
class UPhysicsLODVerticalDestructible : public UObject
{
public:
	int                                                MaxDynamicChunkCount;                             		// 0x0060 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )
	float                                              DebrisLifetime;                                   		// 0x0064 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0064 - 0x0060)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                               		// 0x0060 (0x0004) [0x0000000000005000]              ( CPF_Native | CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_BodyInstance
// 0x0078 (0x00D8 - 0x0060)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x0060 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	struct FPointer                                    BodyData;                                         		// 0x0068 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpring;                                       		// 0x0070 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    BoneSpringKinActor;                               		// 0x0078 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     Velocity;                                         		// 0x0080 (0x000C) [0x0000000000000000]              
	struct FVector                                     PreviousVelocity;                                 		// 0x008C (0x000C) [0x0000000000000000]              
	int                                                BodyIndex;                                        		// 0x0098 (0x0004) [0x0800000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x009C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              BoneLinearSpring;                                 		// 0x00A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneLinearDamping;                                		// 0x00A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularSpring;                                		// 0x00A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              BoneAngularDamping;                               		// 0x00AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              OverextensionThreshold;                           		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CustomGravityFactor;                              		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastEffectPlayedTime;                             		// 0x00B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnableBoneSpringLinear : 1;                      		// 0x00BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableBoneSpringAngular : 1;                     		// 0x00BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDisableOnOverextension : 1;                      		// 0x00BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                  		// 0x00BC (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTeleportOnOverextension : 1;                     		// 0x00BC (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUseKinActorForBoneSpring : 1;                    		// 0x00BC (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;          		// 0x00BC (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bOnlyCollideWithPawns : 1;                        		// 0x00BC (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableCollisionResponse : 1;                     		// 0x00BC (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bPushBody : 1;                                    		// 0x00BC (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	class UPhysicalMaterial*                           PhysMaterialOverride;                             		// 0x00C0 (0x0008) [0x0800000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ContactReportForceThreshold;                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceMassScale;                                		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InstanceDampingScale;                             		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bForceUnfixed : 1;                                		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bInstanceAlwaysFullAnimWeight : 1;                		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateDampingProperties ( );
	void UpdateMassProperties ( class URB_BodySetup* Setup );
	void SetContactReportForceThreshold ( float Threshold );
	void EnableCollisionResponse ( unsigned long bEnableResponse );
	void SetPhysMaterialOverride ( class UPhysicalMaterial* NewPhysMaterial );
	void SetBlockRigidBody ( unsigned long bNewBlockRigidBody );
	void SetBoneSpringTarget ( unsigned long bTeleport, struct FMatrix* InBoneTarget );
	void SetBoneSpringParams ( float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping );
	void EnableBoneSpring ( unsigned long bInEnableLinear, unsigned long bInEnableAngular, struct FMatrix* InBoneTarget );
	struct FVector GetUnrealWorldVelocityAtPoint ( struct FVector Point );
	struct FVector GetUnrealWorldAngularVelocity ( );
	struct FVector GetUnrealWorldVelocity ( );
	struct FMatrix GetUnrealWorldTM ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	bool IsValidBodyInstance ( );
	bool IsFixed ( );
	void SetFixed ( unsigned long bNewFixed );
	float GetBodyMass ( );
};

// Class Engine.RB_ConstraintInstance
// 0x0080 (0x00E0 - 0x0060)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                            		// 0x0060 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                            		// 0x0070 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    ConstraintData;                                   		// 0x0080 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FVector                                     LinearPositionTarget;                             		// 0x0088 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LinearVelocityTarget;                             		// 0x0094 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     AngularVelocityTarget;                            		// 0x00A0 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPrimitiveComponent*                         OwnerComponent;                                   		// 0x00AC (0x0008) [0x080000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	int                                                ConstraintIndex;                                  		// 0x00B4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SceneIndex;                                       		// 0x00B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              LinearDriveSpring;                                		// 0x00BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveDamping;                               		// 0x00C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              LinearDriveForceLimit;                            		// 0x00C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveSpring;                               		// 0x00C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveDamping;                              		// 0x00CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              AngularDriveForceLimit;                           		// 0x00D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bInHardware : 1;                                  		// 0x00D4 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned long                                      bLinearXPositionDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearXVelocityDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYPositionDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearYVelocityDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZPositionDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	unsigned long                                      bLinearZVelocityDrive : 1;                        		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingPositionDrive : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSwingVelocityDrive : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistPositionDrive : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTwistVelocityDrive : 1;                          		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAngularSlerpDrive : 1;                           		// 0x00D4 (0x0004) [0x0000000000000003] [0x00000800] ( CPF_Edit | CPF_Const )
	unsigned long                                      bTerminated : 1;                                  		// 0x00D4 (0x0004) [0x0000000000000000] [0x00001000] 
	struct FPointer                                    DummyKinActor;                                    		// 0x00D8 (0x0008) [0x0800000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void MoveKinActorTransform ( struct FMatrix* NewTM );
	void SetLinearLimitSize ( float NewLimitSize );
	void SetAngularDOFLimitScale ( float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup );
	void SetAngularDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetAngularVelocityTarget ( struct FVector InVelTarget );
	void SetAngularPositionTarget ( struct FQuat* InPosTarget );
	void SetLinearDriveParams ( float InSpring, float InDamping, float InForceLimit );
	void SetLinearVelocityTarget ( struct FVector InVelTarget );
	void SetLinearPositionTarget ( struct FVector InPosTarget );
	void SetAngularVelocityDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetAngularPositionDrive ( unsigned long bEnableSwingDrive, unsigned long bEnableTwistDrive );
	void SetLinearVelocityDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	void SetLinearPositionDrive ( unsigned long bEnableXDrive, unsigned long bEnableYDrive, unsigned long bEnableZDrive );
	struct FVector GetConstraintLocation ( );
	class UPhysicsAssetInstance* GetPhysicsAssetInstance ( );
	void TermConstraint ( );
	void InitConstraint ( class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, unsigned long bMakeKinForBody1 );
};

// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x0124 - 0x0060)
class URB_ConstraintSetup : public UObject
{
public:
	struct FVector                                     Pos1;                                             		// 0x0060 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis1;                                         		// 0x006C (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis1;                                         		// 0x0078 (0x000C) [0x0000000000000000]              
	struct FVector                                     Pos2;                                             		// 0x0084 (0x000C) [0x0000000000000000]              
	struct FVector                                     PriAxis2;                                         		// 0x0090 (0x000C) [0x0000000000000000]              
	struct FVector                                     SecAxis2;                                         		// 0x009C (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot1;                                     		// 0x00A8 (0x000C) [0x0000000000000000]              
	struct FVector                                     PulleyPivot2;                                     		// 0x00B4 (0x000C) [0x0000000000000000]              
	struct FName                                       JointName;                                        		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       ConstraintBone1;                                  		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ConstraintBone2;                                  		// 0x00D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearXSetup;                                     		// 0x00D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearYSetup;                                     		// 0x00E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearDOFSetup                             LinearZSetup;                                     		// 0x00E8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitStiffness;                             		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearLimitDamping;                               		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LinearBreakThreshold;                             		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing1LimitAngle;                                 		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Swing2LimitAngle;                                 		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitAngle;                                  		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitStiffness;                              		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SwingLimitDamping;                                		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitStiffness;                              		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TwistLimitDamping;                                		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AngularBreakThreshold;                            		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PulleyRatio;                                      		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableProjection : 1;                            		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLinearLimitSoft : 1;                             		// 0x0120 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bLinearBreakable : 1;                             		// 0x0120 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSwingLimited : 1;                                		// 0x0120 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bTwistLimited : 1;                                		// 0x0120 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSwingLimitSoft : 1;                              		// 0x0120 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bTwistLimitSoft : 1;                              		// 0x0120 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAngularBreakable : 1;                            		// 0x0120 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsPulley : 1;                                    		// 0x0120 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bMaintainMinDistance : 1;                         		// 0x0120 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_BSJointSetup
// 0x0000 (0x0124 - 0x0124)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0124 - 0x0124)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_HingeSetup
// 0x0000 (0x0124 - 0x0124)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0124 - 0x0124)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0124 - 0x0124)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0124 - 0x0124)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0124 - 0x0124)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SVehicleWheel
// 0x00DD (0x014D - 0x0070)
class USVehicleWheel : public UComponent
{
public:
	struct FPointer                                    WheelShape;                                       		// 0x0070 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UClass*                                      WheelPSCClass;                                    		// 0x0078 (0x0008) [0x0000000000000000]              
	struct FVector                                     BoneOffset;                                       		// 0x0080 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     WheelPosition;                                    		// 0x008C (0x000C) [0x0000000000000000]              
	struct FVector                                     ContactNormal;                                    		// 0x0098 (0x000C) [0x0000000000000000]              
	struct FVector                                     LongDirection;                                    		// 0x00A4 (0x000C) [0x0000000000000000]              
	struct FVector                                     LatDirection;                                     		// 0x00B0 (0x000C) [0x0000000000000000]              
	struct FName                                       SkelControlName;                                  		// 0x00BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkelControlWheel*                           WheelControl;                                     		// 0x00C4 (0x0008) [0x0000000000000000]              
	struct FName                                       BoneName;                                         		// 0x00CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystem*                             WheelParticleSystem;                              		// 0x00D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UParticleSystemComponent*                    WheelParticleComp;                                		// 0x00DC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SlipParticleParamName;                            		// 0x00E4 (0x0008) [0x0000000000000000]              
	float                                              Steer;                                            		// 0x00EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MotorTorque;                                      		// 0x00F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BrakeTorque;                                      		// 0x00F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ChassisTorque;                                    		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SteerFactor;                                      		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WheelRadius;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionTravel;                                 		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SuspensionSpeed;                                  		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LongSlipFactor;                                   		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LatSlipFactor;                                    		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLongSlipFactor;                          		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              HandbrakeLatSlipFactor;                           		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ParkedSlipFactor;                                 		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpinVel;                                          		// 0x0120 (0x0004) [0x0000000000000000]              
	float                                              LongSlipRatio;                                    		// 0x0124 (0x0004) [0x0000000000000000]              
	float                                              LatSlipAngle;                                     		// 0x0128 (0x0004) [0x0000000000000000]              
	float                                              ContactForce;                                     		// 0x012C (0x0004) [0x0000000000000000]              
	float                                              LongImpulse;                                      		// 0x0130 (0x0004) [0x0000000000000000]              
	float                                              LatImpulse;                                       		// 0x0134 (0x0004) [0x0000000000000000]              
	float                                              DesiredSuspensionPosition;                        		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              SuspensionPosition;                               		// 0x013C (0x0004) [0x0000000000000000]              
	float                                              CurrentRotation;                                  		// 0x0140 (0x0004) [0x0000000000000000]              
	int                                                WheelMaterialIndex;                               		// 0x0144 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPoweredWheel : 1;                                		// 0x0148 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHoverWheel : 1;                                  		// 0x0148 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCollidesVehicles : 1;                            		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bCollidesPawns : 1;                               		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bIsSquealing : 1;                                 		// 0x0148 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWheelOnGround : 1;                               		// 0x0148 (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned char                                      Side;                                             		// 0x014C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxGenericForceFieldBrush
// 0x00DE (0x0392 - 0x02B4)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	struct TArray<struct FPointer>                     ConvexMeshes;                                     		// 0x02B4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     ExclusionShapes;                                  		// 0x02C4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     ExclusionShapePoses;                              		// 0x02D4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ForceField;                                       		// 0x02E4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    LinearKernel;                                     		// 0x02EC (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Constant;                                         		// 0x02F4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x0300 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x030C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x0318 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x0324 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x0330 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x033C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0348 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x0354 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0360 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x036C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0378 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	int                                                ExcludeChannel;                                   		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RBChannel;                                        		// 0x0390 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      Coordinates;                                      		// 0x0391 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool StopsProjectile ( class AProjectile* P );
	void eventPostBeginPlay ( );
};

// Class Engine.RB_ForceFieldExcludeVolume
// 0x0004 (0x02B8 - 0x02B4)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxForceField
// 0x0053 (0x02C1 - 0x026E)
class ANxForceField : public AActor
{
public:
	struct TArray<struct FPointer>                     ConvexMeshes;                                     		// 0x0270 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     ExclusionShapes;                                  		// 0x0280 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FPointer>                     ExclusionShapePoses;                              		// 0x0290 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    ForceField;                                       		// 0x02A0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    U2NRotation;                                      		// 0x02A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ExcludeChannel;                                   		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x02B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SceneIndex;                                       		// 0x02B8 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bForceActive : 1;                                 		// 0x02BC (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned char                                      RBChannel;                                        		// 0x02C0 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* inAction );
	void DoInitRBPhys ( );
};

// Class Engine.NxCylindricalForceField
// 0x0033 (0x02F4 - 0x02C1)
class ANxCylindricalForceField : public ANxForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              RadialStrength;                                   		// 0x02CC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RotationalStrength;                               		// 0x02D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftStrength;                                     		// 0x02D4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02D8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceTopRadius;                                   		// 0x02DC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftFalloffHeight;                                		// 0x02E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              EscapeVelocity;                                   		// 0x02E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceHeight;                                      		// 0x02E8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HeightOffset;                                     		// 0x02EC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      UseSpecialRadialForce : 1;                        		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxCylindricalForceFieldCapsule
// 0x0008 (0x02FC - 0x02F4)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02F4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoInitRBPhys ( );
};

// Class Engine.NxForceFieldGeneric
// 0x00BC (0x037D - 0x02C1)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	struct FPointer                                    LinearKernel;                                     		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Constant;                                         		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x0308 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0314 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0320 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x032C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0338 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0344 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0350 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UForceFieldShape*                            Shape;                                            		// 0x035C (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x0364 (0x0008) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              RoughExtentX;                                     		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentY;                                     		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoughExtentZ;                                     		// 0x0374 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x0378 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x037C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoInitRBPhys ( );
};

// Class Engine.NxForceFieldRadial
// 0x0028 (0x02E9 - 0x02C1)
class ANxForceFieldRadial : public ANxForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UForceFieldShape*                            Shape;                                            		// 0x02CC (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x02D4 (0x0008) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x02DC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SelfRotationStrength;                             		// 0x02E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned char                                      ForceFalloff;                                     		// 0x02E8 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoInitRBPhys ( );
};

// Class Engine.NxForceFieldTornado
// 0x0047 (0x0308 - 0x02C1)
class ANxForceFieldTornado : public ANxForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UForceFieldShape*                            Shape;                                            		// 0x02CC (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )
	class UActorComponent*                             DrawComponent;                                    		// 0x02D4 (0x0008) [0x0000000004081008]              ( CPF_ExportObject | CPF_Native | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x02DC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RotationalStrength;                               		// 0x02E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftStrength;                                     		// 0x02E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02E8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceTopRadius;                                   		// 0x02EC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftFalloffHeight;                                		// 0x02F0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              EscapeVelocity;                                   		// 0x02F4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceHeight;                                      		// 0x02F8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HeightOffset;                                     		// 0x02FC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SelfRotationStrength;                             		// 0x0300 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x0304 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoInitRBPhys ( );
};

// Class Engine.NxGenericForceField
// 0x00A0 (0x0361 - 0x02C1)
class ANxGenericForceField : public ANxForceField
{
public:
	struct FPointer                                    LinearKernel;                                     		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     Constant;                                         		// 0x02CC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierX;                              		// 0x02D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierY;                              		// 0x02E4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionMultiplierZ;                              		// 0x02F0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     PositionTarget;                                   		// 0x02FC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierX;                              		// 0x0308 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierY;                              		// 0x0314 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityMultiplierZ;                              		// 0x0320 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     VelocityTarget;                                   		// 0x032C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Noise;                                            		// 0x0338 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffLinear;                                    		// 0x0344 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     FalloffQuadratic;                                 		// 0x0350 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TorusRadius;                                      		// 0x035C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Coordinates;                                      		// 0x0360 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxGenericForceFieldBox
// 0x0017 (0x0378 - 0x0361)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	struct FVector                                     BoxExtent;                                        		// 0x0364 (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	class UDrawBoxComponent*                           RenderComponent;                                  		// 0x0370 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DoInitRBPhys ( );
};

// Class Engine.NxGenericForceFieldCapsule
// 0x0013 (0x0374 - 0x0361)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x0364 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              CapsuleHeight;                                    		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CapsuleRadius;                                    		// 0x0370 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxRadialForceField
// 0x001C (0x02DD - 0x02C1)
class ANxRadialForceField : public ANxForceField
{
public:
	struct FPointer                                    LinearKernel;                                     		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x02CC (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x02D4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02D8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned char                                      ForceFalloff;                                     		// 0x02DC (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxRadialCustomForceField
// 0x000F (0x02EC - 0x02DD)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02E0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              SelfRotationStrength;                             		// 0x02E8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxTornadoAngularForceField
// 0x0037 (0x02F8 - 0x02C1)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              RadialStrength;                                   		// 0x02CC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RotationalStrength;                               		// 0x02D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftStrength;                                     		// 0x02D4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02D8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceTopRadius;                                   		// 0x02DC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftFalloffHeight;                                		// 0x02E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              EscapeVelocity;                                   		// 0x02E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceHeight;                                      		// 0x02E8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HeightOffset;                                     		// 0x02EC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SelfRotationStrength;                             		// 0x02F0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0008 (0x0300 - 0x02F8)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02F8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxTornadoForceField
// 0x0033 (0x02F4 - 0x02C1)
class ANxTornadoForceField : public ANxForceField
{
public:
	struct FPointer                                    Kernel;                                           		// 0x02C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	float                                              RadialStrength;                                   		// 0x02CC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RotationalStrength;                               		// 0x02D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftStrength;                                     		// 0x02D4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x02D8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceTopRadius;                                   		// 0x02DC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftFalloffHeight;                                		// 0x02E0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              EscapeVelocity;                                   		// 0x02E4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceHeight;                                      		// 0x02E8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HeightOffset;                                     		// 0x02EC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      BSpecialRadialForceMode : 1;                      		// 0x02F0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NxTornadoForceFieldCapsule
// 0x0008 (0x02FC - 0x02F4)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                  		// 0x02F4 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_CylindricalForceActor
// 0x0034 (0x02A4 - 0x0270)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                  		// 0x0270 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              RadialStrength;                                   		// 0x0278 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RotationalStrength;                               		// 0x027C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftStrength;                                     		// 0x0280 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              LiftFalloffHeight;                                		// 0x0284 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              EscapeVelocity;                                   		// 0x0288 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x028C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceTopRadius;                                   		// 0x0290 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceHeight;                                      		// 0x0294 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              HeightOffset;                                     		// 0x0298 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x029C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceActive : 1;                                 		// 0x02A0 (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x02A0 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* inAction );
};

// Class Engine.RB_RadialForceActor
// 0x0022 (0x0292 - 0x0270)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                  		// 0x0270 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ForceStrength;                                    		// 0x0278 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ForceRadius;                                      		// 0x027C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SwirlStrength;                                    		// 0x0280 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SpinTorque;                                       		// 0x0284 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FRBCollisionChannelContainer                CollideWithChannels;                              		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceActive : 1;                                 		// 0x028C (0x0004) [0x0000000000000021] [0x00000001] ( CPF_Edit | CPF_Net )
	unsigned long                                      bForceApplyToCloth : 1;                           		// 0x028C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceApplyToFluid : 1;                           		// 0x028C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceApplyToRigidBodies : 1;                     		// 0x028C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bForceApplyToProjectiles : 1;                     		// 0x028C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      ForceFalloff;                                     		// 0x0290 (0x0001) [0x0000000000080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component )
	unsigned char                                      RadialForceMode;                                  		// 0x0291 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* inAction );
};

// Class Engine.ForceFieldShape
// 0x0000 (0x0060 - 0x0060)
class UForceFieldShape : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Dimension );
	void eventFillBySphere ( float Radius );
};

// Class Engine.ForceFieldShapeBox
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	struct FVector eventGetRadii ( );
};

// Class Engine.ForceFieldShapeCapsule
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
	float eventGetHeight ( );
};

// Class Engine.ForceFieldShapeSphere
// 0x0008 (0x0068 - 0x0060)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                            		// 0x0060 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UPrimitiveComponent* eventGetDrawComponent ( );
	void eventFillByCylinder ( float BottomRadius, float TopRadius, float Height, float HeightOffset );
	void eventFillByCapsule ( float Height, float Radius );
	void eventFillByBox ( struct FVector Extent );
	void eventFillBySphere ( float Radius );
	float eventGetRadius ( );
};

// Class Engine.PrefabInstance
// 0x00EE (0x035C - 0x026E)
class APrefabInstance : public AActor
{
public:
	struct TArray<unsigned char>                       PI_Bytes;                                         		// 0x0270 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      PI_CompleteObjects;                               		// 0x0280 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      PI_ReferencedObjects;                             		// 0x0290 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FString>                      PI_SavedNames;                                    		// 0x02A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x02B0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x02F8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap
	class UPrefab*                                     TemplatePrefab;                                   		// 0x0340 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UPrefabSequence*                             SequenceInstance;                                 		// 0x0348 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                TemplateVersion;                                  		// 0x0350 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_PackageVersion;                                		// 0x0354 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                PI_LicenseePackageVersion;                        		// 0x0358 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DestroyPrefab ( );
	void InstancePrefab ( class UPrefab* InPrefab );
};

// Class Engine.Prefab
// 0x001C (0x007C - 0x0060)
class UPrefab : public UObject
{
public:
	struct TArray<class UObject*>                      PrefabArchetypes;                                 		// 0x0060 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UPrefabSequence*                             PrefabSequence;                                   		// 0x0070 (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                PrefabVersion;                                    		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SequenceObject
// 0x0028 (0x0088 - 0x0060)
class USequenceObject : public UObject
{
public:
	struct TArray<struct FString>                      m_aObjComment;                                    		// 0x0060 (0x0010) [0x4200000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class USequence*                                   ParentSequence;                                   		// 0x0070 (0x0008) [0x0000000001000002]              ( CPF_Const )
	int                                                ObjInstanceVersion;                               		// 0x0078 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ObjPosX;                                          		// 0x007C (0x0004) [0x0000000000000000]              
	int                                                ObjPosY;                                          		// 0x0080 (0x0004) [0x0000000000000000]              
	unsigned long                                      bDeletable : 1;                                   		// 0x0084 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bOutputObjCommentToScreen : 1;                    		// 0x0084 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventScriptCleanUp ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsPastingIntoLevelSequenceAllowed ( );
	bool eventIsValidLevelSequenceObject ( );
	class AWorldInfo* GetWorldInfo ( );
	void ScriptLog ( struct FString LogText, unsigned long bWarning );
};

// Class Engine.SequenceFrame
// 0x0000 (0x0088 - 0x0088)
class USequenceFrame : public USequenceObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SequenceFrameWrapped
// 0x0000 (0x0088 - 0x0088)
class USequenceFrameWrapped : public USequenceFrame
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SequenceOp
// 0x0051 (0x00D9 - 0x0088)
class USequenceOp : public USequenceObject
{
public:
	struct TArray<struct FSeqOpInputLink>              InputLinks;                                       		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSeqOpOutputLink>             OutputLinks;                                      		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSeqVarLink>                  VariableLinks;                                    		// 0x00A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FSeqEventLink>                EventLinks;                                       		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x00C8 (0x0004) [0x0000000001002000]              ( CPF_Transient )
	int                                                ActivateCount;                                    		// 0x00CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SearchTag;                                        		// 0x00D0 (0x0004) [0x0000000000202002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bLatentExecution : 1;                             		// 0x00D4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bManualHandleOutputs : 1;                         		// 0x00D4 (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bAutoActivateOutputLinks : 1;                     		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bSFXNeedsSpecialEventTick : 1;                    		// 0x00D4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      GamepadID;                                        		// 0x00D8 (0x0001) [0x0000000001002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ForceActivateInput ( int InputIdx );
	class AController* GetController ( class AActor* TheActor );
	class APawn* GetPawn ( class AActor* TheActor );
	void Reset ( );
	void PublishLinkedVariableValues ( );
	void PopulateLinkedVariableValues ( );
	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	void eventVersionUpdated ( int OldVersion, int NewVersion );
	void SetStringRefVars ( struct FString sLink, int srValue );
	void SetNameVars ( struct FString sLink, struct FName sValue );
	void SetObjectVars ( struct FString sLink, class UObject* oValue );
	void SetStringVars ( struct FString sLink, struct FString sValue );
	void SetFloatVars ( struct FString sLink, float fValue );
	void SetIntVars ( struct FString sLink, int nValue );
	void SetBoolVars ( struct FString sLink, unsigned long bValue );
	void eventDeactivated ( );
	void eventActivated ( );
	bool ActivateNamedOutputLink ( struct FString LinkDesc );
	bool ActivateOutputLink ( int OutputIdx );
	void GetStringRefVars ( struct FString sDescription, struct TArray<int>* aStringRef );
	void GetNameVars ( struct FString inDesc, struct TArray<struct FName>* nameVars );
	void GetStringVars ( struct FString inDesc, struct TArray<struct FString>* strVars );
	void GetFloatVars ( struct FString inDesc, struct TArray<float>* floatVars );
	void GetIntVars ( struct FString inDesc, struct TArray<int>* intVars );
	void LinkedVariables ( class UClass* VarClass, struct FString inDesc, class USequenceVariable** OutVariable );
	void GetBoolVars ( struct FString inDesc, struct TArray<unsigned char>* boolVars );
	void GetInterpDataVars ( struct FString inDesc, struct TArray<class UInterpData*>* outIData );
	void GetObjectVars ( struct FString inDesc, struct TArray<class UObject*>* objVars );
	void GetLinkedObjects ( class UClass* ObjectType, unsigned long bRecurse, struct TArray<class USequenceObject*>* out_Objects );
	bool HasLinkedOps ( unsigned long bConsiderInputLinks );
};

// Class Engine.Sequence
// 0x00DB (0x01B4 - 0x00D9)
class USequence : public USequenceOp
{
public:
	struct TArray<class USequenceObject*>              SequenceObjects;                                  		// 0x00DC (0x0010) [0x000000000040000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink )
	struct TArray<class USequenceOp*>                  ActiveSequenceOps;                                		// 0x00EC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class USequence*>                    NestedSequences;                                  		// 0x00FC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class USequenceEvent*>               UnregisteredEvents;                               		// 0x010C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FActivateOp>                  DelayedActivatedOps;                              		// 0x011C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FQueuedActivationInfo>        QueuedActivations;                                		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USequenceObject*>              m_aBioNotifyOfStasis;                             		// 0x013C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     m_aSFXSharedAnimsets;                             		// 0x014C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USequence*>                    m_aBioPreTickedSequences;                         		// 0x015C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FString                                     m_sBioSequenceName;                               		// 0x016C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class USequenceEvent*>               m_aSFXEventsThisFrame;                            		// 0x017C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    LogFile;                                          		// 0x018C (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                DefaultViewX;                                     		// 0x0194 (0x0004) [0x0000000000000000]              
	int                                                DefaultViewY;                                     		// 0x0198 (0x0004) [0x0000000000000000]              
	float                                              DefaultViewZoom;                                  		// 0x019C (0x0004) [0x0000000000000000]              
	int                                                m_nTotalRecursiveKismetCount;                     		// 0x01A0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTotalRecursiveMemoryUsage;                     		// 0x01A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                m_nTotalRecursiveSequences;                       		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              m_nApproximateKismetLoadTime;                     		// 0x01AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      IsLocalized : 1;                                  		// 0x01B0 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bEnabled : 1;                                     		// 0x01B0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bBioForceReUpdate : 1;                          		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      m_bSFXInUpdateOp : 1;                             		// 0x01B0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetEnabled ( unsigned long bInEnabled );
	void Reset ( );
	void FindSeqObjectsByName ( struct FString SeqObjName, unsigned long bCheckComment, unsigned long bRecursive, struct TArray<class USequenceObject*>* OutputObjects );
	void FindSeqObjectsByClass ( class UClass* DesiredClass, unsigned long bRecursive, struct TArray<class USequenceObject*>* OutputObjects );
};

// Class Engine.PrefabSequence
// 0x0008 (0x01BC - 0x01B4)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                      		// 0x01B4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class APrefabInstance* GetOwnerPrefab ( );
	void SetOwnerPrefab ( class APrefabInstance* InOwner );
};

// Class Engine.PrefabSequenceContainer
// 0x0000 (0x01B4 - 0x01B4)
class UPrefabSequenceContainer : public USequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SequenceReference
// 0x0018 (0x01CC - 0x01B4)
class USequenceReference : public USequence
{
public:
	class USequence*                                   oSequenceReference;                               		// 0x01B4 (0x0008) [0x0000000000000000]              
	class USequence*                                   oTemplateSequence;                                		// 0x01BC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UPackage*                                    oDependentPackage;                                		// 0x01C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SequenceAction
// 0x001F (0x00F8 - 0x00D9)
class USequenceAction : public USequenceOp
{
public:
	struct TArray<class UObject*>                      Targets;                                          		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       HandlerName;                                      		// 0x00EC (0x0008) [0x0000000000000000]              
	unsigned long                                      bCallHandler : 1;                                 		// 0x00F4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0024 (0x011C - 0x00F8)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	struct TArray<struct FRemoteEventParameter>        Parameters;                                       		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Instigator;                                       		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       EventName;                                        		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_AndGate
// 0x0024 (0x011C - 0x00F8)
class USeqAct_AndGate : public USequenceAction
{
public:
	struct TArray<struct FPointer>                     LinkedOutputs;                                    		// 0x00F8 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<unsigned long>                       LinkedOutputFiredStatus;                          		// 0x0108 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bOpen : 1;                                        		// 0x0118 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ApplySoundNode
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundNode*                                  ApplyNode;                                        		// 0x0100 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                            		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_CameraFade
// 0x0024 (0x011C - 0x00F8)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct TArray<class APlayerController*>            CachedPCs;                                        		// 0x00F8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FColor                                      FadeColor;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOpacity;                                      		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTime;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeTimeRemaining;                                		// 0x0114 (0x0004) [0x0000000000000000]              
	unsigned long                                      bPersistFade : 1;                                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_CameraLookAt
// 0x0038 (0x0130 - 0x00F8)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	struct FString                                     TextDisplay;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector2D                                   InterpSpeedRange;                                 		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   InFocusFOV;                                       		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FocusBoneName;                                    		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              TotalTime;                                        		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CameraFOV;                                        		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RemainingTime;                                    		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAffectCamera : 1;                                		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlwaysFocus : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bTurnInPlace : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreTrace : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bAffectHead : 1;                                  		// 0x012C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bRotatePlayerWithCamera : 1;                      		// 0x012C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bToggleGodMode : 1;                               		// 0x012C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bLeaveCameraRotation : 1;                         		// 0x012C (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x012C (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUsedTimer : 1;                                   		// 0x012C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bCheckLineOfSight : 1;                            		// 0x012C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_CameraShake
// 0x0025 (0x011D - 0x00F8)
class USeqAct_CameraShake : public USequenceAction
{
public:
	class AActor*                                      LocationActor;                                    		// 0x00F8 (0x0008) [0x0000000000000000]              
	class UCameraShake*                                Shake;                                            		// 0x0100 (0x0008) [0x0000008004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ShakeScale;                                       		// 0x0108 (0x0004) [0x0000008000000001]              ( CPF_Edit )
	float                                              RadialShake_InnerRadius;                          		// 0x010C (0x0004) [0x0000008000000001]              ( CPF_Edit )
	float                                              RadialShake_OuterRadius;                          		// 0x0110 (0x0004) [0x0000008000000001]              ( CPF_Edit )
	float                                              RadialShake_Falloff;                              		// 0x0114 (0x0004) [0x0000008000000001]              ( CPF_Edit )
	unsigned long                                      bDoControllerVibration : 1;                       		// 0x0118 (0x0004) [0x0000008000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadialShake : 1;                                 		// 0x0118 (0x0004) [0x0000008000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bOrientTowardRadialEpicenter : 1;                 		// 0x0118 (0x0004) [0x0000008000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x011C (0x0001) [0x0000008000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x00FD - 0x00F8)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                               		// 0x00F8 (0x0004) [0x0000000000020003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bBlockActors : 1;                                 		// 0x00F8 (0x0004) [0x0000000000020003] [0x00000002] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bIgnoreEncroachers : 1;                           		// 0x00F8 (0x0004) [0x0000000000020003] [0x00000004] ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      CollisionType;                                    		// 0x00FC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ConvertToString
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	struct FString                                     VarSeparator;                                     		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                NumberOfInputs;                                   		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIncludeVarComment : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_DrawText
// 0x0038 (0x0130 - 0x00F8)
class USeqAct_DrawText : public USequenceAction
{
public:
	struct FKismetDrawTextInfo                         DrawTextInfo;                                     		// 0x00F8 (0x0030) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              DisplayTimeSeconds;                               		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayOnObject : 1;                             		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_FinishSequence
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                      		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Gate
// 0x000C (0x0104 - 0x00F8)
class USeqAct_Gate : public USequenceAction
{
public:
	int                                                AutoCloseCount;                                   		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentCloseCount;                                		// 0x00FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bOpen : 1;                                        		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_GetDistance
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                         		// 0x00F8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_GetLocationAndRotation
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     location;                                         		// 0x00F8 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FVector                                     RotationVector;                                   		// 0x0104 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FName                                       SocketOrBoneName;                                 		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_GetProperty
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_GetVectorComponents
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                         		// 0x00F8 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_GetVelocity
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityVect;                                     		// 0x00F8 (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              VelocityMag;                                      		// 0x0104 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                          		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bObjectFound : 1;                                 		// 0x00F8 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_Latent
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Latent : public USequenceAction
{
public:
	struct TArray<class AActor*>                       LatentActors;                                     		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bAborted : 1;                                     		// 0x0108 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCancelled : 1;                                   		// 0x0108 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventUpdate ( float DeltaTime );
	void AbortFor ( class AActor* latentActor, unsigned long bCancel );
};

// Class Engine.SeqAct_ActorFactory
// 0x0065 (0x0171 - 0x010C)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	struct TArray<class AActor*>                       SpawnPoints;                                      		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FVector>                      SpawnLocations;                                   		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FVector>                      SpawnOrientations;                                		// 0x012C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     m_vSpawnOffset;                                   		// 0x013C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      LastUsedSpawn;                                    		// 0x0148 (0x0008) [0x0000000000000000]              
	class UActorFactory*                               Factory;                                          		// 0x0150 (0x0008) [0x0000000004400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                SpawnCount;                                       		// 0x0158 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SpawnDelay;                                       		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastSpawnIdx;                                     		// 0x0160 (0x0004) [0x0000000000000000]              
	int                                                SpawnedCount;                                     		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              RemainingDelay;                                   		// 0x0168 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x016C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsSpawning : 1;                                  		// 0x016C (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bCheckSpawnCollision : 1;                         		// 0x016C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      PointSelection;                                   		// 0x0170 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_ActorFactoryEx
// 0x0003 (0x0174 - 0x0171)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AIMoveToActor
// 0x0024 (0x0130 - 0x010C)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	struct TArray<class AActor*>                       Destination;                                      		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      LookAt;                                           		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MovementSpeedModifier;                            		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LastDestinationChoice;                            		// 0x0128 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bInterruptable : 1;                               		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bPickClosest : 1;                                 		// 0x012C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class AActor* PickDestination ( class AActor* Requestor );
	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_Delay
// 0x0014 (0x0120 - 0x010C)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	float                                              DefaultDuration;                                  		// 0x010C (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              Duration;                                         		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LastUpdateTime;                                   		// 0x0114 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              RemainingTime;                                    		// 0x0118 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bDelayActive : 1;                                 		// 0x011C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStartWillRestart : 1;                            		// 0x011C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetDelayActive ( );
	void Reset ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x011C - 0x010C)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                        		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CurrentIdx;                                       		// 0x0110 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              SwitchDelay;                                      		// 0x0114 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NextLinkTime;                                     		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x010C - 0x010C)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Interp
// 0x0078 (0x0184 - 0x010C)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	struct TArray<class ACoverLink*>                   LinkedCover;                                      		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       TexturePrimedActors;                              		// 0x011C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UInterpGroupInst*>             GroupInst;                                        		// 0x012C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCameraCutInfo>               CameraCuts;                                       		// 0x013C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      ReplicatedActorClass;                             		// 0x014C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UInterpData*                                 InterpData;                                       		// 0x0154 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class AMatineeActor*                               ReplicatedActor;                                  		// 0x015C (0x0008) [0x0000000000000002]              ( CPF_Const )
	class USFXSceneShopDataInstInterface*              m_pSFXSceneDataInst;                              		// 0x0164 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x016C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Position;                                         		// 0x0170 (0x0004) [0x0000000000000000]              
	float                                              ForceStartPosition;                               		// 0x0174 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PreferredSplitScreenNum;                          		// 0x0178 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TerminationTime;                                  		// 0x017C (0x0004) [0x0000000000000000]              
	unsigned long                                      bSFXBuildingPreloadCameraCuts : 1;                		// 0x0180 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0180 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bPaused : 1;                                      		// 0x0180 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsBeingEdited : 1;                               		// 0x0180 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bResetPositionOnFinish : 1;                       		// 0x0180 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bFreeAnimsetsOnFinish : 1;                        		// 0x0180 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x0180 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRewindOnPlay : 1;                                		// 0x0180 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bNoResetOnRewind : 1;                             		// 0x0180 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                      		// 0x0180 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bReversePlayback : 1;                             		// 0x0180 (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bInterpForPathBuilding : 1;                       		// 0x0180 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bForceStartPos : 1;                               		// 0x0180 (0x0004) [0x0000000000000001] [0x00001000] ( CPF_Edit )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0180 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                      		// 0x0180 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bIsSkippable : 1;                                 		// 0x0180 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bBlockForPriming : 1;                             		// 0x0180 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bShouldShowGore : 1;                              		// 0x0180 (0x0004) [0x0000000000002000] [0x00020000] ( CPF_Transient )
	unsigned long                                      m_bBioSkipToEnd : 1;                              		// 0x0180 (0x0004) [0x0000000000002000] [0x00040000] ( CPF_Transient )
	unsigned long                                      m_bBioRequestSkipToEnd : 1;                       		// 0x0180 (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      m_bBioHACK_StopPinFired : 1;                      		// 0x0180 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      m_bSFXStartedUnderCinematicMode : 1;              		// 0x0180 (0x0004) [0x0000000000002000] [0x00200000] ( CPF_Transient )
	unsigned long                                      m_bSFXIsCurrentlyActivating : 1;                  		// 0x0180 (0x0004) [0x0000000000002000] [0x00400000] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
	void Reset ( );
	void AddPlayerToDirectorTracks ( class APlayerController* PC );
	void Stop ( );
	void SetPosition ( float NewPosition, unsigned long bJump );
};

// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x0110 - 0x010C)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                        		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x010C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bNeverAutoStreamOut : 1;                          		// 0x010C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_LevelStreaming
// 0x0014 (0x0124 - 0x0110)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x0110 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       LevelName;                                        		// 0x0118 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0120 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_MultiLevelStreaming
// 0x0014 (0x0124 - 0x0110)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	struct TArray<struct FLevelStreamingNameCombo>     Levels;                                           		// 0x0110 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bUnloadAllOtherLevels : 1;                        		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0120 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_LevelVisibility
// 0x0014 (0x0120 - 0x010C)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                            		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       LevelName;                                        		// 0x0114 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x011C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_PlaySound
// 0x0024 (0x0130 - 0x010C)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                        		// 0x010C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtraDelay;                                       		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SoundDuration;                                    		// 0x0118 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeInTime;                                       		// 0x011C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMultiplier;                                 		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMultiplier;                                  		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSuppressSubtitles : 1;                           		// 0x012C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStopped : 1;                                     		// 0x012C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_PrepareMapChange
// 0x001C (0x0128 - 0x010C)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct TArray<struct FName>                        InitiallyLoadedSecondaryLevelNames;               		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       MainLevelName;                                    		// 0x011C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsHighPriority : 1;                              		// 0x0124 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0124 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetDOFParams
// 0x0060 (0x016C - 0x010C)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	struct FVector                                     FocusPosition;                                    		// 0x010C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     OldFocusPosition;                                 		// 0x0118 (0x000C) [0x0000000000000000]              
	float                                              FalloffExponent;                                  		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FStop;                                            		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurKernelSize;                                   		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxNearBlurAmount;                                		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxFarBlurAmount;                                 		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      ModulateBlurColor;                                		// 0x0138 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusInnerRadius;                                 		// 0x013C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FocusDistance;                                    		// 0x0140 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0148 (0x0004) [0x0000000000000000]              
	float                                              OldFalloffExponent;                               		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              OldFStop;                                         		// 0x0150 (0x0004) [0x0000000000000000]              
	float                                              OldBlurKernelSize;                                		// 0x0154 (0x0004) [0x0000000000000000]              
	float                                              OldMaxNearBlurAmount;                             		// 0x0158 (0x0004) [0x0000000000000000]              
	float                                              OldMaxFarBlurAmount;                              		// 0x015C (0x0004) [0x0000000000000000]              
	struct FColor                                      OldModulateBlurColor;                             		// 0x0160 (0x0004) [0x0000000000000000]              
	float                                              OldFocusInnerRadius;                              		// 0x0164 (0x0004) [0x0000000000000000]              
	float                                              OldFocusDistance;                                 		// 0x0168 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x011C - 0x010C)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                 		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateSeconds;                               		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpolateElapsed;                               		// 0x0114 (0x0004) [0x0000000000000000]              
	float                                              OldMotionBlurAmount;                              		// 0x0118 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_StreamInTextures
// 0x0034 (0x0140 - 0x010C)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	struct TArray<class UObject*>                      LocationActors;                                   		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UMaterialInterface*>           ForceMaterials;                                   		// 0x011C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Seconds;                                          		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              StopTimestamp;                                    		// 0x0130 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FTextureGroupContainer                      CinematicTextureGroups;                           		// 0x0134 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SelectedCinematicTextureGroups;                   		// 0x0138 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bStreamingActive : 1;                             		// 0x013C (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0014 (0x0120 - 0x010C)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	struct TArray<struct FName>                        LevelNames;                                       		// 0x010C (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bShouldBlockOnLoad : 1;                           		// 0x011C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Log
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Log : public USequenceAction
{
public:
	struct FVector                                     TargetOffset;                                     		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              TargetDuration;                                   		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOutputToScreen : 1;                              		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIncludeObjComment : 1;                           		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_ModifyCover
// 0x0015 (0x010D - 0x00F8)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	struct TArray<int>                                 Slots;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bManualAdjustPlayersOnly : 1;                     		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      ManualCoverType;                                  		// 0x010C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ModifyHealth
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      Instigator;                                       		// 0x0100 (0x0008) [0x0000000000000000]              
	float                                              Momentum;                                         		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Amount;                                           		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHeal : 1;                                        		// 0x0114 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRadial : 1;                                      		// 0x0114 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bFalloff : 1;                                     		// 0x0114 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_ParticleEventGenerator
// 0x0068 (0x0160 - 0x00F8)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00F8 (0x0008) MISSED OFFSET
	struct FRwVector3                                  EventLocation;                                    		// 0x0100 (0x0010) [0x0000000000000000]              
	struct FRwVector3                                  EventDirection;                                   		// 0x0110 (0x0010) [0x0000000000000000]              
	struct FRwVector3                                  EventVelocity;                                    		// 0x0120 (0x0010) [0x0000000000000000]              
	struct FRwVector3                                  EventNormal;                                      		// 0x0130 (0x0010) [0x0000000000000000]              
	struct TArray<struct FString>                      EventNames;                                       		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class AActor*                                      Instigator;                                       		// 0x0150 (0x0008) [0x0000000000000000]              
	float                                              EventTime;                                        		// 0x0158 (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x015C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseEmitterLocation : 1;                          		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_PlayCameraAnim
// 0x0025 (0x011D - 0x00F8)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                       		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      UserDefinedSpaceActor;                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendInTime;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlendOutTime;                                     		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Rate;                                             		// 0x0110 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              IntensityScale;                                   		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoop : 1;                                        		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomStartTime : 1;                             		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      PlaySpace;                                        		// 0x011C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_PlayFaceFXAnim
// 0x0030 (0x0128 - 0x00F8)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	struct FString                                     FaceFXGroupName;                                  		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     FaceFXAnimName;                                   		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0118 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x0120 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_PlayMusicTrack
// 0x001C (0x0114 - 0x00F8)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                       		// 0x00F8 (0x001C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Possess
// 0x000C (0x0104 - 0x00F8)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                    		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bKillOldPawn : 1;                                 		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTryToLeaveVehicle : 1;                           		// 0x0100 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_RangeSwitch
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	struct TArray<struct FSwitchRange>                 Ranges;                                           		// 0x00F8 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetCameraTarget
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	struct FViewTargetTransitionParams                 TransitionParams;                                 		// 0x00F8 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class AActor*                                      CameraTarget;                                     		// 0x0108 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetMaterial
// 0x000C (0x0104 - 0x00F8)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                      		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaterialIndex;                                    		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0014 (0x010C - 0x00F8)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScalarValue;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetMesh
// 0x0015 (0x010D - 0x00F8)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsAllowedToMove : 1;                             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAllowDecalsToReattach : 1;                       		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      MeshType;                                         		// 0x010C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00F9 - 0x00F8)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	unsigned char                                      newPhysics;                                       		// 0x00F8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_AccessObjectList
// 0x000C (0x0104 - 0x00F8)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                     		// 0x00F8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	int                                                ObjectIndex;                                      		// 0x0100 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AddFloat
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AddInt
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                            		// 0x00F8 (0x0004) [0x0000000000000000]              
	float                                              FloatResult;                                      		// 0x00FC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_CastToInt
// 0x000C (0x0104 - 0x00F8)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	float                                              Value;                                            		// 0x00F8 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x00FC (0x0004) [0x0000000000000000]              
	unsigned long                                      bTruncate : 1;                                    		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_DivideInt
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                 		// 0x00F8 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetBool
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      Target : 1;                                       		// 0x00F8 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      DefaultValue : 1;                                 		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetFloat
// 0x0014 (0x010C - 0x00F8)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	struct TArray<float>                               Value;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              Target;                                           		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetInt
// 0x0014 (0x010C - 0x00F8)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	struct TArray<int>                                 Value;                                            		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                Target;                                           		// 0x0108 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetLocation
// 0x0024 (0x011C - 0x00F8)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     LocationValue;                                    		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RotationValue;                                    		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Target;                                           		// 0x0110 (0x0008) [0x0000000000000000]              
	unsigned long                                      bSetLocation : 1;                                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSetRotation : 1;                                 		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetObject
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UObject*                                     Value;                                            		// 0x0100 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetString
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                           		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Value;                                            		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                           		// 0x00F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloatResult;                                      		// 0x0100 (0x0004) [0x0000000000000000]              
	int                                                IntResult;                                        		// 0x0104 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetVectorComponents
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                        		// 0x00F8 (0x000C) [0x0000000000000000]              
	float                                              X;                                                		// 0x0104 (0x0004) [0x0000000000000000]              
	float                                              Y;                                                		// 0x0108 (0x0004) [0x0000000000000000]              
	float                                              Z;                                                		// 0x010C (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Switch
// 0x001C (0x0114 - 0x00F8)
class USeqAct_Switch : public USequenceAction
{
public:
	struct TArray<int>                                 Indices;                                          		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	int                                                LinkCount;                                        		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                IncrementAmount;                                  		// 0x010C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLooping : 1;                                     		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAutoDisableLinks : 1;                            		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_RandomSwitch
// 0x0010 (0x0124 - 0x0114)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	struct TArray<int>                                 AutoDisabledIndices;                              		// 0x0114 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_Teleport
// 0x001C (0x0114 - 0x00F8)
class USeqAct_Teleport : public USequenceAction
{
public:
	struct FVector                                     m_vSFXTeleportLocation;                           		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    m_rSFXTeleportRotation;                           		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUpdateRotation : 1;                              		// 0x0110 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bPreserveVelocity : 1;                          		// 0x0110 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bSnapToFloor : 1;                               		// 0x0110 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bSFXTeleportDataIsValid : 1;                    		// 0x0110 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bSFXCreatedBeforeStuntActorLocationChange : 1;  		// 0x0110 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSFXGetTeleportLocAndRot ( struct FVector* vLocation, struct FRotator* rRotation, class AActor** pDestActor );
};

// Class Engine.SeqAct_Timer
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                   		// 0x00F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Time;                                             		// 0x00FC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_Toggle
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_Toggle : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_ToggleHUD
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_ToggleHUD : public USequenceAction
{
public:
	unsigned long                                      bLevelStartupEventForceOff : 1;                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void DoActivatedWork ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_Trace
// 0x0040 (0x0138 - 0x00F8)
class USeqAct_Trace : public USequenceAction
{
public:
	struct FVector                                     TraceExtent;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     StartOffset;                                      		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     EndOffset;                                        		// 0x0110 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     HitLocation;                                      		// 0x011C (0x000C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UObject*                                     HitObject;                                        		// 0x0128 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	float                                              Distance;                                         		// 0x0130 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bTraceActors : 1;                                 		// 0x0134 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTraceWorld : 1;                                  		// 0x0134 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SequenceCondition
// 0x0003 (0x00DC - 0x00D9)
class USequenceCondition : public USequenceOp
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqCond_CompareBool
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_CompareBool : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00E4 - 0x00DC)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                           		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00E4 - 0x00DC)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                           		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_CompareName
// 0x0010 (0x00EC - 0x00DC)
class USeqCond_CompareName : public USequenceCondition
{
public:
	struct FName                                       ValueA;                                           		// 0x00DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ValueB;                                           		// 0x00E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_CompareObject : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_CompareString
// 0x0020 (0x00FC - 0x00DC)
class USeqCond_CompareString : public USequenceCondition
{
public:
	struct FString                                     ValueA;                                           		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     ValueB;                                           		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_GetServerType : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqCond_Increment
// 0x000C (0x00E8 - 0x00DC)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueA;                                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ValueB;                                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00E8 - 0x00DC)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                  		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueA;                                           		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ValueB;                                           		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_IsAlive
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_IsAlive : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_IsConsole
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_IsConsole : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00E0 - 0x00DC)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                		// 0x00DC (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCheckLogins ( );
};

// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

// Class Engine.SeqCond_SwitchClass
// 0x0010 (0x00EC - 0x00DC)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	struct TArray<struct FSwitchClassInfo>             ClassArray;                                       		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

// Class Engine.SeqCond_SwitchObject
// 0x0018 (0x00F4 - 0x00DC)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	struct TArray<struct FSwitchObjectCase>            SupportedValues;                                  		// 0x00DC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      MetaClass;                                        		// 0x00EC (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRemoveValueEntry ( int RemoveIndex );
	void eventInsertValueEntry ( int InsertIndex );
	bool eventIsFallThruEnabled ( int ValueIndex );
	void eventVerifyDefaultCaseValue ( );
};

// Class Engine.SeqCond_SwitchPlatform
// 0x0000 (0x00DC - 0x00DC)
class USeqCond_SwitchPlatform : public USequenceCondition
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SequenceEvent
// 0x004D (0x0126 - 0x00D9)
class USequenceEvent : public USequenceOp
{
public:
	struct TArray<class USequenceEvent*>               DuplicateEvts;                                    		// 0x00DC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        lstTags;                                          		// 0x00EC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class AActor*                                      Originator;                                       		// 0x00FC (0x0008) [0x0000000000000000]              
	class AActor*                                      Instigator;                                       		// 0x0104 (0x0008) [0x0000000000000000]              
	float                                              ActivationTime;                                   		// 0x010C (0x0004) [0x0000000000000000]              
	int                                                TriggerCount;                                     		// 0x0110 (0x0004) [0x0000000000000000]              
	int                                                MaxTriggerCount;                                  		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ReTriggerDelay;                                   		// 0x0118 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxWidth;                                         		// 0x011C (0x0004) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0120 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bTagListInclusionary : 1;                         		// 0x0120 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRegistered : 1;                                  		// 0x0120 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bClientSideOnly : 1;                              		// 0x0120 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      Priority;                                         		// 0x0124 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WhoTriggers;                                      		// 0x0125 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventToggled ( );
	void Reset ( );
	bool PassesWhoTriggers ( class AActor* inInstigator );
	bool CheckActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest, unsigned long bPushTop, unsigned long bSFXForceThisFrame, struct TArray<int>* ActivateIndices );
	void eventRegisterEvent ( );
};

// Class Engine.SeqEvent_AISeeEnemy
// 0x0006 (0x012C - 0x0126)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                 		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_AnimNotify
// 0x000A (0x0130 - 0x0126)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FName                                       NotifyName;                                       		// 0x0128 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_Console
// 0x001A (0x0140 - 0x0126)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FString                                     EventDesc;                                        		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       ConsoleEventName;                                 		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_ConstraintBroken
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_Destroyed
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_GetInventory
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_LevelBeginning
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_LevelLoaded
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqEvent_LevelStartup
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_Mover
// 0x0006 (0x012C - 0x0126)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                     		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyFinishedOpen ( );
	void NotifyDetached ( class AActor* Other );
	void NotifyAttached ( class AActor* Other );
	void NotifyEncroachingOn ( class AActor* Hit );
	void eventRegisterEvent ( );
};

// Class Engine.SeqEvent_ParticleEvent
// 0x0033 (0x0159 - 0x0126)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	struct FVector                                     EventPosition;                                    		// 0x0128 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventVelocity;                                    		// 0x0134 (0x000C) [0x0000000000000000]              
	struct FVector                                     EventNormal;                                      		// 0x0140 (0x000C) [0x0000000000000000]              
	float                                              EventEmitterTime;                                 		// 0x014C (0x0004) [0x0000000000000000]              
	float                                              EventParticleTime;                                		// 0x0150 (0x0004) [0x0000000000000000]              
	unsigned long                                      UseRelfectedImpactVector : 1;                     		// 0x0154 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      EventType;                                        		// 0x0158 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqEvent_ProjectileLanded
// 0x0006 (0x012C - 0x0126)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                      		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_RemoteEvent
// 0x001E (0x0144 - 0x0126)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct TArray<struct FRemoteEventParameter>        Parameters;                                       		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       EventName;                                        		// 0x0138 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x0140 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	class USeqEvent_RemoteEvent* FindRemoteEvent ( struct FName fnEventName );
};

// Class Engine.SeqEvent_RigidBodyCollision
// 0x0006 (0x012C - 0x0126)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_SeeDeath
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_SequenceActivated
// 0x0012 (0x0138 - 0x0126)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                       		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_TakeDamage
// 0x0046 (0x016C - 0x0126)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	struct TArray<class UClass*>                       DamageTypes;                                      		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       IgnoreDamageTypes;                                		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FVector                                     vHitLocation;                                     		// 0x0148 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      oDamagedActor;                                    		// 0x0154 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinDamageAmount;                                  		// 0x015C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DamageThreshold;                                  		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CurrentDamage;                                    		// 0x0164 (0x0004) [0x0000000000000000]              
	unsigned long                                      bResetDamageOnToggle : 1;                         		// 0x0168 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventToggled ( );
	int eventGetObjClassVersion ( );
	void Reset ( );
	void HandleDamage ( class AActor* inOriginator, class AActor* inInstigator, class UClass* inDamageType, float inAmount, struct FVector InHitLocation, class AActor* DamageCauser );
	bool IsValidDamageType ( class UClass* inDamageType );
};

// Class Engine.SeqEvent_Touch
// 0x0036 (0x015C - 0x0126)
class USeqEvent_Touch : public USequenceEvent
{
public:
	struct TArray<class UClass*>                       ClassProximityTypes;                              		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       IgnoredClassProximityTypes;                       		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class AActor*>                       TouchedList;                                      		// 0x0148 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bForceOverlapping : 1;                            		// 0x0158 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseInstigator : 1;                               		// 0x0158 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bIgnoreVehicleTransitions : 1;                  		// 0x0158 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAllowDeadPawns : 1;                              		// 0x0158 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void NotifyTouchingPawnDied ( class APawn* P );
	void eventToggled ( );
	bool CheckUnTouchActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest );
	bool CheckTouchActivate ( class AActor* inOriginator, class AActor* inInstigator, unsigned long bTest );
};

// Class Engine.SeqEvent_Used
// 0x0042 (0x0168 - 0x0126)
class USeqEvent_Used : public USequenceEvent
{
public:
	struct FString                                     InteractText;                                     		// 0x0128 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       ClassProximityTypes;                              		// 0x0138 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       IgnoredClassProximityTypes;                       		// 0x0148 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UTexture2D*                                  InteractIcon;                                     		// 0x0158 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              InteractDistance;                                 		// 0x0160 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAimToInteract : 1;                               		// 0x0164 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
};

// Class Engine.SequenceVariable
// 0x0008 (0x0090 - 0x0088)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                          		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.BioSeqVar_StrRef
// 0x0014 (0x00A4 - 0x0090)
class UBioSeqVar_StrRef : public USequenceVariable
{
public:
	struct FString                                     m_sValue;                                         		// 0x0090 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                m_srValue;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioSeqVar_StrRefLiteral
// 0x0004 (0x00A8 - 0x00A4)
class UBioSeqVar_StrRefLiteral : public UBioSeqVar_StrRef
{
public:
	int                                                m_srStringID;                                     		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InterpData
// 0x0048 (0x00D8 - 0x0090)
class UInterpData : public USequenceVariable
{
public:
	struct TArray<class UInterpGroup*>                 InterpGroups;                                     		// 0x0090 (0x0010) [0x0000000000400008]              ( CPF_ExportObject | CPF_NeedCtorLink )
	struct TArray<struct FBioResourcePreloadItem>      m_aBioPreloadData;                                		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x00B0 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class USFXSceneShopGameData*                       m_pSFXSceneData;                                  		// 0x00B8 (0x0008) [0x0000000000000000]              
	float                                              InterpLength;                                     		// 0x00C0 (0x0004) [0x0000000000000000]              
	float                                              PathBuildTime;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              
	float                                              EdSectionStart;                                   		// 0x00C8 (0x0004) [0x0000000000000000]              
	float                                              EdSectionEnd;                                     		// 0x00CC (0x0004) [0x0000000000000000]              
	int                                                m_nBioCutSceneVersion;                            		// 0x00D0 (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      bShouldBakeAndPrune : 1;                          		// 0x00D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Bool
// 0x0004 (0x0094 - 0x0090)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                           		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_External
// 0x0018 (0x00A8 - 0x0090)
class USeqVar_External : public USequenceVariable
{
public:
	struct FString                                     VariableLabel;                                    		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UClass*                                      ExpectedType;                                     		// 0x00A0 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Float
// 0x0004 (0x0094 - 0x0090)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                       		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x009C - 0x0094)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Max;                                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Int
// 0x0004 (0x0094 - 0x0090)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                         		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_RandomInt
// 0x0008 (0x009C - 0x0094)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                              		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                Max;                                              		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Name
// 0x0008 (0x0098 - 0x0090)
class USeqVar_Name : public USequenceVariable
{
public:
	struct FName                                       NameValue;                                        		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Named
// 0x0014 (0x00A4 - 0x0090)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                     		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       FindVarName;                                      		// 0x0098 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bStatusIsOk : 1;                                  		// 0x00A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_ScopedNamed
// 0x0000 (0x00A4 - 0x00A4)
class USeqVar_ScopedNamed : public USeqVar_Named
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Object
// 0x0028 (0x00B8 - 0x0090)
class USeqVar_Object : public USequenceVariable
{
public:
	struct TArray<class UClass*>                       SupportedClasses;                                 		// 0x0090 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     ActorLocation;                                    		// 0x00A0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UObject*                                     ObjValue;                                         		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      m_bBioPauseAmbPerfOnStart : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      m_bBioUnpauseAmbPerfOnEnd : 1;                    		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      m_bBioRestoreInitialPoseOnEnd : 1;                		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      m_bBioSkipInitialPlacement : 1;                   		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bBioRestoreInitialLocationOnEnd : 1;            		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      m_bBioDisableLookAt : 1;                          		// 0x00B4 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

// Class Engine.SeqVar_Character
// 0x0008 (0x00C0 - 0x00B8)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                        		// 0x00B8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Group
// 0x001C (0x00D4 - 0x00B8)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct TArray<class UObject*>                      Actors;                                           		// 0x00B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       GroupName;                                        		// 0x00C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCachedList : 1;                                  		// 0x00D0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_ObjectList
// 0x0010 (0x00C8 - 0x00B8)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	struct TArray<class UObject*>                      ObjList;                                          		// 0x00B8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetObjectValue ( class UObject* NewValue );
	class UObject* GetObjectValue ( );
};

// Class Engine.SeqVar_ObjectVolume
// 0x0028 (0x00E0 - 0x00B8)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	struct TArray<class UObject*>                      ContainedObjects;                                 		// 0x00B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       ExcludeClassList;                                 		// 0x00C8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              LastUpdateTime;                                   		// 0x00D8 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCollidingOnly : 1;                               		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Player
// 0x0028 (0x00E0 - 0x00B8)
class USeqVar_Player : public USeqVar_Object
{
public:
	struct TArray<class UObject*>                      Players;                                          		// 0x00B8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UObject*>                      PlayersPawns;                                     		// 0x00C8 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                PlayerIdx;                                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllPlayers : 1;                                  		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReturnPawns : 1;                                 		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UObject* GetObjectValue ( );
	void UpdatePlayersList ( );
};

// Class Engine.SeqVar_String
// 0x0010 (0x00A0 - 0x0090)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                         		// 0x0090 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Vector
// 0x000C (0x009C - 0x0090)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                        		// 0x0090 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientSound
// 0x000C (0x027C - 0x0270)
class AAmbientSound : public AKeypoint
{
public:
	class UAudioComponent*                             AudioComponent;                                   		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x0278 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsPlaying : 1;                                   		// 0x0278 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientSoundMovable
// 0x0000 (0x027C - 0x027C)
class AAmbientSoundMovable : public AAmbientSound
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientSoundSimple
// 0x0018 (0x0294 - 0x027C)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                		// 0x027C (0x0008) [0x0000000004020001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	class USoundCue*                                   SoundCueInstance;                                 		// 0x0284 (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	class USoundNodeAmbient*                           SoundNodeInstance;                                		// 0x028C (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x0294 - 0x0294)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x02A8 - 0x0294)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	float                                              FadeInDuration;                                   		// 0x0294 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInVolumeLevel;                                		// 0x0298 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutDuration;                                  		// 0x029C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutVolumeLevel;                               		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCurrentlyPlaying : 1;                            		// 0x02A4 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bFadeOnToggle : 1;                                		// 0x02A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record );
	void OnToggle ( class USeqAct_Toggle* Action );
	void StopPlaying ( );
	void StartPlaying ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

// Class Engine.DistributionFloatSoundParameter
// 0x0003 (0x009C - 0x0099)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNode
// 0x0014 (0x0074 - 0x0060)
class USoundNode : public UObject
{
public:
	struct TArray<class USoundNode*>                   ChildNodes;                                       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                NodeUpdateHint;                                   		// 0x0070 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeAmbient
// 0x0039 (0x00AD - 0x0074)
class USoundNodeAmbient : public USoundNode
{
public:
	struct TArray<struct FAmbientSoundSlot>            SoundSlots;                                       		// 0x0074 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              dBAttenuationAtMax;                               		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMin;                                         		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMax;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMin;                                        		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMax;                                        		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttenuate : 1;                                   		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x00A8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      DistanceModel;                                    		// 0x00AC (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeAmbientNonLoop
// 0x000B (0x00B8 - 0x00AD)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                         		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMax;                                         		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeAttenuation
// 0x001A (0x008E - 0x0074)
class USoundNodeAttenuation : public USoundNode
{
public:
	float                                              dBAttenuationAtMax;                               		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMin;                                        		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RadiusMax;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMin;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LPFRadiusMax;                                     		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAttenuate : 1;                                   		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bSpatialize : 1;                                  		// 0x0088 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAttenuateWithLPF : 1;                            		// 0x0088 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      DistanceAlgorithm;                                		// 0x008C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DistanceType;                                     		// 0x008D (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeConcatenator
// 0x0010 (0x0084 - 0x0074)
class USoundNodeConcatenator : public USoundNode
{
public:
	struct TArray<float>                               InputVolume;                                      		// 0x0074 (0x0010) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeDelay
// 0x0008 (0x007C - 0x0074)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DelayMax;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeDistanceCrossFade
// 0x0010 (0x0084 - 0x0074)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	struct TArray<struct FDistanceDatum>               CrossFadeInput;                                   		// 0x0074 (0x0010) [0x0000000000480049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeLooping
// 0x000C (0x0080 - 0x0074)
class USoundNodeLooping : public USoundNode
{
public:
	float                                              LoopCountMin;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LoopCountMax;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLoopIndefinitely : 1;                            		// 0x007C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeMature
// 0x0000 (0x0074 - 0x0074)
class USoundNodeMature : public USoundNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeMixer
// 0x0010 (0x0084 - 0x0074)
class USoundNodeMixer : public USoundNode
{
public:
	struct TArray<float>                               InputVolume;                                      		// 0x0074 (0x0010) [0x0000000000400049]              ( CPF_Edit | CPF_ExportObject | CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeModulator
// 0x0010 (0x0084 - 0x0074)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              PitchMax;                                         		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMin;                                        		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              VolumeMax;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeModulatorContinuous
// 0x0048 (0x00BC - 0x0074)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       PitchModulation;                                  		// 0x0074 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct FRawDistributionFloat                       VolumeModulation;                                 		// 0x0098 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeOscillator
// 0x0024 (0x0098 - 0x0074)
class USoundNodeOscillator : public USoundNode
{
public:
	float                                              AmplitudeMin;                                     		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AmplitudeMax;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyMin;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrequencyMax;                                     		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetMin;                                        		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OffsetMax;                                        		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterMin;                                        		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CenterMax;                                        		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bModulateVolume : 1;                              		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bModulatePitch : 1;                               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeRandom
// 0x0028 (0x009C - 0x0074)
class USoundNodeRandom : public USoundNode
{
public:
	struct TArray<float>                               Weights;                                          		// 0x0074 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct TArray<unsigned long>                       HasBeenUsed;                                      		// 0x0084 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                NumRandomUsed;                                    		// 0x0094 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bRandomizeWithoutReplacement : 1;                 		// 0x0098 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundNodeWave
// 0x0192 (0x0206 - 0x0074)
class USoundNodeWave : public USoundNode
{
public:
	struct FUntypedBulkData_Mirror                     RawData;                                          		// 0x0074 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                 		// 0x00B4 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                            		// 0x00F4 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                		// 0x0134 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FString                                     SpokenText;                                       		// 0x0174 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<int>                                 ChannelOffsets;                                   		// 0x0184 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 ChannelSizes;                                     		// 0x0194 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FSubtitleCue>                 Subtitles;                                        		// 0x01A4 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<struct FLocalizedSubtitle>           LocalizedSubtitles;                               		// 0x01B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FPointer                                    VorbisDecompressor;                               		// 0x01C4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    RawPCMData;                                       		// 0x01CC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    ResourceData;                                     		// 0x01D4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                CompressionQuality;                               		// 0x01DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Volume;                                           		// 0x01E0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Pitch;                                            		// 0x01E4 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	float                                              Duration;                                         		// 0x01E8 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                NumChannels;                                      		// 0x01EC (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                SampleRate;                                       		// 0x01F0 (0x0004) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	int                                                RawPCMDataSize;                                   		// 0x01F4 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ResourceID;                                       		// 0x01F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                ResourceSize;                                     		// 0x01FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bForceRealTimeDecompression : 1;                  		// 0x0200 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLoopingSound : 1;                                		// 0x0200 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bDynamicResource : 1;                             		// 0x0200 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUseTTS : 1;                                      		// 0x0200 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bProcedural : 1;                                  		// 0x0200 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bMature : 1;                                      		// 0x0200 (0x0004) [0x0000000000008003] [0x00000020] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned long                                      bManualWordWrap : 1;                              		// 0x0200 (0x0004) [0x0000000000008003] [0x00000040] ( CPF_Edit | CPF_Const | CPF_Localized )
	unsigned char                                      TTSSpeaker;                                       		// 0x0204 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      DecompressionType;                                		// 0x0205 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventGeneratePCMData ( int SamplesNeeded, struct TArray<unsigned char>* Buffer );
};

// Class Engine.SoundNodeWaveStreaming
// 0x0012 (0x0218 - 0x0206)
class USoundNodeWaveStreaming : public USoundNodeWave
{
public:
	struct TArray<unsigned char>                       QueuedAudio;                                      		// 0x0208 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventGeneratePCMData ( int SamplesNeeded, struct TArray<unsigned char>* Buffer );
	int eventAvailableAudioBytes ( );
	void eventResetAudio ( );
	void eventQueueAudio ( struct TArray<unsigned char> Data );
};

// Class Engine.SoundNodeWaveParam
// 0x0008 (0x007C - 0x0074)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                		// 0x0074 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Terrain
// 0x014C (0x03BC - 0x0270)
class ATerrain : public AInfo
{
public:
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[ 0x2 ];                    		// 0x0270 (0x0020) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FTerrainHeight>               Heights;                                          		// 0x0290 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FTerrainInfoData>             InfoData;                                         		// 0x02A0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FAlphaMap>                    AlphaMaps;                                        		// 0x02B0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct ATerrain_FTerrainWeightedMaterial> WeightedMaterials;                                		// 0x02C0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UTerrainWeightMapTexture*>     WeightedTextureMaps;                              		// 0x02D0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<unsigned char>                       CachedDisplacements;                              		// 0x02E0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FTerrainLayer>                Layers;                                           		// 0x02F0 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FTerrainDecoLayer>            DecoLayers;                                       		// 0x0300 (0x0010) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	struct TArray<class UTerrainComponent*>            TerrainComponents;                                		// 0x0310 (0x0010) [0x000000040448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline | CPF_NonTransactional )
	struct TArray<struct FSelectedTerrainVertex>       SelectedVertices;                                 		// 0x0320 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0330 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0338 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FGuid                                       LightingGuid;                                     		// 0x0354 (0x0010) [0x0000000000000002]              ( CPF_Const )
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                      		// 0x0364 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                NormalMapLayer;                                   		// 0x036C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumSectionsX;                                     		// 0x0370 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumSectionsY;                                     		// 0x0374 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSize;                                      		// 0x0378 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxCollisionDisplacement;                         		// 0x037C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                MaxTesselationLevel;                              		// 0x0380 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinTessellationLevel;                             		// 0x0384 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TesselationDistanceScale;                         		// 0x0388 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TessellationCheckDistance;                        		// 0x038C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                CollisionTesselationLevel;                        		// 0x0390 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumVerticesX;                                     		// 0x0394 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumVerticesY;                                     		// 0x0398 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                NumPatchesX;                                      		// 0x039C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NumPatchesY;                                      		// 0x03A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxComponentSize;                                 		// 0x03A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                StaticLightingResolution;                         		// 0x03A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x03AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                EditorTessellationLevel;                          		// 0x03B0 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x03B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsOverridingLightResolution : 1;                 		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;            		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceDirectLightMap : 1;                         		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCastDynamicShadow : 1;                           		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSpecular : 1;                              		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bBlockRigidBody : 1;                              		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000040] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                    		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000080] ( CPF_Edit | CPF_Const )
	unsigned long                                      bNoPhysCollision : 1;                             		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000100] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAcceptsDynamicLights : 1;                        		// 0x03B8 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      bMorphingEnabled : 1;                             		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bMorphingGradientsEnabled : 1;                    		// 0x03B8 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bLocked : 1;                                      		// 0x03B8 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bHeightmapLocked : 1;                             		// 0x03B8 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bShowingCollision : 1;                            		// 0x03B8 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bShowWireframe : 1;                               		// 0x03B8 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPostBeginPlay ( );
	void CalcLayerBounds ( );
};

// Class Engine.TerrainComponent
// 0x00D0 (0x02F4 - 0x0224)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	struct TArray<class UShadowMap2D*>                 ShadowMaps;                                       		// 0x0224 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FGuid>                        IrrelevantLights;                                 		// 0x0234 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FPointer                                    TerrainObject;                                    		// 0x0244 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SectionBaseX;                                     		// 0x024C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionBaseY;                                     		// 0x0250 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeX;                                     		// 0x0254 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SectionSizeY;                                     		// 0x0258 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeX;                                 		// 0x025C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                TrueSectionSizeY;                                 		// 0x0260 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    LightMap;                                         		// 0x0264 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<int>                                 PatchBounds;                                      		// 0x026C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 PatchBatches;                                     		// 0x027C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 BatchMaterials;                                   		// 0x028C (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                FullBatch;                                        		// 0x029C (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchOffsets;                                		// 0x02A0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    WorkingOffsets;                                   		// 0x02A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchBatchTriangles;                              		// 0x02B0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    PatchCachedTessellationValues;                    		// 0x02B8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    TesselationLevels;                                		// 0x02C0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FTerrainBVTree                              BVTree;                                           		// 0x02C8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FVector>                      CollisionVertices;                                		// 0x02D8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPointer                                    RBHeightfield;                                    		// 0x02E8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bDisplayCollisionLevel : 1;                       		// 0x02F0 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bPhysicsMeshDirty : 1;                            		// 0x02F0 (0x0004) [0x0000000000003000] [0x00000002] ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TerrainWeightMapTexture
// 0x0019 (0x018C - 0x0173)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	struct TArray<struct FPointer>                     WeightedMaterials;                                		// 0x0174 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class ATerrain*                                    ParentTerrain;                                    		// 0x0184 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TerrainLayerSetup
// 0x0010 (0x0070 - 0x0060)
class UTerrainLayerSetup : public UObject
{
public:
	struct TArray<struct FTerrainFilteredMaterial>     Materials;                                        		// 0x0060 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PostBeginPlay ( );
	void SetMaterials ( struct TArray<struct FTerrainFilteredMaterial> NewMaterials );
};

// Class Engine.TerrainMaterial
// 0x0075 (0x00D5 - 0x0060)
class UTerrainMaterial : public UObject
{
public:
	struct FMatrix                                     LocalToMapping;                                   		// 0x0060 (0x0040) [0x0000000000000000]              
	struct TArray<struct FTerrainFoliageMesh>          FoliageMeshes;                                    		// 0x00A0 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          Material;                                         		// 0x00B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture2D*                                  DisplacementMap;                                  		// 0x00B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingScale;                                     		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingRotation;                                  		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanU;                                      		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MappingPanV;                                      		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DisplacementScale;                                		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MappingType;                                      		// 0x00D4 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIRoot
// 0x0000 (0x0060 - 0x0060)
class UUIRoot : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UOnlinePlayerInterfaceEx* GetOnlinePlayerInterfaceEx ( );
	class UOnlinePlayerInterface* GetOnlinePlayerInterface ( );
	class UOnlineGameInterface* GetOnlineGameInterface ( );
	struct FString ConvertWidgetIDToString ( class UUIObject* SourceWidget );
	bool GetDataStoreStringValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FString* OutStringValue );
	bool GetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* OutFieldValue );
	bool SetDataStoreStringValue ( struct FString InDataStoreMarkup, struct FString InStringValue, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer );
	bool SetDataStoreFieldValue ( struct FString InDataStoreMarkup, class UUIScene* OwnerScene, class ULocalPlayer* OwnerPlayer, struct FUIProviderFieldValue* InFieldValue );
	class UUIDataStore* StaticResolveDataStore ( struct FName DataStoreTag, class UUIScene* OwnerScene, class ULocalPlayer* InPlayerOwner );
	struct FMatrix GetPrimitiveTransform ( class UUIObject* Widget, unsigned long bIncludeAnchorPosition, unsigned long bIncudeRotation, unsigned long bIncludeScale );
	void SetMouseCaptureOverride ( unsigned long bCaptureMouse );
	bool GetCursorSize ( float* CursorXL, float* CursorYL );
	bool GetCursorPosition ( class UUIScene* Scene, int* CursorX, int* CursorY );
	unsigned char GetFaceOrientation ( unsigned char Face );
	class UGameUISceneClient* GetSceneClient ( );
	class UUIInteraction* GetCurrentUIController ( );
	bool IsEditor ( );
	bool IsConsole ( unsigned char ConsoleType );
	unsigned char GetInputPlatformType ( class ULocalPlayer* OwningPlayer );
};

// Class Engine.UIScreenObject
// 0x01C0 (0x0220 - 0x0060)
class UUIScreenObject : public UUIRoot
{
public:
	struct TArray<class UUIObject*>                    Children;                                         		// 0x0060 (0x0010) [0x0000000001400000]              ( CPF_NeedCtorLink )
	struct TArray<class UClass*>                       DefaultStates;                                    		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UUIState*>                     InactiveStates;                                   		// 0x0080 (0x0010) [0x000000000442000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UUIState*>                     StateStack;                                       		// 0x0090 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FPlayerInteractionData>       FocusControls;                                    		// 0x00A0 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FUIFocusPropagationData>      FocusPropagation;                                 		// 0x00B0 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FUIAnimSequence>              AnimStack;                                        		// 0x00C0 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FScriptDelegate>              KeyFrameCompletedDelegates;                       		// 0x00D0 (0x0010) [0x0000000000422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink )
	struct TArray<struct FScriptDelegate>              TrackCompletedDelegates;                          		// 0x00E0 (0x0010) [0x0000000000422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyActiveSkinChanged__Delegate;              		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRawInputKey__Delegate;                        		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRawInputAxis__Delegate;                       		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessInputKey__Delegate;                    		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnProcessInputAxis__Delegate;                   		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyPositionChanged__Delegate;                		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyResolutionChanged__Delegate;              		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyActiveStateChanged__Delegate;             		// 0x0160 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __NotifyVisibilityChanged__Delegate;              		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInitialSceneUpdate__Delegate;                 		// 0x0180 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUIAnim_KeyFrameCompleted__Delegate;           		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUIAnim_TrackCompleted__Delegate;              		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      InitialState;                                     		// 0x01B0 (0x0008) [0x0000000000000000]              
	struct FUIScreenValue_Bounds                       Position;                                         		// 0x01B8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class UUIComp_Event*                               EventProvider;                                    		// 0x01D4 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       FocusedCue;                                       		// 0x01DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MouseEnterCue;                                    		// 0x01E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NavigateUpCue;                                    		// 0x01EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NavigateDownCue;                                  		// 0x01F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NavigateLeftCue;                                  		// 0x01FC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       NavigateRightCue;                                 		// 0x0204 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ZDepth;                                           		// 0x020C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                AnimationCount;                                   		// 0x0210 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              AnimationDebugMultiplier;                         		// 0x0214 (0x0004) [0x0000000000044001]              ( CPF_Edit | CPF_Config | CPF_GlobalConfig )
	float                                              Opacity;                                          		// 0x0218 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bHidden : 1;                                      		// 0x021C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitialized : 1;                                 		// 0x021C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bNeverFocus : 1;                                  		// 0x021C (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bSupportsFocusHint : 1;                           		// 0x021C (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bOverrideInputOrder : 1;                          		// 0x021C (0x0004) [0x0000000000000002] [0x00000010] ( CPF_Const )
	unsigned long                                      bAnimating : 1;                                   		// 0x021C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )
	unsigned long                                      bAnimationPaused : 1;                             		// 0x021C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bSupports3DPrimitives : 1;                        		// 0x021C (0x0004) [0x0000000000000002] [0x00000080] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogCurrentState ( int Indent );
	int Find_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate );
	int Find_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate );
	void Remove_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate );
	void Remove_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate );
	void Add_UIAnimTrackCompletedHandler ( struct FScriptDelegate TrackCompletedDelegate );
	void Add_UIAnimKeyFrameCompletedHandler ( struct FScriptDelegate KeyFrameCompletedDelegate );
	void eventActivateTrackCompletedDelegates ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void eventActivateKeyFrameCompletedDelegates ( class UUIScreenObject* Sender, struct FName AnimName, unsigned char TrackType );
	void eventUIAnimationEnded ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void eventUIAnimationStarted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask, unsigned long bSetAnimatingFlag );
	bool IsAnimationPaused ( );
	void PauseAnimations ( unsigned long bPauseAnimation );
	bool eventIsAnimating ( struct FName AnimationSequenceName );
	void eventClearUIAnimationLoop ( int SequenceIndex, int TrackTypeMask );
	void eventStopUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeq, unsigned long bFinalize, int TrackTypeMask );
	void eventPlayUIAnimation ( struct FName AnimName, class UUIAnimationSeq* AnimSeqTemplate, unsigned char OverrideLoopMode, float PlaybackRate, float InitialPosition, unsigned long bSetAnimatingFlag );
	int FindAnimationSequenceIndex ( struct FName SequenceName );
	void TickAnimations ( float DeltaTime );
	bool AnimGetCurrentPPSettings ( struct FPostProcessSettings* CurrentSettings );
	bool Anim_SetValue ( unsigned char AnimationType, struct FUIAnimationRawData* NewValue );
	bool Anim_GetValue ( unsigned char AnimationType, struct FUIAnimationRawData* out_CurrentValue );
	void OnUIAnim_TrackCompleted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnUIAnim_KeyFrameCompleted ( class UUIScreenObject* Sender, struct FName AnimName, unsigned char TrackType );
	void BecomePrimaryPlayer ( int PlayerIndex );
	unsigned char GetNATType ( );
	void GetLoggedInControllerIds ( unsigned long bRequireOnlineLogin, int MaxPlayersToCheck, struct TArray<int>* ControllerIds );
	int GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin, int MaxPlayersToCheck );
	bool CanPlayOnline ( int ControllerId );
	bool HasLinkConnection ( );
	unsigned char GetLoginStatus ( int ControllerId );
	void OnConsoleCommand ( class UUIAction_ConsoleCommand* Action );
	bool DisableWidget ( int PlayerIndex );
	bool EnableWidget ( int PlayerIndex );
	class UUIScreenObject* GetParent ( );
	bool eventActivateFocusHint ( class UUIObject* FocusHintObject );
	void eventGetSupportedUIActionKeyNames ( struct TArray<struct FName>* out_KeyNames );
	void eventDisablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	void eventEnablePlayerInput ( unsigned char PlayerIndex, unsigned long bRecurse );
	void eventSetVisibility ( unsigned long bIsVisible );
	void PrivateSetVisibility ( unsigned long bVisible );
	bool eventIsGamepadConnected ( int ControllerId );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventPostInitialize ( );
	void eventInitialized ( );
	struct FString GetWidgetPathName ( );
	float GetAspectRatioAutoScaleFactor ( class UFont* BaseFont );
	struct FMatrix GetInverseCanvasToScreen ( );
	struct FMatrix GetCanvasToScreen ( );
	struct FVector PixelToCanvas ( struct FVector2D* PixelPosition );
	struct FVector ScreenToCanvas ( struct FVector4* ScreenPosition );
	struct FVector4 PixelToScreen ( struct FVector2D* PixelPosition );
	struct FVector2D ScreenToPixel ( struct FVector4* ScreenPosition );
	struct FVector4 CanvasToScreen ( struct FVector* CanvasPosition );
	struct FVector DeProject ( struct FVector* PixelPosition );
	struct FVector Project ( struct FVector* CanvasPosition );
	void GetDockedWidgets ( unsigned char SourceFace, unsigned char TargetFace, struct TArray<class UUIObject*>* out_DockedWidgets );
	float ResolveUIExtent ( class UUIScreenObject* OwnerWidget, unsigned char OutputType, struct FUIScreenValue_Extent* ExtentToResolve );
	struct FVector GetPositionVector ( unsigned long bIncludeParentPosition );
	float GetBounds ( unsigned char Dimension, unsigned char OutputType, unsigned long bIgnoreDockPadding );
	float GetPosition ( unsigned char Face, unsigned char OutputType, unsigned long bIncludeOrigin, unsigned long bIgnoreDockPadding );
	void SetPosition ( float NewValue, unsigned char Face, unsigned char InputType, unsigned long bIncludesViewportOrigin, unsigned long bResolveChange );
	void InvalidateAllPositions ( unsigned long bIgnoreDockedFaces );
	void InvalidatePosition ( unsigned char Face );
	int GetPlayerOwnerIndex ( unsigned long bRequireValidIndex );
	int GetBestControllerId ( );
	int GetBestPlayerIndex ( );
	int GetSupportedPlayerCount ( );
	int GetActivePlayerCount ( );
	void SetInputMask ( unsigned char NewInputMask, unsigned long bRecurse, unsigned long bForcedOverride );
	unsigned char GetInputMask ( unsigned long bInheritedMaskOnly, unsigned long bOverrideMaskOnly );
	bool AcceptsPlayerInput ( int PlayerIndex );
	bool IsRuntimeInstance ( );
	bool IsPressed ( int PlayerIndex );
	bool IsActive ( int PlayerIndex );
	bool IsFocused ( int PlayerIndex );
	bool IsDisabled ( int PlayerIndex, unsigned long bCheckOwnerChain );
	bool IsEnabled ( int PlayerIndex, unsigned long bCheckOwnerChain );
	void OverrideLastFocusedControl ( int PlayerIndex, class UUIObject* ChildToFocus );
	class UUIObject* GetLastFocusedControl ( unsigned long bRecurse, int PlayerIndex );
	class UUIObject* GetFocusedControl ( unsigned long bRecurse, int PlayerIndex );
	bool KillFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool SetFocusToChild ( class UUIObject* ChildToFocus, int PlayerIndex );
	bool SetFocus ( class UUIScreenObject* Sender, int PlayerIndex );
	bool CanPropagateFocusFor ( class UUIObject* TestChild );
	bool CanAcceptFocus ( int PlayerIndex, unsigned long bIncludeParentVisibility );
	bool IsNeverFocused ( );
	bool NavigateFocus ( class UUIScreenObject* Sender, unsigned char Direction, int PlayerIndex, unsigned char* bFocusChanged );
	bool PrevControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool NextControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool FocusLastControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool FocusFirstControl ( class UUIScreenObject* Sender, int PlayerIndex );
	bool IsHoldingShift ( int ControllerId );
	bool IsHoldingAlt ( int ControllerId );
	bool IsHoldingCtrl ( int ControllerId );
	bool ConditionalPropagateEnabledState ( int PlayerIndex, unsigned long bForce );
	bool DeactivateStateByClass ( class UClass* StateToRemove, int PlayerIndex, class UUIState** StateThatWasRemoved );
	bool DeactivateState ( class UUIState* StateToRemove, int PlayerIndex );
	bool ActivateStateByClass ( class UClass* StateToActivate, int PlayerIndex, class UUIState** StateThatWasAdded );
	bool ActivateState ( class UUIState* StateToActivate, int PlayerIndex );
	bool HasActiveStateOfClass ( class UClass* StateClass, int PlayerIndex, int* StateIndex );
	class UUIState* GetCurrentState ( int PlayerIndex );
	bool SetEnabled ( unsigned long bEnabled, int PlayerIndex );
	void FindEventsOfClass ( class UClass* EventClassToFind, class UUIState* LimitScope, unsigned long bExactClass, struct TArray<class UUIEvent*>* out_EventInstances );
	void ActivateEventByClass ( int PlayerIndex, class UClass* EventClassToActivate, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int> IndicesToActivate, struct TArray<class UUIEvent*>* out_ActivatedEvents );
	float GetAspectRatio ( );
	float GetViewportHeight ( );
	float GetViewportWidth ( );
	bool GetViewportSize ( struct FVector2D* out_ViewportSize );
	bool GetViewportOrigin ( struct FVector2D* out_ViewportOrigin );
	float GetViewportScale ( );
	bool GetViewportOffset ( struct FVector2D* out_ViewportOffset );
	bool RebuildNavigationLinks ( );
	void RequestPrimitiveReview ( unsigned long bReinitializePrimitives, unsigned long bReviewPrimitiveUsage );
	void RequestSceneInputMaskUpdate ( );
	void RequestFormattingUpdate ( );
	void RequestSceneUpdate ( unsigned long bDockingStackChanged, unsigned long bPositionsChanged, unsigned long bNavLinksOutdated, unsigned long bWidgetStylesChanged );
	int GetDockClients ( unsigned long bDirectDockClientsOnly, unsigned char TargetFace, unsigned char SourceFace, struct TArray<class UUIObject*>* DockClients );
	int GetObjectCount ( );
	struct TArray<class UUIObject*> GetChildren ( unsigned long bRecurse, struct TArray<class UUIObject*> ExclusionSet );
	bool ContainsChildOfClass ( class UClass* SearchClass, unsigned long bRecurse );
	bool ContainsChild ( class UUIObject* Child, unsigned long bRecurse );
	int FindChildIndex ( struct FName WidgetName );
	class UUIObject* FindChildUsingID ( struct FWIDGET_ID WidgetID, unsigned long bRecurse );
	class UUIObject* FindChild ( struct FName WidgetName, unsigned long bRecurse );
	bool ReplaceChild ( class UUIObject* ExistingChild, class UUIObject* NewChild );
	bool ReparentChildren ( struct TArray<class UUIObject*> ChildrenToReparent, class UUIScreenObject* NewParent, int InsertIndex );
	bool ReparentChild ( class UUIObject* CurrentChild, class UUIScreenObject* NewParent, int InsertIndex );
	struct TArray<class UUIObject*> RemoveChildren ( struct TArray<class UUIObject*> ChildrenToRemove );
	bool RemoveChild ( class UUIObject* ExistingChild, struct TArray<class UUIObject*> ExclusionSet );
	int InsertChild ( class UUIObject* NewChild, int InsertIndex, unsigned long bRenameExisting );
	void Initialize ( class UUIScene* inOwnerScene, class UUIObject* InOwner );
	class UUIPrefabInstance* InstanceUIPrefab ( class UUIPrefab* SourcePrefab, struct FName PrefabInstanceName, int InsertIndex, unsigned long bRenameExisting, struct FVector2D* PlacementLocation );
	class UUIObject* CreateWidget ( class UUIScreenObject* Owner, class UClass* WidgetClass, class UObject* WidgetArchetype, struct FName WidgetName );
	bool PlayUISound ( struct FName SoundCueName, int PlayerIndex );
	class ULocalPlayer* GetPlayerOwner ( int PlayerIndex );
	void InitializePlayerTracking ( );
	void RemovePlayerData ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void CreatePlayerData ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void SetZDepth ( float NewZDepth, unsigned long bPropagateToChildren );
	float GetZDepth ( );
	bool IsHidden ( unsigned long bIncludeParents );
	bool IsVisible ( unsigned long bIncludeParents );
	bool IsInitialized ( );
	void OnInitialSceneUpdate ( );
	void NotifyVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible );
	void NotifyActiveStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	void NotifyResolutionChanged ( struct FVector2D* OldViewportsize, struct FVector2D* NewViewportSize );
	void NotifyPositionChanged ( class UUIScreenObject* Sender );
	bool OnProcessInputAxis ( struct FSubscribedInputEventParameters* EventParms );
	bool OnProcessInputKey ( struct FSubscribedInputEventParameters* EventParms );
	bool OnRawInputAxis ( struct FInputEventParameters* EventParms );
	bool OnRawInputKey ( struct FInputEventParameters* EventParms );
	void NotifyActiveSkinChanged ( );
};

// Class Engine.UIComponent
// 0x0000 (0x0070 - 0x0070)
class UUIComponent : public UComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIComp_Event
// 0x0030 (0x00A0 - 0x0070)
class UUIComp_Event : public UUIComponent
{
public:
	struct TArray<struct FDefaultEventSpecification>   DefaultEvents;                                    		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FName>                        DisabledEventAliases;                             		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUISequence*                                 EventContainer;                                   		// 0x0090 (0x0008) [0x0000000000000000]              
	class UUIEvent_ProcessInput*                       InputProcessor;                                   		// 0x0098 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UnregisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
	void RegisterInputEvents ( class UUIState* InputEventOwner, int PlayerIndex );
};

// Class Engine.UIEventContainer
// 0x0000 (0x0060 - 0x0060)
class UUIEventContainer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveSequenceObjects ( struct TArray<class USequenceObject*> ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events );
};

// Class Engine.DataStoreClient
// 0x0050 (0x00B0 - 0x0060)
class UDataStoreClient : public UUIRoot
{
public:
	struct TArray<struct FString>                      GlobalDataStoreClasses;                           		// 0x0060 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UUIDataStore*>                 GlobalDataStores;                                 		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FString>                      PlayerDataStoreClassNames;                        		// 0x0080 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       PlayerDataStoreClasses;                           		// 0x0090 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FPlayerDataStoreGroup>        PlayerDataStores;                                 		// 0x00A0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugDumpDataStoreInfo ( unsigned long bVerbose );
	void eventNotifyGameSessionEnded ( );
	class UClass* FindDataStoreClass ( class UClass* RequiredMetaClass );
	void GetPlayerDataStoreClasses ( struct TArray<class UClass*>* out_DataStoreClasses );
	int FindPlayerDataStoreIndex ( class ULocalPlayer* PlayerOwner );
	void GetAvailableDataStores ( class UUIScene* CurrentScene, struct TArray<class UUIDataStore*>* out_DataStores );
	bool UnregisterDataStore ( class UUIDataStore* DataStore );
	bool RegisterDataStore ( class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner );
	class UUIDataStore* CreateDataStore ( class UClass* DataStoreClass );
	class UUIDataStore* FindDataStore ( struct FName DataStoreTag, class ULocalPlayer* PlayerOwner );
};

// Class Engine.Interaction
// 0x0040 (0x00A0 - 0x0060)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInitialize__Delegate;                         		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyGameSessionEnded ( );
	void Initialized ( );
	void OnInitialize ( );
	void Init ( );
	void eventPostRender ( class UCanvas* Canvas );
	void eventTick ( float DeltaTime );
	bool OnReceivedNativeInputChar ( int ControllerId, struct FString Unicode );
	bool OnReceivedNativeInputAxis ( int ControllerId, struct FName Key, float Delta, float DeltaTime, unsigned long bGamepad );
	bool OnReceivedNativeInputKey ( int ControllerId, struct FName Key, unsigned char EventType, float AmountDepressed, unsigned long bGamepad );
};

// Class Engine.Console
// 0x01D0 (0x0270 - 0x00A0)
class UConsole : public UInteraction
{
public:
	struct FString                                     History[ 0x10 ];                                  		// 0x00A0 (0x0100) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FAutoCompleteNode                           AutoCompleteTree;                                 		// 0x01A0 (0x0024) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct TArray<struct FString>                      Scrollback;                                       		// 0x01C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     TypedStr;                                         		// 0x01D4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FAutoCompleteCommand>         ManualAutoCompleteList;                           		// 0x01E4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FAutoCompleteCommand>         AutoCompleteList;                                 		// 0x01F4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FString>                      MapPathsForAutoComplete;                          		// 0x0204 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<int>                                 AutoCompleteIndices;                              		// 0x0214 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class ULocalPlayer*                                ConsoleTargetPlayer;                              		// 0x0224 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_Black;                             		// 0x022C (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  DefaultTexture_White;                             		// 0x0234 (0x0008) [0x0000000000000000]              
	struct FName                                       ConsoleKey;                                       		// 0x023C (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       TypeKey;                                          		// 0x0244 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                MaxScrollbackSize;                                		// 0x024C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	int                                                SBHead;                                           		// 0x0250 (0x0004) [0x0000000000000000]              
	int                                                SBPos;                                            		// 0x0254 (0x0004) [0x0000000000000000]              
	int                                                HistoryTop;                                       		// 0x0258 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryBot;                                       		// 0x025C (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                HistoryCur;                                       		// 0x0260 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                TypedStrPos;                                      		// 0x0264 (0x0004) [0x0000000000000000]              
	int                                                AutoCompleteIndex;                                		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bNavigatingHistory : 1;                           		// 0x026C (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bCaptureKeyInput : 1;                             		// 0x026C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bCtrl : 1;                                        		// 0x026C (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableUI : 1;                                    		// 0x026C (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bAutoCompleteLocked : 1;                          		// 0x026C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;           		// 0x026C (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;               		// 0x026C (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateCompleteIndices ( );
	void BuildRuntimeAutoCompleteList ( unsigned long bForce );
	void AppendInputText ( struct FString Text );
	bool ProcessControlKey ( struct FName Key, unsigned char Event );
	void FlushPlayerInput ( );
	bool IsUIMiniConsoleOpen ( );
	bool IsUIConsoleOpen ( );
	bool InputChar ( int ControllerId, struct FString Unicode );
	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void PostRender_Console ( class UCanvas* Canvas );
	void StartTyping ( struct FString Text );
	void eventOutputText ( struct FString Text );
	void OutputTextLine ( struct FString Text );
	void ClearOutput ( );
	void ConsoleCommand ( struct FString Command );
	void SaveHistoryToFile ( );
	void PurgeCommandFromHistory ( struct FString Command );
	void SetCursorPos ( int Position );
	void SetInputText ( struct FString Text );
	void Initialized ( );
};

// Class Engine.Input
// 0x00C9 (0x0169 - 0x00A0)
class UInput : public UInteraction
{
public:
	struct TArray<struct FPointer>                     AxisArray;                                        		// 0x00A0 (0x0010) [0x0000000000101002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FKeyBind>                     Bindings;                                         		// 0x00B0 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FName>                        PressedKeys;                                      		// 0x00C0 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00D0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0118 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.Input.KeyToModifiers
	float                                              CurrentDelta;                                     		// 0x0160 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              CurrentDeltaTime;                                 		// 0x0164 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      CurrentEvent;                                     		// 0x0168 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetBind ( struct FString Command, struct FName* BindName );
	struct FString GetBind ( unsigned long Control, unsigned long Shift, unsigned long Alt, struct FName* Key );
	void ResetInput ( );
};

// Class Engine.PlayerInput
// 0x009A (0x0203 - 0x0169)
class UPlayerInput : public UInput
{
public:
	struct FName                                       LastAxisKeyName;                                  		// 0x016C (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              ZeroTime[ 0x2 ];                                  		// 0x0174 (0x0008) [0x0000000000000000]              
	float                                              SmoothedMouse[ 0x2 ];                             		// 0x017C (0x0008) [0x0000000000000000]              
	float                                              DoubleClickTimer;                                 		// 0x0184 (0x0004) [0x0000000000000000]              
	float                                              DoubleClickTime;                                  		// 0x0188 (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              MouseSensitivity;                                 		// 0x018C (0x0004) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	float                                              aBaseX;                                           		// 0x0190 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseY;                                           		// 0x0194 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aBaseZ;                                           		// 0x0198 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseX;                                          		// 0x019C (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aMouseY;                                          		// 0x01A0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aForward;                                         		// 0x01A4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aTurn;                                            		// 0x01A8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aStrafe;                                          		// 0x01AC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aUp;                                              		// 0x01B0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLookUp;                                          		// 0x01B4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aRightAnalogTrigger;                              		// 0x01B8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aLeftAnalogTrigger;                               		// 0x01BC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelX;                                       		// 0x01C0 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelY;                                       		// 0x01C4 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3AccelZ;                                       		// 0x01C8 (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              aPS3Gyro;                                         		// 0x01CC (0x0004) [0x0000000000000004]              ( CPF_Input )
	float                                              RawJoyUp;                                         		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyRight;                                      		// 0x01D4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookRight;                                  		// 0x01D8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              RawJoyLookUp;                                     		// 0x01DC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MoveForwardSpeed;                                 		// 0x01E0 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MoveStrafeSpeed;                                  		// 0x01E4 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookRightScale;                                   		// 0x01E8 (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	float                                              LookUpScale;                                      		// 0x01EC (0x0004) [0x0000000000004001]              ( CPF_Edit | CPF_Config )
	int                                                MouseSamples;                                     		// 0x01F0 (0x0004) [0x0000000000000000]              
	float                                              MouseSamplingTotal;                               		// 0x01F4 (0x0004) [0x0000000000000000]              
	float                                              AutoUnlockTurnTime;                               		// 0x01F8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bUsingGamepad : 1;                                		// 0x01FC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bInvertMouse : 1;                                 		// 0x01FC (0x0004) [0x0000000000044000] [0x00000002] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInvertTurn : 1;                                  		// 0x01FC (0x0004) [0x0000000000044000] [0x00000004] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bWasForward : 1;                                  		// 0x01FC (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bWasBack : 1;                                     		// 0x01FC (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bWasLeft : 1;                                     		// 0x01FC (0x0004) [0x0000000000000000] [0x00000020] 
	unsigned long                                      bWasRight : 1;                                    		// 0x01FC (0x0004) [0x0000000000000000] [0x00000040] 
	unsigned long                                      bEdgeForward : 1;                                 		// 0x01FC (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bEdgeBack : 1;                                    		// 0x01FC (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bEdgeLeft : 1;                                    		// 0x01FC (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bEdgeRight : 1;                                   		// 0x01FC (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bEnableMouseSmoothing : 1;                        		// 0x01FC (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bEnableFOVScaling : 1;                            		// 0x01FC (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bLockTurnUntilRelease : 1;                        		// 0x01FC (0x0004) [0x0000000000002000] [0x00002000] ( CPF_Transient )
	unsigned char                                      bStrafe;                                          		// 0x0200 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bXAxis;                                           		// 0x0201 (0x0001) [0x0000000000000004]              ( CPF_Input )
	unsigned char                                      bYAxis;                                           		// 0x0202 (0x0001) [0x0000000000000004]              ( CPF_Input )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );
	void ClearSmoothing ( );
	void SmartJump ( );
	void Jump ( );
	void ProcessInputMatching ( float DeltaTime );
	unsigned char CheckForDoubleClickMove ( float DeltaTime );
	void CatchDoubleClickInput ( );
	void eventPlayerInput ( float DeltaTime );
	void AdjustMouseSensitivity ( float FOVScale );
	void PostProcessInput ( float DeltaTime );
	void PreProcessInput ( float DeltaTime );
	void DrawHUD ( class AHUD* H );
	void SetSensitivity ( float F );
	bool InvertTurn ( );
	bool InvertMouse ( );
};

// Class Engine.PlayerManagerInteraction
// 0x0000 (0x00A0 - 0x00A0)
class UPlayerManagerInteraction : public UInteraction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIInteraction
// 0x0184 (0x0224 - 0x00A0)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x00A0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;            		// 0x00A8 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x00B0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIAxisEmulationData                        AxisInputEmulation[ 0x4 ];                        		// 0x00B8 (0x0050) [0x0000000000002000]              ( CPF_Transient )
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                            		// 0x0108 (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FString                                     UISkinName;                                       		// 0x0118 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FName>                        UISoundCueNames;                                  		// 0x0128 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FName>                        SupportedDoubleClickKeys;                         		// 0x0138 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      SceneClientClass;                                 		// 0x0148 (0x0008) [0x0000000000000000]              
	struct FPointer                                    CanvasScene;                                      		// 0x0150 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0158 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.WidgetInputAliasLookupTable
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x01A0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	class UGameUISceneClient*                          SceneClient;                                      		// 0x01E8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x01F0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIInputConfiguration*                       UIInputConfig;                                    		// 0x01F8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              UIJoystickDeadZone;                               		// 0x0200 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              UIAxisMultiplier;                                 		// 0x0204 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              AxisRepeatDelay;                                  		// 0x0208 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MouseButtonRepeatDelay;                           		// 0x020C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              DoubleClickTriggerSeconds;                        		// 0x0210 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                DoubleClickPixelTolerance;                        		// 0x0214 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipInitialDelaySeconds;                       		// 0x0218 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              ToolTipExpirationSeconds;                         		// 0x021C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      bProcessInput : 1;                                		// 0x0220 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisableToolTips : 1;                             		// 0x0220 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusOnActive : 1;                               		// 0x0220 (0x0004) [0x0000000000004002] [0x00000004] ( CPF_Const | CPF_Config )
	unsigned long                                      bFocusedStateRules : 1;                           		// 0x0220 (0x0004) [0x0000000000004002] [0x00000008] ( CPF_Const | CPF_Config )
	unsigned long                                      bIsUIPrimitiveSceneInitialized : 1;               		// 0x0220 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyGameSessionEnded ( );
	unsigned char eventGetNATType ( );
	bool CanAllPlayOnline ( );
	bool eventCanPlayOnline ( int ControllerId );
	int GetConnectedGamepadCount ( struct TArray<unsigned long> ControllerConnectionStatusOverrides );
	bool IsGamepadConnected ( int ControllerId );
	int GetNumGuestsLoggedIn ( );
	int GetLoggedInPlayerCount ( unsigned long bRequireOnlineLogin );
	bool eventIsLoggedIn ( int ControllerId, unsigned long bRequireOnlineLogin );
	bool eventHasLinkConnection ( );
	unsigned char GetLowestLoginStatusOfControllers ( );
	unsigned char eventGetLoginStatus ( int ControllerId );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	class ULocalPlayer* GetLocalPlayer ( int PlayerIndex );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	bool PlayUISound ( struct FName SoundCueName, int PlayerIndex );
	class UDataStoreClient* GetDataStoreClient ( );
	int GetPlayerControllerId ( int PlayerIndex );
	int GetPlayerIndex ( int ControllerId );
	int GetPlayerCount ( );
};

// Class Engine.UIInputConfiguration
// 0x0020 (0x0080 - 0x0060)
class UUIInputConfiguration : public UUIRoot
{
public:
	struct TArray<struct FUIInputAliasClassMap>        WidgetInputAliases;                               		// 0x0060 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FUIAxisEmulationDefinition>   AxisEmulationDefinitions;                         		// 0x0070 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void NotifyGameSessionEnded ( );
	void LoadInputAliasClasses ( );
};

// Class Engine.UILayerBase
// 0x0000 (0x0060 - 0x0060)
class UUILayerBase : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UISceneClient
// 0x00D4 (0x0134 - 0x0060)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                    		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0068 (0x0008) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                   		// 0x0070 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMatrix                                     InvCanvasToScreen;                                		// 0x00B0 (0x0040) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    RenderViewport;                                   		// 0x00F0 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UUISkin*                                     ActiveSkin;                                       		// 0x00F8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FIntPoint                                   MousePosition;                                    		// 0x0100 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIObject*                                   ActiveControl;                                    		// 0x0108 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UDataStoreClient*                            DataStoreManager;                                 		// 0x0110 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UMaterialInstanceConstant*                   OpacityParameter;                                 		// 0x0118 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       OpacityParameterName;                             		// 0x0120 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIScenePostProcess;                               		// 0x0128 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnablePostProcess : 1;                           		// 0x0130 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeSceneClient ( );
	struct FMatrix GetInverseCanvasToScreen ( class UUIObject* Widget );
	struct FMatrix GetCanvasToScreen ( class UUIObject* Widget );
	void UpdateCanvasToScreen ( );
	bool ChangeMouseCursor ( struct FName CursorName );
	void SetMousePosition ( int NewMouseX, int NewMouseY );
	bool CloseSceneAtIndex ( int SceneStackIndex, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately );
	bool CloseScene ( class UUIScene* Scene, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately );
	bool ReplaceSceneAtIndex ( int IndexOfSceneToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool ReplaceScene ( class UUIScene* SceneInstanceToReplace, class UUIScene* SceneToOpen, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool InsertScene ( int DesiredInsertIndex, class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene, int* ActualInsertIndex );
	bool OpenScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, unsigned char ForcedPriority, class UUIScene** OpenedScene );
	bool InitializeScene ( class UUIScene* Scene, class ULocalPlayer* SceneOwner, class UUIScene** InitializedScene );
	bool IsSceneInitialized ( class UUIScene* Scene );
	bool IsUIActive ( int Flags );
	bool ChangeActiveSkin ( class UUISkin* NewActiveSkin );
};

// Class Engine.UIState
// 0x003A (0x009A - 0x0060)
class UUIState : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FInputKeyAction>              StateInputActions;                                		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FInputKeyAction>              DisabledInputActions;                             		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       MouseCursorName;                                  		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIStateSequence*                            StateSequence;                                    		// 0x0090 (0x0008) [0x0000000005400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	unsigned char                                      PlayerIndexMask;                                  		// 0x0098 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      StackPriority;                                    		// 0x0099 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveSequenceObjects ( struct TArray<class USequenceObject*>* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events );
	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	void eventOnDeactivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPoppedState );
	void eventOnActivate ( class UUIScreenObject* Target, int PlayerIndex, unsigned long bPushedState );
	bool eventDeactivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
	bool IsActiveForPlayer ( int PlayerIndex );
	bool eventIsWidgetClassSupported ( class UClass* WidgetClass );
};

// Class Engine.UIState_Disabled
// 0x0002 (0x009C - 0x009A)
class UUIState_Disabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsStateAllowed ( class UUIScreenObject* Target, class UUIState* NewState, int PlayerIndex );
	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

// Class Engine.UIState_Enabled
// 0x0002 (0x009C - 0x009A)
class UUIState_Enabled : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIString
// 0x00B4 (0x0114 - 0x0060)
class UUIString : public UUIRoot
{
public:
	struct TArray<struct FPointer>                     Nodes;                                            		// 0x0060 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FUICombinedStyleData                        StringStyleData;                                  		// 0x0070 (0x009C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   StringExtent;                                     		// 0x010C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ContainsMarkup ( );
	void GetAutoScaleValue ( struct FVector2D BoundingRegionSize, struct FVector2D StringSize, struct FVector2D* out_AutoScalePercent );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	bool SetValue ( struct FString InputString, unsigned long bIgnoreMarkup );
};

// Class Engine.UIDataProvider
// 0x0021 (0x0081 - 0x0060)
class UUIDataProvider : public UUIRoot
{
public:
	struct TArray<struct FScriptDelegate>              ProviderChangedNotifies;                          		// 0x0060 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataProviderPropertyChange__Delegate;         		// 0x0070 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      WriteAccessType;                                  		// 0x0080 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int ParseTagArrayDelimiter ( struct FName* FieldName );
	bool RemovePropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate );
	bool AddPropertyNotificationChangeRequest ( struct FScriptDelegate InDelegate, unsigned long bAllowDuplicates );
	void eventNotifyPropertyChanged ( struct FName PropTag );
	bool eventIsCollectionDataType ( unsigned char FieldType );
	bool eventIsProviderDisabled ( );
	struct FString eventGenerateFillerData ( struct FString DataTag );
	struct FString eventGenerateScriptMarkupString ( struct FName DataTag );
	bool eventSetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventGetFieldValue ( struct FString FieldName, int ArrayIndex, struct FUIProviderScriptFieldValue* FieldValue );
	bool eventAllowPublishingToField ( struct FString FieldName, int ArrayIndex );
	void eventGetSupportedScriptFields ( struct TArray<struct FUIDataProviderField>* out_Fields );
	int ParseArrayDelimiter ( struct FString* DataTag );
	bool GetProviderFieldType ( struct FString DataTag, unsigned char* out_ProviderFieldType );
	void OnDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
};

// Class Engine.UIDataStore
// 0x002B (0x00AC - 0x0081)
class UUIDataStore : public UUIDataProvider
{
public:
	struct TArray<struct FScriptDelegate>              RefreshSubscriberNotifies;                        		// 0x0084 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;              		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       Tag;                                              		// 0x00A4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UDataStoreClient* GetDataStoreClient ( );
	void OnCommit ( );
	void eventRefreshSubscribers ( struct FName PropertyTag, unsigned long bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool NotifyGameSessionEnded ( );
	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
};

// Class Engine.UISkin
// 0x0160 (0x020C - 0x00AC)
class UUISkin : public UUIDataStore
{
public:
	struct TArray<class UUIStyle*>                     Styles;                                           		// 0x00AC (0x0010) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FString>                      StyleGroups;                                      		// 0x00BC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FUISoundCue>                  SoundCues;                                        		// 0x00CC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FString>                      StyleGroupMap;                                    		// 0x00DC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00EC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleLookupTable
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0134 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UISkin.StyleNameMap
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x017C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UISkin.CursorMap
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x01C4 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UISkin.SoundCueMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSubscriberDetached ( class UUIDataStoreSubscriber* Subscriber );
	void eventSubscriberAttached ( class UUIDataStoreSubscriber* Subscriber );
	void GetStyleGroups ( unsigned long bIncludeInheritedGroups, struct TArray<struct FString>* StyleGroupArray );
	int FindStyleGroupIndex ( struct FString StyleGroupName );
	bool RenameStyleGroup ( struct FString OldStyleGroupName, struct FString NewStyleGroupName );
	bool RemoveStyleGroupName ( struct FString StyleGroupName );
	bool AddStyleGroupName ( struct FString StyleGroupName );
	bool IsInheritedGroupName ( struct FString StyleGroupName );
	void GetSkinSoundCues ( struct TArray<struct FUISoundCue>* out_SoundCues );
	bool GetUISoundCue ( struct FName SoundCueName, class USoundCue** out_UISoundCue );
	bool RemoveUISoundCue ( struct FName SoundCueName );
	bool AddUISoundCue ( struct FName SoundCueName, class USoundCue* SoundToPlay );
	class UUITexture* GetCursorResource ( struct FName CursorName );
	void GetAvailableStyles ( unsigned long bIncludeInheritedStyles, struct TArray<class UUIStyle*>* out_Styles );
};

// Class Engine.UIStyle
// 0x0088 (0x00E8 - 0x0060)
class UUIStyle : public UUIRoot
{
public:
	struct FString                                     StyleName;                                        		// 0x0060 (0x0010) [0x0000000000408003]              ( CPF_Edit | CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StyleGroupName;                                   		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      StyleDataClass;                                   		// 0x0080 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0088 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIStyle.StateDataMap
	struct FSTYLE_ID                                   StyleID;                                          		// 0x00D0 (0x0010) [0x0000000000000000]              
	struct FName                                       StyleTag;                                         		// 0x00E0 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIStyle_Data* eventGetDefaultStyle ( );
	class UUIStyle_Data* GetStyleForStateByClass ( class UClass* StateClass );
	class UUIStyle_Data* GetStyleForState ( class UUIState* StateObject );
};

// Class Engine.UIObject
// 0x02F6 (0x0516 - 0x0220)
class UUIObject : public UUIScreenObject
{
public:
	struct FUIRotation                                 Rotation;                                         		// 0x0220 (0x0060) [0x0000000000000001]              ( CPF_Edit )
	struct FUIDataStoreBinding                         ToolTip;                                          		// 0x0280 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIDataStoreBinding                         ContextMenuData;                                  		// 0x02C0 (0x0040) [0x0000000000420001]              ( CPF_Edit | CPF_EditConst | CPF_NeedCtorLink )
	struct FUIStyleReference                           PrimaryStyle;                                     		// 0x0300 (0x0028) [0x0000000000000000]              
	struct TArray<class UUIStyleResolver*>             StyleSubscribers;                                 		// 0x0328 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreate__Delegate;                             		// 0x0338 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPreSceneUpdate__Delegate;                     		// 0x0348 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPostSceneUpdate__Delegate;                    		// 0x0358 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnValueChanged__Delegate;                       		// 0x0368 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRefreshSubscriberValue__Delegate;             		// 0x0378 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressed__Delegate;                            		// 0x0388 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressRepeat__Delegate;                        		// 0x0398 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPressRelease__Delegate;                       		// 0x03A8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClicked__Delegate;                            		// 0x03B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDoubleClick__Delegate;                        		// 0x03C8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOpenContextMenu__Delegate;                    		// 0x03D8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCloseContextMenu__Delegate;                   		// 0x03E8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnContextMenuItemSelected__Delegate;            		// 0x03F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUIDockingSet                               DockTargets;                                      		// 0x0408 (0x004C) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FUINavigationData                           NavigationTargets;                                		// 0x0454 (0x0044) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   RenderBoundsVertices[ 0x4 ];                      		// 0x0498 (0x0020) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	struct FWIDGET_ID                                  WidgetID;                                         		// 0x04B8 (0x0010) [0x0000000001000000]              
	float                                              RenderBounds[ 0x4 ];                              		// 0x04C8 (0x0010) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	struct FVector                                     RenderOffset;                                     		// 0x04D8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       WidgetTag;                                        		// 0x04E4 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UUIObject*                                   Owner;                                            		// 0x04EC (0x0008) [0x0000000000200002]              ( CPF_Const )
	class UUIScene*                                    OwnerScene;                                       		// 0x04F4 (0x0008) [0x0000000000200002]              ( CPF_Const )
	class UUIObject*                                   AnimationParent;                                  		// 0x04FC (0x0008) [0x0000000000000000]              
	int                                                TabIndex;                                         		// 0x0504 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PrivateFlags;                                     		// 0x0508 (0x0004) [0x0000000000000000]              
	struct FColor                                      DebugBoundsColor;                                 		// 0x050C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableActiveCursorUpdates : 1;                   		// 0x0510 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSupportsPrimaryStyle : 1;                        		// 0x0510 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bEnableSceneUpdateNotifications : 1;              		// 0x0510 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebugShowBounds : 1;                             		// 0x0510 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      PlayerInputMask;                                  		// 0x0514 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MaskPostProcess;                                  		// 0x0515 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void LogRenderBounds ( int Indent );
	void ClearDockTargets ( );
	class UUIScreenObject* GetParent ( );
	class UUIObject* GetOwner ( );
	class UUIScene* GetScene ( );
	bool SetWidgetStyleByName ( struct FName StyleResolverTagToSet, struct FName StyleFriendlyName );
	int FindStyleSubscriberIndexById ( struct FName StyleSubscriberId );
	int FindStyleSubscriberIndex ( class UUIStyleResolver** Subscriber );
	void RemoveStyleSubscriber ( class UUIStyleResolver* Subscriber );
	void AddStyleSubscriber ( class UUIStyleResolver* Subscriber );
	float GetPositionExtent ( unsigned char Face, unsigned long bIncludeRotation, unsigned long bIncludeOrigin );
	void GetPositionExtents ( unsigned long bIncludeRotation, unsigned long bIncludeOrigin, float* MinX, float* MaxX, float* MinY, float* MaxY );
	bool NeedsActiveCursorUpdates ( );
	void SetActiveCursorUpdate ( unsigned long bShouldReceiveCursorUpdates );
	void SetPrivateBehavior ( int Behavior, unsigned long Value, unsigned long bRecurse );
	bool IsPrivateBehaviorSet ( int Behavior );
	bool CanAcceptFocus ( int PlayerIndex, unsigned long bIncludeParentVisibility );
	bool SetForcedNavigationTarget ( unsigned char Face, class UUIObject* NavTarget, unsigned long bIsNullOverride );
	bool SetNavigationTarget ( unsigned char Face, class UUIObject* NewNavTarget );
	bool IsDockedTo ( class UUIScreenObject* TargetWidget, unsigned char SourceFace, unsigned char TargetFace );
	bool GetDockParameters ( unsigned char SourceFace, class UUIScreenObject** TargetWidget, unsigned char* TargetFace, float* TargetPadding );
	bool SetDockParameters ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockPadding ( unsigned char SourceFace, float PaddingValue, unsigned char PaddingInputType, unsigned long bModifyPaddingScaleType );
	bool SetDockTarget ( unsigned char SourceFace, class UUIScreenObject* Target, unsigned char TargetFace );
	bool IsContainedBy ( class UUIObject* TestWidget );
	void NotifyValueChanged ( int PlayerIndex, int NotifyFlags );
	struct FMatrix GetRotationMatrix ( unsigned long bIncludeParentRotations );
	struct FMatrix GenerateTransformMatrix ( unsigned long bIncludeParentTransforms );
	struct FVector GetAnchorPosition ( unsigned long bRelativeToWidget, unsigned long bPixelSpace );
	void UpdateRotationMatrix ( );
	void RotateWidget ( struct FRotator NewRotationAmount, unsigned long bAccumulateRotation );
	void SetAnchorPosition ( struct FVector NewAnchorPosition, unsigned char InputType );
	bool HasTransform ( unsigned long bIncludeParentTransforms );
	struct FString GetToolTipValue ( );
	struct FString GenerateSceneDataStoreMarkup ( struct FString Group );
	void ClearDefaultDataBinding ( int BindingIndex );
	void GetDefaultDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	bool ResolveDefaultDataBinding ( int BindingIndex );
	struct FString GetDefaultDataBinding ( int BindingIndex );
	void SetDefaultDataBinding ( struct FString MarkupText, int BindingIndex );
	void OnContextMenuItemSelected ( class UUIContextMenu* ContextMenu, int PlayerIndex, int ItemIndex );
	bool OnCloseContextMenu ( class UUIContextMenu* ContextMenu, int PlayerIndex );
	bool OnOpenContextMenu ( class UUIObject* Sender, int PlayerIndex, class UUIContextMenu** CustomContextMenu );
	void OnDoubleClick ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnClicked ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressRelease ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressRepeat ( class UUIScreenObject* EventObject, int PlayerIndex );
	void OnPressed ( class UUIScreenObject* EventObject, int PlayerIndex );
	bool OnRefreshSubscriberValue ( class UUIObject* Sender, int BindingIndex );
	void OnValueChanged ( class UUIObject* Sender, int PlayerIndex );
	void OnPostSceneUpdate ( class UUIObject* Sender );
	void OnPreSceneUpdate ( class UUIObject* Sender );
	void OnCreate ( class UUIObject* CreatedWidget, class UUIScreenObject* CreatorContainer );
};

// Class Engine.UIComp_AutoAlignment
// 0x0002 (0x0072 - 0x0070)
class UUIComp_AutoAlignment : public UUIComponent
{
public:
	unsigned char                                      HorzAlignment;                                    		// 0x0070 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      VertAlignment;                                    		// 0x0071 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIComp_DrawComponents
// 0x0025 (0x0095 - 0x0070)
class UUIComp_DrawComponents : public UUIComponent
{
public:
	struct FScriptDelegate                             __OnFadeComplete__Delegate;                       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	float                                              FadeAlpha;                                        		// 0x0080 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeTarget;                                       		// 0x0084 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              FadeTime;                                         		// 0x0088 (0x0004) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )
	float                                              LastRenderTime;                                   		// 0x008C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FadeRate;                                         		// 0x0090 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      FadeType;                                         		// 0x0094 (0x0001) [0x0000000000002001]              ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnFadeComplete ( class UUIComp_DrawComponents* Sender );
	void ResetFade ( );
	void Pulse ( float MaxAlpha, float MinAlpha, float PulseRate );
	void Fade ( float FromAlpha, float ToAlpha, float TargetFadeTime );
};

// Class Engine.UIComp_DrawImage
// 0x00A7 (0x013C - 0x0095)
class UUIComp_DrawImage : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0098 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x00A0 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIStyleReference                           ImageStyle;                                       		// 0x00A8 (0x0028) [0x0000000000000000]              
	struct FUIImageStyleOverride                       StyleCustomization;                               		// 0x00D0 (0x005C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StyleResolverTag;                                 		// 0x012C (0x0008) [0x0000000000000000]              
	class UUITexture*                                  ImageRef;                                         		// 0x0134 (0x0008) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	class USurface* GetImage ( );
	void DisableCustomFormatting ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void DisableCustomColor ( );
	void DisableCustomCoordinates ( );
	void SetFormatting ( unsigned char Orientation, struct FUIImageAdjustmentData NewFormattingData );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetColor ( struct FLinearColor NewColor );
	void SetCoordinates ( struct FTextureCoordinates NewCoordinates );
	void SetImage ( class USurface* NewImage );
	class UUIStyle_Image* GetAppliedImageStyle ( class UUIState* DesiredMenuState );
};

// Class Engine.UIComp_DrawString
// 0x012B (0x01C0 - 0x0095)
class UUIComp_DrawString : public UUIComp_DrawComponents
{
public:
	struct FPointer                                    VfTable_IUIStyleResolver;                         		// 0x0098 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIStyleReference                           StringStyle;                                      		// 0x00A0 (0x0028) [0x0000000000000000]              
	class UClass*                                      StringClass;                                      		// 0x00C8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FUITextStyleOverride                        TextStyleCustomization;                           		// 0x00D0 (0x004C) [0x0000000000000001]              ( CPF_Edit )
	struct FAutoSizeData                               AutoSizeParameters[ 0x2 ];                        		// 0x011C (0x0038) [0x0000000000000001]              ( CPF_Edit )
	struct FUIRenderingSubregion                       ClampRegion[ 0x2 ];                               		// 0x0154 (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUIDataStoreSubscriber*                      SubscriberOwner;                                  		// 0x0184 (0x0010) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x018C (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FLinearColor                                DropShadowColor;                                  		// 0x0194 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       StyleResolverTag;                                 		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UUIString*                                   ValueString;                                      		// 0x01AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FVector2D                                   DropShadowOffset;                                 		// 0x01B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDropShadow : 1;                                  		// 0x01BC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIgnoreMarkup : 1;                                		// 0x01BC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bAllowBoundsAdjustment : 1;                       		// 0x01BC (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bRefreshString : 1;                               		// 0x01BC (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x01BC (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventSetAutoSizePadding ( unsigned char Orientation, float NearValue, float FarValue, unsigned char NearScaleType, unsigned char FarScaleType );
	void eventEnableAutoSizing ( unsigned char Orientation, unsigned long bShouldEnable );
	bool IsAutoSizeEnabled ( unsigned char Orientation );
	void SetAutoSizeExtent ( unsigned char Orientation, float MinValue, float MaxValue, unsigned char MinScaleType, unsigned char MaxScaleType );
	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
	bool GetFinalStringStyle ( struct FUICombinedStyleData* FinalStyleData );
	class UUIStyle_Combo* GetAppliedStringStyle ( class UUIState* DesiredMenuState );
	unsigned char GetWrapMode ( );
	void DisableCustomSpacingAdjust ( );
	void DisableCustomScale ( );
	void DisableCustomAutoScaling ( );
	void DisableCustomClipAlignment ( );
	void DisableCustomClipMode ( );
	void DisableCustomAlignment ( );
	void DisableCustomAttributes ( );
	void DisableCustomFont ( );
	void DisableCustomPadding ( );
	void DisableCustomOpacity ( );
	void DisableCustomColor ( );
	void SetSpacingAdjust ( unsigned char Orientation, float NewSpacingAdjust );
	void SetScale ( unsigned char Orientation, float NewScale );
	void SetAutoScaling ( unsigned char NewAutoScaleMode, float NewMinScaleValue );
	void SetClipAlignment ( unsigned char NewClipAlignment );
	void SetWrapMode ( unsigned char NewClipMode );
	void SetAlignment ( unsigned char Orientation, unsigned char NewAlignment );
	void SetAttributes ( struct FUITextAttributes NewAttributes );
	void SetFont ( class UFont* NewFont );
	void SetPadding ( float HorizontalPadding, float VerticalPadding );
	void SetOpacity ( float NewOpacity );
	void SetColor ( struct FLinearColor NewColor );
	void SetSubregionAlignment ( unsigned char Orientation, unsigned char NewValue );
	void SetSubregionOffset ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void SetSubregionSize ( unsigned char Orientation, float NewValue, unsigned char EvalType );
	void EnableSubregion ( unsigned char Orientation, unsigned long bShouldEnable );
	unsigned char GetSubregionAlignment ( unsigned char Orientation );
	float GetSubregionOffset ( unsigned char Orientation, unsigned char OutputType );
	float GetSubregionSize ( unsigned char Orientation, unsigned char OutputType );
	bool IsSubregionEnabled ( unsigned char Orientation );
	void RefreshValue ( );
	struct FString GetValue ( unsigned long bReturnProcessedText );
	void SetValue ( struct FString NewText );
};

// Class Engine.UIList
// 0x034A (0x0860 - 0x0516)
class UUIList : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x0518 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIStyleReference                           GlobalCellStyle[ 0x4 ];                           		// 0x0520 (0x00A0) [0x0000000000000000]              
	struct FUIStyleReference                           ItemOverlayStyle[ 0x4 ];                          		// 0x05C0 (0x00A0) [0x0000000000000000]              
	struct FUIStyleReference                           ColumnHeaderBackgroundStyle[ 0x3 ];               		// 0x0660 (0x0078) [0x0000000000000000]              
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x06D8 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FUIStyleReference                           ColumnHeaderStyle;                                		// 0x0718 (0x0028) [0x0000000000000000]              
	struct TArray<int>                                 Items;                                            		// 0x0740 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<int>                                 SelectedItems;                                    		// 0x0750 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSubmitSelection__Delegate;                    		// 0x0760 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnListElementsSorted__Delegate;                 		// 0x0770 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShouldDisableElement__Delegate;                 		// 0x0780 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnOverrideListElementState__Delegate;           		// 0x0790 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUIListElementProvider*                      DataProvider;                                     		// 0x07A0 (0x0010) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x07A8 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FUIScreenValue_Extent                       RowHeight;                                        		// 0x07B0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MinColumnSize;                                    		// 0x07B8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ColumnWidth;                                      		// 0x07C0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       HeaderCellPadding;                                		// 0x07C8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       HeaderElementSpacing;                             		// 0x07D0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       CellSpacing;                                      		// 0x07D8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       CellPadding;                                      		// 0x07E0 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UUIScrollbar*                                VerticalScrollbar;                                		// 0x07E8 (0x0008) [0x0000000000000000]              
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x07F0 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIComp_ListElementSorter*                   SortComponent;                                    		// 0x07F8 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UUIComp_ListPresenterBase*                   CellDataComponent;                                		// 0x0800 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct FName                                       SubmitDataSuccessCue;                             		// 0x0808 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SubmitDataFailedCue;                              		// 0x0810 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       DecrementIndexCue;                                		// 0x0818 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       IncrementIndexCue;                                		// 0x0820 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SortAscendingCue;                                 		// 0x0828 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SortDescendingCue;                                		// 0x0830 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                Index;                                            		// 0x0838 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                TopIndex;                                         		// 0x083C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                MaxVisibleItems;                                  		// 0x0840 (0x0004) [0x0000000000222001]              ( CPF_Edit | CPF_Transient | CPF_EditConst )
	int                                                ColumnCount;                                      		// 0x0844 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RowCount;                                         		// 0x0848 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ResizeColumn;                                     		// 0x084C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SetIndexMutex;                                    		// 0x0850 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                ValueChangeNotificationMutex;                     		// 0x0854 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bEnableMultiSelect : 1;                           		// 0x0858 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableVerticalScrollbar : 1;                     		// 0x0858 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bInitializeScrollbars : 1;                        		// 0x0858 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bAllowDisabledItemSelection : 1;                  		// 0x0858 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSingleClickSubmission : 1;                       		// 0x0858 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bUpdateItemUnderCursor : 1;                       		// 0x0858 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bHoverStateOverridesSelected : 1;                 		// 0x0858 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bForceFullPageDisplay : 1;                        		// 0x0858 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bAllowColumnResizing : 1;                         		// 0x0858 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDisplayDataBindings : 1;                         		// 0x0858 (0x0004) [0x0000000000002001] [0x00000200] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bSortingList : 1;                                 		// 0x0858 (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned char                                      ColumnAutoSizeMode;                               		// 0x085C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RowAutoSizeMode;                                  		// 0x085D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      CellLinkType;                                     		// 0x085E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      WrapType;                                         		// 0x085F (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnStateChanged ( class UUIScreenObject* Sender, int PlayerIndex, class UUIState* NewlyActiveState, class UUIState* PreviouslyActiveState );
	void ClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	bool ShouldRenderColumnHeaders ( );
	void EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders );
	bool eventIsValueChangeNotificationEnabled ( );
	void eventDisableValueChangeNotification ( );
	void eventEnableValueChangeNotification ( );
	bool eventIsSetIndexEnabled ( );
	void eventDisableSetIndex ( );
	void eventEnableSetIndex ( );
	void eventDecrementAllMutexes ( unsigned long bDispatchUpdates );
	void eventIncrementAllMutexes ( );
	bool eventAllMutexesDisabled ( );
	void eventPostInitialize ( );
	void eventInitialized ( );
	bool SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores );
	bool IsElementAutoSizingEnabled ( );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	bool IsHotTrackingEnabled ( );
	void SetHotTracking ( unsigned long bShouldUpdateItemUnderCursor );
	bool CanSelectElement ( int ElementIndex );
	bool IsElementSelected ( int ElementIndex );
	bool IsElementEnabled ( int ElementIndex );
	bool SetTopIndex ( int NewTopIndex, unsigned long bClampValue );
	bool NavigateIndex ( unsigned long bIncrementIndex, unsigned long bFullPage, unsigned long bHorizontalNavigation );
	bool SetIndex ( int NewIndex, unsigned long bClampValue, unsigned long bSkipNotification );
	int FindItemIndex ( struct FString ItemValue, int CellIndex );
	unsigned char GetElementCellState ( int ElementIndex );
	bool SetElementCellState ( int ElementIndex, unsigned char NewElementState );
	struct FString GetElementValue ( int ElementIndex, int CellIndex );
	int GetCurrentItem ( );
	struct TArray<int> GetSelectedItems ( );
	int GetResizeColumn ( struct FCellHitDetectionInfo* ClickedCell );
	int CalculateIndexFromCursorLocation ( unsigned long bRequireValidIndex );
	struct FVector2D GetClientRegion ( );
	float GetRowHeight ( int RowIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue );
	float GetColumnWidth ( int ColumnIndex, unsigned long bColHeader, unsigned long bReturnUnformattedValue );
	void SetRowCount ( int NewRowCount );
	void SetColumnCount ( int NewColumnCount );
	int GetTotalColumnCount ( );
	int GetTotalRowCount ( );
	int GetMaxNumVisibleColumns ( );
	int GetMaxNumVisibleRows ( );
	int GetMaxVisibleElementCount ( );
	int GetItemCount ( );
	int RemoveElement ( int ElementToRemove );
	bool ScrollVertical ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
	unsigned char OnOverrideListElementState ( class UUIList* Sender, int ElementIndex, unsigned char CurrentState, unsigned char NewElementState );
	bool ShouldDisableElement ( class UUIList* Sender, int ElementIndex );
	void OnListElementsSorted ( class UUIList* Sender );
	void OnSubmitSelection ( class UUIList* Sender, int PlayerIndex );
};

// Class Engine.UIComp_ListComponentBase
// 0x0000 (0x0070 - 0x0070)
class UUIComp_ListComponentBase : public UUIComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIComp_ListElementSorter
// 0x0024 (0x0094 - 0x0070)
class UUIComp_ListElementSorter : public UUIComp_ListComponentBase
{
public:
	struct FScriptDelegate                             __OverrideListSort__Delegate;                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                InitialSortColumn;                                		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                InitialSecondarySortColumn;                       		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PrimarySortColumn;                                		// 0x0088 (0x0004) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	int                                                SecondarySortColumn;                              		// 0x008C (0x0004) [0x0000000000022003]              ( CPF_Edit | CPF_Const | CPF_Transient | CPF_EditConst )
	unsigned long                                      bAllowCompoundSorting : 1;                        		// 0x0090 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bReversePrimarySorting : 1;                       		// 0x0090 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bReverseSecondarySorting : 1;                     		// 0x0090 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ResortItems ( unsigned long bCaseSensitive );
	bool SortItems ( int ColumnIndex, unsigned long bSecondarySort, unsigned long bCaseSensitive );
	void ResetSortColumns ( unsigned long bResort );
	bool OverrideListSort ( class UUIList* Sender, struct FName CollectionFieldName, struct FUIListSortingParameters* SortParameters, struct TArray<int>* OrderedIndices );
};

// Class Engine.UIComp_ListPresenterBase
// 0x0004 (0x0074 - 0x0070)
class UUIComp_ListPresenterBase : public UUIComp_ListComponentBase
{
public:
	unsigned long                                      bReapplyFormatting : 1;                           		// 0x0070 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetMaxElementsPerPage ( );
	void SetMaxElementsPerPage ( int NewMaxVisibleElements );
	struct FString GetElementValue ( int ElementIndex, int CellIndex );
	void EnableColumnHeaderRendering ( unsigned long bShouldRenderColHeaders );
	bool ShouldRenderColumnHeaders ( );
	bool ShouldAdjustListBounds ( unsigned char Orientation );
	void CalculateAutoSizeColumnWidth ( int ColIndex, unsigned long bReturnUnformattedValue, float* out_ColWidth, float* out_StylePadding );
	void CalculateAutoSizeRowHeight ( int RowIndex, unsigned long bReturnUnformattedValue, float* out_RowHeight, float* out_StylePadding );
	float GetSchemaCellPosition ( int SchemaCellIndex );
	bool SetSchemaCellSize ( int SchemaCellIndex, float NewCellSize, unsigned char EvalType );
	float GetSchemaCellSize ( int SchemaCellIndex, unsigned char EvalType );
	int GetSchemaCellCount ( );
	class UUIListElementCellProvider* GetCellSchemaProvider ( );
};

// Class Engine.UIComp_ListPresenter
// 0x00E0 (0x0154 - 0x0074)
class UUIComp_ListPresenter : public UUIComp_ListPresenterBase
{
public:
	struct FPointer                                    VfTable_ICustomPropertyItemHandler;               		// 0x0074 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIElementCellSchema                        ElementSchema;                                    		// 0x007C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FUIListItem>                  ListItems;                                        		// 0x008C (0x0010) [0x0000000005522001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct FTextureCoordinates                         ListItemOverlayCoordinates[ 0x4 ];                		// 0x009C (0x0040) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         ColumnHeaderBackgroundCoordinates[ 0x3 ];         		// 0x00DC (0x0030) [0x0000000000000001]              ( CPF_Edit )
	class UUITexture*                                  ListItemOverlay[ 0x4 ];                           		// 0x010C (0x0020) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	class UUITexture*                                  ColumnHeaderBackground[ 0x3 ];                    		// 0x012C (0x0018) [0x0000000014400009]              ( CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse )
	struct FUIScreenValue_Extent                       SelectionHintPadding;                             		// 0x0144 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxElementsPerPage;                               		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisplayColumnHeaders : 1;                        		// 0x0150 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int FindElementIndex ( int DataSourceIndex );
};

// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x0060 - 0x0060)
class UUIDataStoreSubscriber : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearBoundDataStores ( );
	void GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
};

// Class Engine.UIDataStorePublisher
// 0x0000 (0x0060 - 0x0060)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores );
};

// Class Engine.UIListElementCellProvider
// 0x0000 (0x0060 - 0x0060)
class UUIListElementCellProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIListElementProvider
// 0x0000 (0x0060 - 0x0060)
class UUIListElementProvider : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIAnimation
// 0x0000 (0x0060 - 0x0060)
class UUIAnimation : public UUIRoot
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIAnimationSeq
// 0x0019 (0x0079 - 0x0060)
class UUIAnimationSeq : public UUIAnimation
{
public:
	struct TArray<struct FUIAnimTrack>                 Tracks;                                           		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       SeqName;                                          		// 0x0070 (0x0008) [0x0000000000000000]              
	unsigned char                                      LoopMode;                                         		// 0x0078 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetSequenceLength ( );
	bool GetTrackLength ( int TrackIndex, float* out_TrackLength );
	bool GetFrameLength ( int TrackIndex, int FrameIndex, float* out_FrameLength );
	bool IsValidFrameIndex ( int TrackIndex, int FrameIndex );
};

// Class Engine.UIConfigProvider
// 0x0003 (0x0084 - 0x0081)
class UUIConfigProvider : public UUIDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x000B (0x008C - 0x0081)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	class ULocalPlayer*                                Player;                                           		// 0x0084 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlineClanMates
// 0x0008 (0x0094 - 0x008C)
class UUIDataProvider_OnlineClanMates : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnClanMatesReadComplete ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0078 (0x0104 - 0x008C)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FOnlineFriendMessage>         Messages;                                         		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     SendingPlayerNameCol;                             		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsFriendInviteCol;                               		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasAcceptedCol;                                  		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bWasDeniedCol;                                    		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MessageCol;                                       		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LastInviteFrom;                                   		// 0x00F4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnGameInviteReceived ( unsigned char LocalUserNum, struct FString InviterName );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	void ReadMessages ( );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlineFriends
// 0x00F8 (0x0184 - 0x008C)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FOnlineFriend>                FriendsList;                                      		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     PresenceInfoCol;                                  		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FriendStateCol;                                   		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsOnlineCol;                                     		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingCol;                                    		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsPlayingThisGameCol;                            		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bIsJoinableCol;                                   		// 0x0104 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasVoiceSupportCol;                              		// 0x0114 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHaveInvitedCol;                                  		// 0x0124 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     bHasInvitedYouCol;                                		// 0x0134 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OfflineText;                                      		// 0x0144 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OnlineText;                                       		// 0x0154 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AwayText;                                         		// 0x0164 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BusyText;                                         		// 0x0174 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRefreshFriendsList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnFriendsReadComplete ( unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlinePartyChatList
// 0x0098 (0x0124 - 0x008C)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FOnlinePartyMember>           PartyMembersList;                                 		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      NatTypes;                                         		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NickNameCol;                                      		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NatTypeCol;                                       		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsLocalCol;                                       		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInPartyVoiceCol;                                		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsTalkingCol;                                     		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsInGameSessionCol;                               		// 0x0104 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IsPlayingThisGameCol;                             		// 0x0114 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRefreshMembersList ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlinePlayers
// 0x0008 (0x0094 - 0x008C)
class UUIDataProvider_OnlinePlayers : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnPlayersReadComplete ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
};

// Class Engine.UIDataProvider_OnlinePlayerStorage
// 0x0024 (0x00B0 - 0x008C)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct TArray<struct FPlayerStorageArrayProvider>  PlayerStorageArrayProviders;                      		// 0x008C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlinePlayerStorage*                        Profile;                                          		// 0x009C (0x0008) [0x0000000000000000]              
	struct FName                                       ProviderName;                                     		// 0x00A4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bWasErrorLastRead : 1;                            		// 0x00AC (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnSettingValueUpdated ( struct FName SettingName );
	void ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	bool eventSaveStorageData ( );
	void RefreshStorageData ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void OnReadStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
};

// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x0000 (0x00B0 - 0x00B0)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	void AddReadCompleteDelegate ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum );
	bool WriteData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
	bool ReadData ( class UOnlinePlayerInterface* PlayerInterface, unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
};

// Class Engine.UIDataProvider_PlayerAchievements
// 0x0018 (0x00A4 - 0x008C)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FAchievementDetails>          Achievements;                                     		// 0x0094 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateAchievements ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void OnPlayerAchievementUnlocked ( unsigned long bWasSuccessful );
	void OnPlayerAchievementsChanged ( int TitleId );
	void GetAchievementDetails ( int AchievementId, struct FAchievementDetails* OutAchievementDetails );
	struct FString GetAchievementIconPathName ( int AchievementId, unsigned long bReturnLockedIcon );
	void PopulateAchievementIcons ( );
	int GetMaxTotalGamerScore ( );
	int GetTotalGamerScore ( );
};

// Class Engine.UIDataProvider_OnlinePlayerStorageArray
// 0x0047 (0x00C8 - 0x0081)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ColumnHeaderText;                                 		// 0x0094 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FName>                        Values;                                           		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlinePlayerStorage*                        PlayerStorage;                                    		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FName                                       PlayerStorageName;                                		// 0x00BC (0x0008) [0x0000000000000000]              
	int                                                PlayerStorageId;                                  		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataProvider_SettingsArray
// 0x0047 (0x00C8 - 0x0081)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ColumnHeaderText;                                 		// 0x0094 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FIdToStringMapping>           Values;                                           		// 0x00A4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USettings*                                   Settings;                                         		// 0x00B4 (0x0008) [0x0000000000000000]              
	struct FName                                       SettingsName;                                     		// 0x00BC (0x0008) [0x0000000000000000]              
	int                                                SettingsId;                                       		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SceneDataStore
// 0x0020 (0x00CC - 0x00AC)
class USceneDataStore : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x00B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIScene*                                    OwnerScene;                                       		// 0x00BC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIDynamicFieldProvider*                     SceneDataProvider;                                		// 0x00C4 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void SceneDataFieldChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* out_DataValueArray );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
};

// Class Engine.UIDataStore_Color
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Color : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_DynamicResource
// 0x0070 (0x011C - 0x00AC)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            ResourceProviders;                                		// 0x00B4 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FDynamicResourceProviderDefinition> ResourceProviderDefinitions;                      		// 0x00FC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x010C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataStore_GameResource*                   GameResourceDataStore;                            		// 0x0114 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnLoginChange ( unsigned char LocalUserNum );
	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceCombinationProvider*>* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
	struct FName GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};

// Class Engine.UIDataStore_Fonts
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_GameResource
// 0x0060 (0x010C - 0x00AC)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FMultiMap_Mirror                            ListElementProviders;                             		// 0x00B4 (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FGameResourceDataProvider>    ElementProviderTypes;                             		// 0x00FC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceDataProvider*>* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
	struct FName GenerateProviderAccessTag ( int ProviderIndex, int InstanceIndex );
	int FindProviderTypeIndex ( struct FName ProviderTag );
};

// Class Engine.UIDataStore_MenuItems
// 0x0060 (0x016C - 0x010C)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	struct FMultiMap_Mirror                            OptionProviders;                                  		// 0x010C (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UUIDataProvider_MenuItem*>     DynamicProviders;                                 		// 0x0154 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FName                                       CurrentGameSettingsTag;                           		// 0x0164 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void OnGameSettingsChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void GetSet ( struct FName SetName, struct TArray<class UUIDataProvider_MenuItem*>* OutProviders );
	void AppendToSet ( struct FName SetName, int NumOptions );
	void ClearSet ( struct FName SetName );
};

// Class Engine.UIDataStore_GameState
// 0x0010 (0x00BC - 0x00AC)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;              		// 0x00AC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyGameSessionEnded ( );
	void OnRefreshDataFieldValue ( );
};

// Class Engine.CurrentGameDataStore
// 0x005C (0x0118 - 0x00BC)
class UCurrentGameDataStore : public UUIDataStore_GameState
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00BC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FGameDataProviderTypes                      ProviderTypes;                                    		// 0x00C4 (0x0018) [0x0000000000000002]              ( CPF_Const )
	struct TArray<class UPlayerDataProvider*>          PlayerData;                                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UTeamDataProvider*>            TeamData;                                         		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddTeamProvider__Delegate;                    		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UGameInfoDataProvider*                       GameData;                                         		// 0x010C (0x0008) [0x0000000000000000]              
	unsigned long                                      bRefreshPlayerDataProviders : 1;                  		// 0x0114 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bRefreshTeamDataProviders : 1;                    		// 0x0114 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnAddTeamProvider ( class UTeamDataProvider* Provider );
	bool NotifyGameSessionEnded ( );
	void RefreshTeamDataProviders ( );
	void RefreshPlayerDataProviders ( );
	void NotifyTeamChange ( );
	void NotifyPlayersChanged ( );
	void Timer ( );
	void TeamDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void PlayerDataProviderPropertyChange ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void ClearDataProviders ( );
	class UTeamDataProvider* GetTeamDataProvider ( class ATeamInfo* TI );
	class UPlayerDataProvider* GetPlayerDataProvider ( class APlayerReplicationInfo* PRI );
	int FindTeamDataProviderIndex ( class ATeamInfo* TI );
	int FindPlayerDataProviderIndex ( class APlayerReplicationInfo* PRI );
	void RemoveTeamDataProvider ( class ATeamInfo* TI );
	void AddTeamDataProvider ( class ATeamInfo* TI );
	void RemovePlayerDataProvider ( class APlayerReplicationInfo* PRI );
	void AddPlayerDataProvider ( class APlayerReplicationInfo* PRI );
	void CreateGameDataProvider ( class AGameReplicationInfo* GRI );
};

// Class Engine.PlayerOwnerDataStore
// 0x0050 (0x010C - 0x00BC)
class UPlayerOwnerDataStore : public UUIDataStore_GameState
{
public:
	struct FPlayerDataProviderTypes                    ProviderTypes;                                    		// 0x00BC (0x0020) [0x0000000000000002]              ( CPF_Const )
	struct TArray<class UWeaponDataProvider*>          WeaponList;                                       		// 0x00DC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UPowerupDataProvider*>         PowerupList;                                      		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UPlayerOwnerDataProvider*                    PlayerData;                                       		// 0x00FC (0x0008) [0x0000000000000000]              
	class UCurrentWeaponDataProvider*                  CurrentWeapon;                                    		// 0x0104 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyGameSessionEnded ( );
	void ClearDataProviders ( );
	void SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData );
};

// Class Engine.UIDataStore_Gamma
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Gamma : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_Images
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Images : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_OnlinePlaylists
// 0x0040 (0x00EC - 0x00AC)
class UUIDataStore_OnlinePlaylists : public UUIDataStore
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     ProviderClassName;                                		// 0x00B4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UUIResourceDataProvider*>      RankedDataProviders;                              		// 0x00C4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UUIResourceDataProvider*>      UnRankedDataProviders;                            		// 0x00D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      ProviderClass;                                    		// 0x00E4 (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UOnlinePlaylistProvider* GetOnlinePlaylistProvider ( struct FName ProviderTag, int PlaylistId, int* ProviderIndex );
	bool GetPlaylistProvider ( struct FName ProviderTag, int ProviderIndex, class UUIResourceDataProvider** out_Provider );
	int FindProviderIndexByFieldValue ( struct FName ProviderTag, struct FName SearchField, struct FUIProviderScriptFieldValue* ValueToSearchFor );
	bool GetProviderFieldValue ( struct FName ProviderTag, struct FName SearchField, int ProviderIndex, struct FUIProviderScriptFieldValue* out_FieldValue );
	bool GetResourceProviderFields ( struct FName ProviderTag, struct TArray<struct FName>* ProviderFieldTags );
	bool GetResourceProviders ( struct FName ProviderTag, struct TArray<class UUIResourceDataProvider*>* out_Providers );
	int GetProviderCount ( struct FName ProviderTag );
};

// Class Engine.UIDataStore_Registry
// 0x0008 (0x00B4 - 0x00AC)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	class UUIDynamicFieldProvider*                     RegistryDataProvider;                             		// 0x00AC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIDynamicFieldProvider* GetDataProvider ( );
};

// Class Engine.UIDataStore_Remote
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Remote : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_OnlineGameSearch
// 0x0048 (0x00F4 - 0x00AC)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x00B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<struct FGameSearchCfg>               GameSearchCfgList;                                		// 0x00BC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UOnlineGameInterface*                        GameInterface;                                    		// 0x00CC (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x00D4 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FName                                       SearchResultsName;                                		// 0x00DC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x00E4 (0x0008) [0x0000000000000000]              
	int                                                SelectedIndex;                                    		// 0x00EC (0x0004) [0x0000000000000000]              
	int                                                ActiveSearchIndex;                                		// 0x00F0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearAllSearchResults ( );
	void eventMoveToPrevious ( unsigned long bInvalidateExistingSearchResults );
	void eventMoveToNext ( unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByName ( struct FName SearchName, unsigned long bInvalidateExistingSearchResults );
	void eventSetCurrentByIndex ( int NewIndex, unsigned long bInvalidateExistingSearchResults );
	int FindSearchConfigurationIndex ( struct FName SearchTag );
	class UOnlineGameSearch* eventGetActiveGameSearch ( );
	class UOnlineGameSearch* eventGetCurrentGameSearch ( );
	void BuildSearchResults ( );
	bool eventShowHostGamercard ( unsigned char ControllerIndex, int ListIndex );
	bool eventGetSearchResultFromIndex ( int ListIndex, struct FOnlineGameSearchResult* Result );
	void OnSearchComplete ( unsigned long bWasSuccessful );
	bool OverrideQuerySubmission ( unsigned char ControllerId, class UOnlineGameSearch* Search );
	bool eventSubmitGameSearch ( unsigned char ControllerIndex, unsigned long bInvalidateExistingSearchResults );
	bool InvalidateCurrentSearchResults ( );
	void eventInit ( );
};

// Class Engine.UIDataStore_OnlinePlayerData
// 0x0128 (0x01D4 - 0x00AC)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FString                                     PlayerNick;                                       		// 0x00B4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     ProfileSettingsClassName;                         		// 0x00C4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PlayerStorageClassName;                           		// 0x00D4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendsProviderClassName;                         		// 0x00E4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PlayersProviderClassName;                         		// 0x00F4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ClanMatesProviderClassName;                       		// 0x0104 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendMessagesProviderClassName;                  		// 0x0114 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     AchievementsProviderClassName;                    		// 0x0124 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     PartyChatProviderClassName;                       		// 0x0134 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	class UClass*                                      ProfileSettingsClass;                             		// 0x0144 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayerStorageClass;                               		// 0x014C (0x0008) [0x0000000000000000]              
	class UClass*                                      FriendsProviderClass;                             		// 0x0154 (0x0008) [0x0000000000000000]              
	class UClass*                                      PlayersProviderClass;                             		// 0x015C (0x0008) [0x0000000000000000]              
	class UClass*                                      ClanMatesProviderClass;                           		// 0x0164 (0x0008) [0x0000000000000000]              
	class UClass*                                      FriendMessagesProviderClass;                      		// 0x016C (0x0008) [0x0000000000000000]              
	class UClass*                                      AchievementsProviderClass;                        		// 0x0174 (0x0008) [0x0000000000000000]              
	class UClass*                                      PartyChatProviderClass;                           		// 0x017C (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                  		// 0x0184 (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlinePlayers*               PlayersProvider;                                  		// 0x018C (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineClanMates*             ClanMatesProvider;                                		// 0x0194 (0x0008) [0x0000000000000000]              
	class ULocalPlayer*                                Player;                                           		// 0x019C (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x01A4 (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                                  		// 0x01AC (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                           		// 0x01B4 (0x0008) [0x0000000000000000]              
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                             		// 0x01BC (0x0008) [0x0000000000000000]              
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                                		// 0x01C4 (0x0008) [0x0000000000000000]              
	int                                                NumNewDownloads;                                  		// 0x01CC (0x0004) [0x0000000000000000]              
	int                                                NumTotalDownloads;                                		// 0x01D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UOnlinePlayerStorage* eventGetCachedPlayerStorage ( int ControllerId );
	class UOnlineProfileSettings* eventGetCachedPlayerProfile ( int ControllerId );
	bool eventSaveProfileData ( );
	void OnDownloadableContentQueryDone ( unsigned long bWasSuccessful );
	void ClearDelegates ( );
	void RegisterDelegates ( );
	void OnPlayerDataChange ( );
	void OnLoginChange ( unsigned char LocalUserNum );
	void eventOnUnregister ( );
	void eventOnRegister ( class ULocalPlayer* InPlayer );
	void OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName );
};

// Class Engine.UIDataStore_OnlineStats
// 0x0099 (0x0145 - 0x00AC)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x00B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPlayerNickMetaData                         PlayerNickData;                                   		// 0x00BC (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FRankMetaData                               RankNameMetaData;                                 		// 0x00D4 (0x0018) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       StatsReadClasses;                                 		// 0x00EC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UOnlineStatsRead*>             StatsReadObjects;                                 		// 0x00FC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UOnlineStatsInterface*                       StatsInterface;                                   		// 0x010C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData00[ 0x8 ];                             		// 0x0114 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	class UOnlinePlayerInterface*                      PlayerInterface;                                  		// 0x011C (0x0010) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x8 ];                             		// 0x0124 (0x0008) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FName                                       StatsReadName;                                    		// 0x012C (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FName                                       TotalRowsName;                                    		// 0x0134 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UOnlineStatsRead*                            StatsRead;                                        		// 0x013C (0x0008) [0x0000000000000000]              
	unsigned char                                      CurrentReadType;                                  		// 0x0144 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SortResultsByRank ( );
	void OnReadComplete ( unsigned long bWasSuccessful );
	bool eventShowGamercard ( unsigned char ConrollerIndex, int ListIndex );
	bool eventRefreshStats ( unsigned char ControllerIndex );
	void SetStatsReadInfo ( );
	void eventInit ( );
};

// Class Engine.UIDataStore_Settings
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_Settings : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_OnlineGameSettings
// 0x001C (0x00C8 - 0x00AC)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	struct TArray<struct FGameSettingsCfg>             GameSettingsCfgList;                              		// 0x00AC (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	class UClass*                                      SettingsProviderClass;                            		// 0x00BC (0x0008) [0x0000000000000002]              ( CPF_Const )
	int                                                SelectedIndex;                                    		// 0x00C4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnregistered ( class ULocalPlayer* PlayerOwner );
	void eventRegistered ( class ULocalPlayer* PlayerOwner );
	void eventMoveToPrevious ( );
	void eventMoveToNext ( );
	void eventSetCurrentByName ( struct FName SettingsName );
	void eventSetCurrentByIndex ( int NewIndex );
	class UUIDataProvider_Settings* eventGetCurrentProvider ( );
	class UOnlineGameSettings* eventGetCurrentGameSettings ( );
	bool eventCreateGame ( unsigned char ControllerIndex );
	void OnSettingProviderChanged ( class UUIDataProvider* SourceProvider, struct FName SettingsName );
};

// Class Engine.UIDataStore_SessionSettings
// 0x0030 (0x00DC - 0x00AC)
class UUIDataStore_SessionSettings : public UUIDataStore_Settings
{
public:
	struct TArray<struct FString>                      SessionSettingsProviderClassNames;                		// 0x00AC (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct TArray<class UClass*>                       SessionSettingsProviderClasses;                   		// 0x00BC (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class USessionSettingsProvider*>     SessionSettings;                                  		// 0x00CC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyGameSessionEnded ( );
	void ClearDataProviders ( );
};

// Class Engine.UIDataStore_StringBase
// 0x0000 (0x00AC - 0x00AC)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDataStore_InputAlias
// 0x0058 (0x0104 - 0x00AC)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	struct TArray<struct FUIDataStoreInputAlias>       InputAliases;                                     		// 0x00AC (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00BC (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool HasAliasMappingForPlatform ( struct FName DesiredAlias, unsigned char DesiredPlatform );
	int FindInputAliasIndex ( struct FName DesiredAlias );
	bool GetAliasInputKeyDataByIndex ( int AliasIndex, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	bool GetAliasInputKeyData ( struct FName DesiredAlias, unsigned char OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData );
	struct FName GetAliasInputKeyNameByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FName GetAliasInputKeyName ( struct FName DesiredAlias, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkupByIndex ( int AliasIndex, unsigned char OverridePlatform );
	struct FString GetAliasFontMarkup ( struct FName DesiredAlias, unsigned char OverridePlatform );
};

// Class Engine.UIDataStore_StringAliasMap
// 0x005C (0x0108 - 0x00AC)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	struct FMap_Mirror                                 MenuInputSets;                                    		// 0x00AC (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FUIMenuInputMap>              MenuInputMapArray;                                		// 0x00F4 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	int                                                PlayerIndex;                                      		// 0x0104 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetStringWithFieldName ( struct FString FieldName, struct FString* MappedString );
	int FindMappingWithFieldName ( struct FString FieldName, struct FString SetName );
	class ULocalPlayer* GetPlayerOwner ( );
};

// Class Engine.UICustomSkin
// 0x0048 (0x0254 - 0x020C)
class UUICustomSkin : public UUISkin
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x020C (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UICustomSkin.WidgetStyleMap

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIDynamicFieldProvider
// 0x00B3 (0x0134 - 0x0081)
class UUIDynamicFieldProvider : public UUIDataProvider
{
public:
	struct FMap_Mirror                                 PersistentCollectionData;                         		// 0x0084 (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FMap_Mirror                                 RuntimeCollectionData;                            		// 0x00CC (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FUIProviderScriptFieldValue>  PersistentDataFields;                             		// 0x0114 (0x0010) [0x0000000000404001]              ( CPF_Edit | CPF_Config | CPF_NeedCtorLink )
	struct TArray<struct FUIProviderScriptFieldValue>  RuntimeDataFields;                                		// 0x0124 (0x0010) [0x0000000000402001]              ( CPF_Edit | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int FindCollectionValueIndex ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToFind );
	bool GetCollectionValue ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* out_Value );
	bool ClearCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag );
	bool ReplaceCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag, struct FString* NewValue );
	bool ReplaceCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* CurrentValue, struct FString* NewValue );
	bool RemoveCollectionValueByIndex ( struct FName FieldName, int ValueIndex, unsigned long bPersistent, struct FName CellTag );
	bool RemoveCollectionValue ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct FString* ValueToRemove );
	bool InsertCollectionValue ( struct FName FieldName, int InsertIndex, unsigned long bPersistent, unsigned long bAllowDuplicateValues, struct FName CellTag, struct FString* NewValue );
	bool SetCollectionValueArray ( struct FName FieldName, unsigned long bClearExisting, int InsertIndex, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* CollectionValues );
	bool GetCollectionValueArray ( struct FName FieldName, unsigned long bPersistent, struct FName CellTag, struct TArray<struct FString>* out_DataValueArray );
	bool GetCollectionValueSchema ( struct FName FieldName, unsigned long bPersistent, struct TArray<struct FName>* out_CellTagArray );
	void SavePersistentProviderData ( );
	bool SetField ( struct FName FieldName, unsigned long bChangeExistingOnly, struct FUIProviderScriptFieldValue* FieldValue );
	bool GetField ( struct FName FieldName, struct FUIProviderScriptFieldValue* out_Field );
	bool ClearFields ( unsigned long bReinitializeRuntimeFields );
	int FindFieldIndex ( struct FName FieldName, unsigned long bSearchPersistentFields );
	bool RemoveField ( struct FName FieldName );
	bool AddField ( struct FName FieldName, unsigned char FieldType, unsigned long bPersistent, int* out_InsertPosition );
	void InitializeRuntimeFields ( );
};

// Class Engine.UIPropertyDataProvider
// 0x0023 (0x00A4 - 0x0081)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	struct TArray<class UClass*>                       ComplexPropertyTypes;                             		// 0x0084 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;        		// 0x0094 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventGetCustomPropertyValue ( int ArrayIndex, struct FUIProviderScriptFieldValue* PropertyValue );
	bool CanSupportComplexPropertyType ( class UProperty* UnsupportedProperty );
};

// Class Engine.UIDynamicDataProvider
// 0x0018 (0x00BC - 0x00A4)
class UUIDynamicDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x00A4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UClass*                                      DataClass;                                        		// 0x00AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UObject*                                     DataSource;                                       		// 0x00B4 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCleanupDataProvider ( );
	class UObject* GetDataSource ( );
	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
	void eventProviderInstanceUnbound ( class UObject* DataSourceInstance );
	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
	bool UnbindProviderInstance ( );
	bool BindProviderInstance ( class UObject* DataSourceInstance );
};

// Class Engine.GameInfoDataProvider
// 0x0008 (0x00C4 - 0x00BC)
class UGameInfoDataProvider : public UUIDynamicDataProvider
{
public:
	class AGameReplicationInfo*                        GameDataSource;                                   		// 0x00BC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
};

// Class Engine.InventoryDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UInventoryDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PowerupDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UPowerupDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
};

// Class Engine.WeaponDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UWeaponDataProvider : public UInventoryDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CurrentWeaponDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UCurrentWeaponDataProvider : public UWeaponDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PickupDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UPickupDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PlayerDataProvider
// 0x0000 (0x00BC - 0x00BC)
class UPlayerDataProvider : public UUIDynamicDataProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PlayerOwnerDataProvider
// 0x0008 (0x00C4 - 0x00BC)
class UPlayerOwnerDataProvider : public UPlayerDataProvider
{
public:
	class UPlayerDataProvider*                         PlayerData;                                       		// 0x00BC (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCleanupDataProvider ( );
	void SetPlayerDataProvider ( class UPlayerDataProvider* NewPlayerData );
};

// Class Engine.TeamDataProvider
// 0x0020 (0x00DC - 0x00BC)
class UTeamDataProvider : public UUIDynamicDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00BC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<class UPlayerDataProvider*>          Players;                                          		// 0x00C4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FName                                       PlayerListFieldName;                              		// 0x00D4 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RegeneratePlayerLists ( struct TArray<class UPlayerDataProvider*> AllPlayers );
};

// Class Engine.UIDataProvider_Settings
// 0x001C (0x00D8 - 0x00BC)
class UUIDataProvider_Settings : public UUIDynamicDataProvider
{
public:
	struct TArray<struct FSettingsArrayProvider>       SettingsArrayProviders;                           		// 0x00BC (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class USettings*                                   Settings;                                         		// 0x00CC (0x0008) [0x0000000000000000]              
	unsigned long                                      bIsAListRow : 1;                                  		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnSettingValueUpdated ( struct FName SettingName );
	void ArrayProviderPropertyChanged ( class UUIDataProvider* SourceProvider, struct FName PropTag );
	void eventProviderInstanceUnbound ( class UObject* DataSourceInstance );
	void eventProviderInstanceBound ( class UObject* DataSourceInstance );
};

// Class Engine.UIResourceDataProvider
// 0x0014 (0x00B8 - 0x00A4)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x00A4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x00AC (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	unsigned long                                      bDataBindingPropertiesOnly : 1;                   		// 0x00B4 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bSkipDuringEnumeration : 1;                       		// 0x00B4 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventInitializeProvider ( unsigned long bIsEditor );
};

// Class Engine.UIDataProvider_MenuItem
// 0x00A6 (0x015E - 0x00B8)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	struct TArray<struct FName>                        OptionSet;                                        		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DataStoreMarkup;                                  		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DescriptionMarkup;                                		// 0x00D8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x00E8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CustomFriendlyName;                               		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x0108 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<struct FName>                        SchemaCellFields;                                 		// 0x0118 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     IniName;                                          		// 0x0128 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FUIRangeData                                RangeData;                                        		// 0x0138 (0x0014) [0x0000000000004000]              ( CPF_Config )
	struct FName                                       RequiredGameMode;                                 		// 0x014C (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                EditBoxMaxLength;                                 		// 0x0154 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bEditableCombo : 1;                               		// 0x0158 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )
	unsigned long                                      bNumericCombo : 1;                                		// 0x0158 (0x0004) [0x0000000000004000] [0x00000002] ( CPF_Config )
	unsigned long                                      bKeyboardOrMouseOption : 1;                       		// 0x0158 (0x0004) [0x0000000000004000] [0x00000004] ( CPF_Config )
	unsigned long                                      bOnlineOnly : 1;                                  		// 0x0158 (0x0004) [0x0000000000004000] [0x00000008] ( CPF_Config )
	unsigned long                                      bOfflineOnly : 1;                                 		// 0x0158 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bSearchAllInis : 1;                               		// 0x0158 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bRemoveOn360 : 1;                                 		// 0x0158 (0x0004) [0x0000000000004000] [0x00000040] ( CPF_Config )
	unsigned long                                      bRemoveOnPC : 1;                                  		// 0x0158 (0x0004) [0x0000000000004000] [0x00000080] ( CPF_Config )
	unsigned long                                      bRemoveOnPS3 : 1;                                 		// 0x0158 (0x0004) [0x0000000000004000] [0x00000100] ( CPF_Config )
	unsigned char                                      OptionType;                                       		// 0x015C (0x0001) [0x0000000000004000]              ( CPF_Config )
	unsigned char                                      EditboxAllowedChars;                              		// 0x015D (0x0001) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsFiltered ( );
};

// Class Engine.UIMapSummary
// 0x0040 (0x00F8 - 0x00B8)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                          		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     ScreenshotPathName;                               		// 0x00C8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x00D8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00E8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UISettingsProvider
// 0x0008 (0x00AC - 0x00A4)
class UUISettingsProvider : public UUIPropertyDataProvider
{
public:
	struct FName                                       ProviderTag;                                      		// 0x00A4 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCleanupDataProvider ( );
	bool OnModifiedProperty ( struct FName PropertyName, class UUIObject* Widget );
	void SavePropertyValue ( struct FName PropertyName, class UUIObject* Widget );
	void LoadPropertyValue ( struct FName PropertyName, class UUIObject* Widget );
};

// Class Engine.SessionSettingsProvider
// 0x0018 (0x00C4 - 0x00AC)
class USessionSettingsProvider : public UUISettingsProvider
{
public:
	class UClass*                                      ProviderClientClass;                              		// 0x00AC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProviderClientMetaClass;                          		// 0x00B4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UClass*                                      ProviderClient;                                   		// 0x00BC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventCleanupDataProvider ( );
	bool eventIsValidDataSourceClass ( class UClass* PotentialDataSourceClass );
	void eventProviderClientUnbound ( class UClass* DataSourceClass );
	void eventProviderClientBound ( class UClass* DataSourceClass );
	bool UnbindProviderClient ( );
	bool BindProviderClient ( class UClass* DataSourceClass );
};

// Class Engine.UIResourceCombinationProvider
// 0x0023 (0x00A4 - 0x0081)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	struct FPointer                                    VfTable_IUIListElementProvider;                   		// 0x0084 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIListElementCellProvider;               		// 0x008C (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	class UUIResourceDataProvider*                     StaticDataProvider;                               		// 0x0094 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                  		// 0x009C (0x0008) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ReplaceProviderCollection ( struct FName TargetFieldTag, struct TArray<struct FUIDataProviderField>* out_Fields, struct TArray<class UUIDataProvider*>* ReplacementProviders );
	bool ReplaceProviderValue ( struct FName TargetFieldTag, class UUIDataProvider* ReplacementProvider, struct TArray<struct FUIDataProviderField>* out_Fields );
	void ClearProviderReferences ( );
	bool eventGetCellFieldValue ( struct FName FieldName, struct FName CellTag, int ListIndex, int ArrayIndex, struct FUIProviderFieldValue* out_FieldValue );
	bool eventGetCellFieldType ( struct FName FieldName, struct FName CellTag, unsigned char* FieldType );
	void eventGetElementCellTags ( struct FName FieldName, struct TArray<struct FName>* CellFieldTags, struct TArray<struct FString>* ColumnHeaderDisplayText );
	bool eventGetElementCellValueProvider ( struct FName FieldName, int ListIndex, class UUIListElementCellProvider** out_ValueProvider );
	bool eventGetElementCellSchemaProvider ( struct FName FieldName, class UUIListElementCellProvider** out_SchemaProvider );
	bool eventIsElementEnabled ( struct FName FieldName, int CollectionIndex );
	bool eventGetListElements ( struct FName FieldName, struct TArray<int>* out_Elements );
	int eventGetElementCount ( struct FName FieldName );
	struct TArray<struct FName> eventGetElementProviderTags ( );
	void eventInitializeProvider ( unsigned long bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider );
};

// Class Engine.GameUISceneClient
// 0x00D4 (0x0208 - 0x0134)
class UGameUISceneClient : public UUISceneClient
{
public:
	struct FDouble                                     DoubleClickStartTime;                             		// 0x0134 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FMap_Mirror                                 InitialPressedKeys;                               		// 0x013C (0x0048) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UUIScene*>                     ActiveScenes;                                     		// 0x0184 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UUIAnimationSeq*>              AnimSequencePool;                                 		// 0x0194 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        NavAliases;                                       		// 0x01A4 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FName>                        AxisInputKeys;                                    		// 0x01B4 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UClass*                                      MessageBoxClass;                                  		// 0x01C4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UTexture*                                    DefaultUITexture[ 0x3 ];                          		// 0x01CC (0x0018) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUITexture*                                  CurrentMouseCursor;                               		// 0x01E4 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FIntPoint                                   DoubleClickStartPosition;                         		// 0x01EC (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIScreenObject*                             DebugTarget;                                      		// 0x01F4 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              LatestDeltaTime;                                  		// 0x01FC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              OverlaySceneAlphaModulation;                      		// 0x0200 (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bRenderCursor : 1;                                		// 0x0204 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateInputProcessingStatus : 1;                 		// 0x0204 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateCursorRenderStatus : 1;                    		// 0x0204 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateSceneViewportSizes : 1;                    		// 0x0204 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bEnableDebugInput : 1;                            		// 0x0204 (0x0004) [0x0000000000004000] [0x00000010] ( CPF_Config )
	unsigned long                                      bRenderDebugInfo : 1;                             		// 0x0204 (0x0004) [0x0000000000004000] [0x00000020] ( CPF_Config )
	unsigned long                                      bRenderDebugInfoAtTop : 1;                        		// 0x0204 (0x0004) [0x0000000000044000] [0x00000040] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderActiveControlInfo : 1;                     		// 0x0204 (0x0004) [0x0000000000044000] [0x00000080] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderFocusedControlInfo : 1;                    		// 0x0204 (0x0004) [0x0000000000044000] [0x00000100] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRenderTargetControlInfo : 1;                     		// 0x0204 (0x0004) [0x0000000000044000] [0x00000200] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bSelectVisibleTargetsOnly : 1;                    		// 0x0204 (0x0004) [0x0000000000044000] [0x00000400] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bInteractiveMode : 1;                             		// 0x0204 (0x0004) [0x0000000000044000] [0x00000800] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bDisplayFullPaths : 1;                            		// 0x0204 (0x0004) [0x0000000000044000] [0x00001000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowWidgetPath : 1;                              		// 0x0204 (0x0004) [0x0000000000044000] [0x00002000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowRenderBounds : 1;                            		// 0x0204 (0x0004) [0x0000000000044000] [0x00004000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowCurrentState : 1;                            		// 0x0204 (0x0004) [0x0000000000044000] [0x00008000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bShowMousePos : 1;                                		// 0x0204 (0x0004) [0x0000000000044000] [0x00010000] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bRestrictActiveControlToFocusedScene : 1;         		// 0x0204 (0x0004) [0x0000000000004000] [0x00020000] ( CPF_Config )
	unsigned long                                      bCaptureUnprocessedInput : 1;                     		// 0x0204 (0x0004) [0x0000000000004002] [0x00040000] ( CPF_Const | CPF_Config )
	unsigned long                                      bSynchronizePlayers : 1;                          		// 0x0204 (0x0004) [0x0000000000004002] [0x00080000] ( CPF_Const | CPF_Config )
	unsigned long                                      bKillRestoreMenuProgression : 1;                  		// 0x0204 (0x0004) [0x0000000000002000] [0x00100000] ( CPF_Transient )
	unsigned long                                      bDebugResolveScene : 1;                           		// 0x0204 (0x0004) [0x0000000000002001] [0x00200000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bBlockSceneUpdates : 1;                           		// 0x0204 (0x0004) [0x0000000000002001] [0x00400000] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bBlockUpdatesAfterStackModification : 1;          		// 0x0204 (0x0004) [0x0000000000002001] [0x00800000] ( CPF_Edit | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIAnimationSeq* FindUIAnimation ( struct FName NameOfSequence );
	void ShowMenuProgression ( );
	void DebugShowMessage ( struct FString Message, struct FString Aliases, struct FString Title, struct FString Question );
	bool DebugMessageOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex );
	void ShowDataStores ( unsigned long bVerbose );
	void RefreshFormatting ( );
	void ShowDataStoreField ( struct FString DataStoreMarkup );
	void CloseMenu ( struct FName SceneName );
	void OpenMenu ( struct FString MenuPath, int PlayerIndex );
	void CreateMenu ( class UClass* SceneClass, int PlayerIndex );
	void ToggleDebugInput ( unsigned long bEnable );
	void ShowMenuStates ( );
	void ShowRenderBounds ( );
	void ShowDockingStacks ( );
	bool ClearUIMessageScene ( struct FName SceneTag, class ULocalPlayer* ScenePlayerOwner, unsigned long bCloseChildScenes );
	bool ShowUIMessage ( struct FName SceneTag, struct FString Title, struct FString Message, struct FString Question, struct TArray<struct FName> ButtonAliases, struct FScriptDelegate SelectionCallback, class ULocalPlayer* ScenePlayerOwner, unsigned char ForcedPriority, class UUIMessageBoxBase** out_CreatedScene );
	class UUIMessageBoxBase* CreateUIMessageBox ( struct FName SceneTag, class UClass* CustomMessageBoxClass, class UUIMessageBoxBase* SceneTemplate );
	void RestoreMenuProgression ( class UUIScene* BaseScene );
	void ClearMenuProgression ( );
	void SaveMenuProgression ( );
	void NotifyStorageDeviceChanged ( );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyControllerChanged ( int ControllerId, unsigned long bConnected );
	void OnLoginChange ( unsigned char ControllerId );
	void NotifyGameSessionEnded ( );
	void NotifyClientTravel ( class APlayerController* TravellingPlayer, struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamlessTravel );
	bool IsAllowedToModifyPlayerCount ( );
	void eventSynchronizePlayers ( int MaxPlayersAllowed, unsigned long bAllowJoins, unsigned long bAllowRemoval );
	void eventInitializeSceneClient ( );
	bool eventCanShowToolTips ( );
	void eventPauseGame ( unsigned long bDesiredPauseState, int PlayerIndex );
	bool SetActiveControl ( class UUIObject* NewActiveControl );
	bool CanUnpauseInternalUI ( );
	void RequestCursorRenderUpdate ( );
	void RequestInputProcessingUpdate ( );
	void AllActiveScenes ( class UClass* SceneClass, unsigned long bIterateBackwards, int StartingIndex, int SceneFilterMask, class UUIScene** OutScene );
	class UUIScene* GetNextSceneFromIndex ( int StartingSceneIndex, class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetNextScene ( class UUIScene* SourceScene, unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetPreviousInputProcessingScene ( class UUIScene* SourceScene, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetPreviousSceneFromIndex ( int StartingSceneIndex, class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetPreviousScene ( class UUIScene* SourceScene, unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetActiveScene ( class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	int GetActiveSceneCount ( class ULocalPlayer* MatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	int FindSceneIndexByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	class UUIScene* GetSceneAtIndex ( int SceneIndex );
	int FindSceneIndex ( class UUIScene* SceneToFind );
	class UUIScene* FindSceneByTag ( struct FName SceneTag, class ULocalPlayer* SceneOwner );
	class UUIObject* CreateTransientWidget ( class UClass* WidgetClass, struct FName WidgetTag, class UUIObject* Owner );
	class UUIScene* CreateScene ( class UClass* SceneClass, struct FName SceneTag, class UUIScene* SceneTemplate );
	class UUIScene* GetTransientScene ( );
	unsigned char GetCurrentNetMode ( );
};

// Class Engine.UIButton
// 0x0012 (0x0528 - 0x0516)
class UUIButton : public UUIObject
{
public:
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x0518 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	struct FName                                       ClickedCue;                                       		// 0x0520 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetImage ( class USurface* NewImage );
};

// Class Engine.UILabelButton
// 0x0050 (0x0578 - 0x0528)
class UUILabelButton : public UUIButton
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x0528 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         CaptionDataSource;                                		// 0x0530 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0570 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	struct FString eventGetCaption ( );
	void SetCaption ( struct FString NewText );
};

// Class Engine.UICalloutButton
// 0x0025 (0x059D - 0x0578)
class UUICalloutButton : public UUILabelButton
{
public:
	struct FString                                     DefaultMarkupStringTemplate;                      		// 0x0578 (0x0010) [0x0000000000404002]              ( CPF_Const | CPF_Config | CPF_NeedCtorLink )
	struct FName                                       CalloutDataStoreTag;                              		// 0x0588 (0x0008) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	struct FName                                       InputAliasTag;                                    		// 0x0590 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned long                                      bSupportsButtonRepeat : 1;                        		// 0x0598 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bPlayErrorSoundWhenDisabled : 1;                  		// 0x0598 (0x0004) [0x0000000000004002] [0x00000002] ( CPF_Const | CPF_Config )
	unsigned char                                      IconAlignment;                                    		// 0x059C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	bool VerifyDefaultMarkupString ( );
	class UUICalloutButtonPanel* GetPanelOwner ( );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	struct FString eventGenerateCompleteCaptionMarkup ( struct FName InputAlias );
	struct FString eventGetCalloutMarkupString ( struct FName AlternateInputAlias );
	struct FName eventGetCalloutDataStoreName ( );
	bool eventSetInputAlias ( struct FName NewInputAlias );
	bool OnReceivedInputKey ( struct FInputEventParameters* EventParms );
	bool UnsubscribeFromInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks, int PlayerIndex );
	bool SubscribeToInputProxy ( class UUIEvent_CalloutButtonInputProxy* InputProxy, unsigned long bUpdateProxyOutputLinks, int PlayerIndex );
	void SetInputTag ( struct FName NewInputAlias );
	class UUIDataStore_InputAlias* GetCalloutDataStore ( class ULocalPlayer* AlternatePlayer );
};

// Class Engine.UIScrollbar
// 0x00FB (0x0611 - 0x0516)
class UUIScrollbar : public UUIObject
{
public:
	struct FUIStyleReference                           IncrementStyle;                                   		// 0x0518 (0x0028) [0x0000000000000000]              
	struct FUIStyleReference                           DecrementStyle;                                   		// 0x0540 (0x0028) [0x0000000000000000]              
	struct FUIStyleReference                           MarkerStyle;                                      		// 0x0568 (0x0028) [0x0000000000000000]              
	struct FScriptDelegate                             __OnScrollActivity__Delegate;                     		// 0x0590 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnClickedScrollZone__Delegate;                  		// 0x05A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FUIScreenValue_Position                     MousePosition;                                    		// 0x05B0 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UUIComp_DrawImage*                           BackgroundImageComponent;                         		// 0x05BC (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIScrollbarButton*                          IncrementButton;                                  		// 0x05C4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UUIScrollbarButton*                          DecrementButton;                                  		// 0x05CC (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UUIScrollbarMarkerButton*                    MarkerButton;                                     		// 0x05D4 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FUIScreenValue_Extent                       BarWidth;                                         		// 0x05DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       MinimumMarkerSize;                                		// 0x05E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FUIScreenValue_Extent                       ButtonsExtent;                                    		// 0x05EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              NudgeValue;                                       		// 0x05F4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              NudgeMultiplier;                                  		// 0x05F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NudgePercent;                                     		// 0x05FC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkerPosPercent;                                 		// 0x0600 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MarkerSizePercent;                                		// 0x0604 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MousePositionDelta;                               		// 0x0608 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAddCornerPadding : 1;                            		// 0x060C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bInitializeMarker : 1;                            		// 0x060C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned char                                      ScrollbarOrientation;                             		// 0x0610 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetMarkerSizePercent ( );
	float GetMarkerPosPercent ( );
	float GetNudgePercent ( );
	float GetNudgeValue ( );
	void eventPostInitialize ( );
	void eventInitialized ( );
	void DragScroll ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex );
	void DragScrollEnd ( class UUIScreenObject* Sender, int PlayerIndex );
	void DragScrollBegin ( class UUIScreenObject* Sender, int PlayerIndex );
	void ScrollDecrement ( class UUIScreenObject* Sender, int PlayerIndex );
	void ScrollIncrement ( class UUIScreenObject* Sender, int PlayerIndex );
	void EnableCornerPadding ( unsigned long FlagValue );
	void SetNudgeSizePixels ( float NudgePixels );
	void SetNudgeSizePercent ( float NudgePercentage );
	void SetMarkerPosition ( float PositionPercentage );
	void SetMarkerSize ( float SizePercentage );
	float GetScrollZoneWidth ( );
	float GetScrollZoneExtent ( float* ScrollZoneStart );
	float GetMarkerButtonPosition ( );
	void OnClickedScrollZone ( class UUIScrollbar* Sender, float PositionPerc, int PlayerIndex );
	bool OnScrollActivity ( class UUIScrollbar* Sender, float PositionChange, unsigned long bPositionMaxed );
};

// Class Engine.UIScrollbarButton
// 0x0000 (0x0528 - 0x0528)
class UUIScrollbarButton : public UUIButton
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIScrollbarMarkerButton
// 0x0010 (0x0538 - 0x0528)
class UUIScrollbarMarkerButton : public UUIScrollbarButton
{
public:
	struct FScriptDelegate                             __OnButtonDragged__Delegate;                      		// 0x0528 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnButtonDragged ( class UUIScrollbarMarkerButton* Sender, int PlayerIndex );
};

// Class Engine.UIContainer
// 0x000A (0x0520 - 0x0516)
class UUIContainer : public UUIObject
{
public:
	class UUIComp_AutoAlignment*                       AutoAlignment;                                    		// 0x0518 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UICalloutButtonPanel
// 0x0086 (0x05A6 - 0x0520)
class UUICalloutButtonPanel : public UUIContainer
{
public:
	struct TArray<class UUICalloutButton*>             CalloutButtons;                                   		// 0x0520 (0x0010) [0x0000000004422001]              ( CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FName>                        CalloutButtonAliases;                             		// 0x0530 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0540 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UICalloutButtonPanel.ButtonInputKeyMappings
	struct FUIScreenValue_Extent                       ButtonPadding[ 0x2 ];                             		// 0x0588 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UUICalloutButton*                            ButtonTemplate;                                   		// 0x0598 (0x0008) [0x0000000004220001]              ( CPF_Edit | CPF_EditConst | CPF_EditInline )
	unsigned long                                      bGeneratingInitialButtons : 1;                    		// 0x05A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSupportsButtonRepeat : 1;                        		// 0x05A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRefreshButtonDocking : 1;                        		// 0x05A0 (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned char                                      ButtonBarOrientation;                             		// 0x05A4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ButtonLayout;                                     		// 0x05A5 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnButtonVisibilityChanged ( class UUIScreenObject* SourceWidget, unsigned long bIsVisible );
	void InitializeInputProxy ( );
	void ConfigureChildButton ( class UUICalloutButton* ChildButton );
	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
	void eventPostInitialize ( );
	bool eventCanButtonAcceptFocus ( struct FName InputAliasTag, int PlayerIndex );
	bool eventContainsButton ( struct FName ButtonInputAlias );
	int eventFindButtonIndex ( struct FName ButtonInputAlias );
	class UUICalloutButton* eventFindButton ( struct FName ButtonInputAlias );
	bool eventEnableButton ( struct FName ButtonInputAlias, int PlayerIndex, unsigned long bEnableButton, unsigned long bUpdateButtonVisibility );
	bool eventShowButton ( struct FName ButtonInputAlias, unsigned long bShowButton );
	bool eventSetButtonCallback ( struct FName ButtonInputAlias, struct FScriptDelegate NewClickHandler );
	bool eventSetButtonInputAlias ( struct FName ButtonInputAlias, struct FName NewButtonInputAlias );
	bool eventSetButtonCaption ( struct FName ButtonInputAlias, struct FString NewButtonCaption );
	bool eventRemoveAllButtons ( );
	bool eventRemoveButtonByAlias ( struct FName ButtonInputAlias );
	bool eventRemoveButton ( class UUICalloutButton* ButtonToRemove );
	int eventInsertButton ( class UUICalloutButton* NewButton );
	void RequestButtonDockingUpdate ( unsigned long bImmediately );
	int FindBestInsertionIndex ( class UUICalloutButton* ButtonToInsert, unsigned long bSearchChildrenArray );
	class UUIEvent_CalloutButtonInputProxy* GetCalloutInputProxy ( unsigned long bCreateIfNecessary );
	class UUICalloutButton* CreateCalloutButton ( struct FName ButtonInputAlias, struct FName ButtonName, unsigned long bInsertChild );
	void GetAvailableCalloutButtonAliases ( class ULocalPlayer* PlayerOwner, struct TArray<struct FName>* AvailableAliases );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventSynchronizeInputAliases ( );
	void PopulateCalloutButtonArray ( );
};

// Class Engine.UISafeRegionPanel
// 0x000D (0x052D - 0x0520)
class UUISafeRegionPanel : public UUIContainer
{
public:
	float                                              RegionPercentages[ 0x2 ];                         		// 0x0520 (0x0008) [0x0000000004004001]              ( CPF_Edit | CPF_Config | CPF_EditInline )
	unsigned long                                      bForce4x3AspectRatio : 1;                         		// 0x0528 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseFullRegionIn4x3 : 1;                          		// 0x0528 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPrimarySafeRegion : 1;                           		// 0x0528 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned char                                      RegionType;                                       		// 0x052C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIImage
// 0x0052 (0x0568 - 0x0516)
class UUIImage : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStorePublisher;                    		// 0x0518 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         ImageDataSource;                                  		// 0x0520 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawImage*                           ImageComponent;                                   		// 0x0560 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SaveSubscriberValue ( int BindingIndex, struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetValue ( class USurface* NewImage );
};

// Class Engine.UILabel
// 0x0062 (0x0578 - 0x0516)
class UUILabel : public UUIObject
{
public:
	struct FPointer                                    VfTable_IUIDataStoreSubscriber;                   		// 0x0518 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    VfTable_IUIStringRenderer;                        		// 0x0520 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FUIDataStoreBinding                         DataSource;                                       		// 0x0528 (0x0040) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UUIComp_DrawString*                          StringRenderComponent;                            		// 0x0568 (0x0008) [0x000000000608000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_NoClear | CPF_EditInline )
	class UUIComp_DrawImage*                           LabelBackground;                                  		// 0x0570 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void IgnoreMarkup ( unsigned long bShouldIgnoreMarkup );
	struct FString GetValue ( );
	void SetArrayValue ( struct TArray<struct FString> ValueArray );
	void ClearBoundDataStores ( );
	void GetBoundDataStores ( struct TArray<class UUIDataStore*>* out_BoundDataStores );
	void NotifyDataStoreValueUpdated ( class UUIDataStore* SourceDataStore, unsigned long bValuesInvalidated, struct FName PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex );
	bool RefreshSubscriberValue ( int BindingIndex );
	struct FString GetDataStoreBinding ( int BindingIndex );
	void SetDataStoreBinding ( struct FString MarkupText, int BindingIndex );
	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
	void SetValue ( struct FString NewText );
};

// Class Engine.UIContextMenu
// 0x001C (0x087C - 0x0860)
class UUIContextMenu : public UUIList
{
public:
	struct TArray<struct FContextMenuItem>             MenuItems;                                        		// 0x0860 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UUIObject*                                   InvokingWidget;                                   		// 0x0870 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bResolvePosition : 1;                             		// 0x0878 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventFindMenuItemIndex ( class UUIObject* Widget, struct FString ItemToFind );
	bool eventGetMenuItem ( class UUIObject* Widget, int IndexToGet, struct FString* out_MenuItem );
	bool eventGetAllMenuItems ( class UUIObject* Widget, struct TArray<struct FString>* out_MenuItems );
	bool eventRemoveMenuItemAtIndex ( class UUIObject* Widget, int IndexToRemove );
	bool eventRemoveMenuItem ( class UUIObject* Widget, struct FString ItemToRemove );
	bool eventClearMenuItems ( class UUIObject* Widget );
	bool eventInsertMenuItem ( class UUIObject* Widget, struct FString Item, int InsertIndex, unsigned long bAllowDuplicates );
	bool eventSetMenuItems ( class UUIObject* Widget, struct TArray<struct FString> NewMenuItems, unsigned long bClearExisting, int InsertIndex );
	bool Close ( int PlayerIndex );
	bool Open ( int PlayerIndex );
	bool IsActiveContextMenu ( );
};

// Class Engine.UIPrefab
// 0x001E (0x0534 - 0x0516)
class UUIPrefab : public UUIObject
{
public:
	struct FUIScreenValue_Extent                       OriginalWidth;                                    		// 0x0518 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FUIScreenValue_Extent                       OriginalHeight;                                   		// 0x0520 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                PrefabVersion;                                    		// 0x0528 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                InternalPrefabVersion;                            		// 0x052C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                ModificationCounter;                              		// 0x0530 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIPrefabInstance
// 0x009E (0x05B4 - 0x0516)
class UUIPrefabInstance : public UUIObject
{
public:
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0518 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.ArchetypeToInstanceMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0560 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.UIPrefabInstance.PI_ObjectMap
	class UUIPrefab*                                   SourcePrefab;                                     		// 0x05A8 (0x0008) [0x0000010000000002]              ( CPF_Const )
	int                                                PrefabInstanceVersion;                            		// 0x05B0 (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DetachFromSourcePrefab ( );
};

// Class Engine.UIScene
// 0x045C (0x067C - 0x0220)
class UUIScene : public UUIScreenObject
{
public:
	struct FMap_Mirror                                 InputSubscriptions[ 0x4 ];                        		// 0x0220 (0x0120) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FPostProcessSettings                        CurrentBackgroundSettings;                        		// 0x0340 (0x00E0) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct FPostProcessSettings                        CurrentForegroundSettings;                        		// 0x0420 (0x00E0) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FUIDockingNode>               DockingStack;                                     		// 0x0500 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UUIObject*>                    RenderStack;                                      		// 0x0510 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UUITickableObject*>            TickableObjects;                                  		// 0x0520 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UUIScreenObject*>              AnimatingObjects;                                 		// 0x0530 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FScriptDelegate                             __GetSceneInputModeOverride__Delegate;            		// 0x0540 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnInterceptRawInputKey__Delegate;               		// 0x0550 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneActivated__Delegate;                     		// 0x0560 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnSceneDeactivated__Delegate;                   		// 0x0570 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryCloseSceneAllowed__Delegate;             		// 0x0580 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnTopSceneChanged__Delegate;                    		// 0x0590 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __ShouldModulateBackgroundAlpha__Delegate;        		// 0x05A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryBeginAnimation_DisableInput__Delegate;   		// 0x05B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryEndAnimation_EnableInput__Delegate;      		// 0x05C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultContextMenuClass;                          		// 0x05D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FName                                       SceneTag;                                         		// 0x05D8 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UUISceneClient*                              SceneClient;                                      		// 0x05E0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class ULocalPlayer*                                PlayerOwner;                                      		// 0x05E8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIContextMenu*                              ActiveContextMenu;                                		// 0x05F0 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUIContextMenu*                              StandardContextMenu;                              		// 0x05F8 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UUISkin*                                     SceneSkin;                                        		// 0x0600 (0x0008) [0x0000000014000003]              ( CPF_Edit | CPF_Const | CPF_EditInline | CPF_EditInlineUse )
	class UUISafeRegionPanel*                          PrimarySafeRegionPanel;                           		// 0x0608 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	class UPostProcessChain*                           UIPostProcessForeground;                          		// 0x0610 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPostProcessChain*                           UIPostProcessBackground;                          		// 0x0618 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FVector2D                                   CurrentViewportSize;                              		// 0x0620 (0x0008) [0x0000000000000000]              
	struct FName                                       SceneAnimation_Open;                              		// 0x0628 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneAnimation_Close;                             		// 0x0630 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneAnimation_LoseFocus;                         		// 0x0638 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneAnimation_RegainingFocus;                    		// 0x0640 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneAnimation_RegainedFocus;                     		// 0x0648 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneOpenedCue;                                   		// 0x0650 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SceneClosedCue;                                   		// 0x0658 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USceneDataStore*                             SceneData;                                        		// 0x0660 (0x0008) [0x000000000440000A]              ( CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	int                                                LastPlayerIndex;                                  		// 0x0668 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                UpdateSceneFeedbackLoopCount;                     		// 0x066C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                SceneStackPriority;                               		// 0x0670 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUpdateDockingStack : 1;                          		// 0x0674 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateScenePositions : 1;                        		// 0x0674 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateNavigationLinks : 1;                       		// 0x0674 (0x0004) [0x0000000000002002] [0x00000004] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdatePrimitiveUsage : 1;                        		// 0x0674 (0x0004) [0x0000000000002002] [0x00000008] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRefreshWidgetStyles : 1;                         		// 0x0674 (0x0004) [0x0000000000002002] [0x00000010] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRefreshStringFormatting : 1;                     		// 0x0674 (0x0004) [0x0000000000002002] [0x00000020] ( CPF_Const | CPF_Transient )
	unsigned long                                      bRecalculateInputMask : 1;                        		// 0x0674 (0x0004) [0x0000000000002002] [0x00000040] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPerformedInitialUpdate : 1;                      		// 0x0674 (0x0004) [0x0000000000002002] [0x00000080] ( CPF_Const | CPF_Transient )
	unsigned long                                      bResolvingScenePositions : 1;                     		// 0x0674 (0x0004) [0x0000000000002002] [0x00000100] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUsesPrimitives : 1;                              		// 0x0674 (0x0004) [0x0000000000002002] [0x00000200] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSupportsNavigation : 1;                          		// 0x0674 (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned long                                      bReevaluateRotationSupport : 1;                   		// 0x0674 (0x0004) [0x0000000000002002] [0x00000800] ( CPF_Const | CPF_Transient )
	unsigned long                                      bSupportsRotation : 1;                            		// 0x0674 (0x0004) [0x0000000000002002] [0x00001000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bDisplayCursor : 1;                               		// 0x0674 (0x0004) [0x0000000000000001] [0x00002000] ( CPF_Edit )
	unsigned long                                      bRenderParentScenes : 1;                          		// 0x0674 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bAlwaysRenderScene : 1;                           		// 0x0674 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bPauseGameWhileActive : 1;                        		// 0x0674 (0x0004) [0x0000000000000001] [0x00010000] ( CPF_Edit )
	unsigned long                                      bExemptFromAutoClose : 1;                         		// 0x0674 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bCloseOnLevelChange : 1;                          		// 0x0674 (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bSaveSceneValuesOnClose : 1;                      		// 0x0674 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bEnableScenePostProcessing : 1;                   		// 0x0674 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bEnableSceneDepthTesting : 1;                     		// 0x0674 (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bRequiresNetwork : 1;                             		// 0x0674 (0x0004) [0x0000000000000001] [0x00400000] ( CPF_Edit )
	unsigned long                                      bRequiresOnlineService : 1;                       		// 0x0674 (0x0004) [0x0000000000000001] [0x00800000] ( CPF_Edit )
	unsigned long                                      bMenuLevelRestoresScene : 1;                      		// 0x0674 (0x0004) [0x0000000000000001] [0x01000000] ( CPF_Edit )
	unsigned long                                      bFlushPlayerInput : 1;                            		// 0x0674 (0x0004) [0x0000000000000001] [0x02000000] ( CPF_Edit )
	unsigned long                                      bCaptureMatchedInput : 1;                         		// 0x0674 (0x0004) [0x0000000000000001] [0x04000000] ( CPF_Edit )
	unsigned long                                      bDisableWorldRendering : 1;                       		// 0x0674 (0x0004) [0x0000000000000001] [0x08000000] ( CPF_Edit )
	unsigned long                                      bAnimationBlockingInput : 1;                      		// 0x0674 (0x0004) [0x0000000000002000] [0x10000000] ( CPF_Transient )
	unsigned char                                      PlayerInputMask;                                  		// 0x0678 (0x0001) [0x0000000000002000]              ( CPF_Transient )
	unsigned char                                      SceneInputMode;                                   		// 0x0679 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SceneRenderMode;                                  		// 0x067A (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ScenePostProcessGroup;                            		// 0x067B (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DebugShowAnimators ( );
	void LogCurrentState ( int Indent );
	void LogRenderBounds ( int Indent );
	void OnRegainedFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnRegainingFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnLostFocusAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnCloseAnimationComplete_IgnoreChildScenes ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnCloseAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void OnOpenAnimationComplete ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void BeginSceneRegainedFocusAnimation ( );
	void BeginSceneRegainingFocusAnimation ( );
	void BeginSceneLostFocusAnimation ( );
	bool BeginSceneCloseAnimation ( unsigned long bCloseChildScenes );
	void BeginSceneOpenAnimation ( );
	bool StopSceneAnimation ( struct FName AnimationSequenceName, unsigned long bFinalize );
	bool BeginSceneAnimation ( struct FName AnimationSequenceName, struct FScriptDelegate TrackCompletedDelegate );
	int FindAnimatorIndex ( class UUIScreenObject* SearchObj );
	bool eventCloseScene ( class UUIScene* SceneToClose, unsigned long bCloseChildScenes, unsigned long bForceCloseImmediately );
	class UUIScene* eventOpenScene ( class UUIScene* SceneToOpen, class ULocalPlayer* ScenePlayerOwner, unsigned char ForcedPriority, unsigned long bSkipAnimation, struct FScriptDelegate SceneDelegate );
	void NotifyPlayerRemoved ( int PlayerIndex, class ULocalPlayer* RemovedPlayer );
	void NotifyPlayerAdded ( int PlayerIndex, class ULocalPlayer* AddedPlayer );
	void NotifyStorageDeviceChanged ( );
	void NotifyLinkStatusChanged ( unsigned long bConnected );
	void NotifyOnlineServiceStatusChanged ( unsigned char NewConnectionStatus );
	void NotifyControllerStatusChanged ( int ControllerId, unsigned long bConnected );
	bool NotifyLoginStatusChanged ( int ControllerId, unsigned char NewStatus );
	void NotifyGameSessionEnded ( );
	void NotifyPreClientTravel ( struct FString TravelURL, unsigned char TravelType, unsigned long bIsSeamless );
	void SceneCreated ( class UUIScene* CreatedScene );
	void eventUIAnimationEnded ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask );
	void eventUIAnimationStarted ( class UUIScreenObject* Sender, struct FName AnimName, int TrackTypeMask, unsigned long bSetAnimatingFlag );
	void eventSetVisibility ( unsigned long bIsVisible );
	void eventRemovedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* OldChild, struct TArray<class UUIObject*> ExclusionSet );
	void eventAddedChild ( class UUIScreenObject* WidgetOwner, class UUIObject* NewChild );
	void eventCalculateInputMask ( );
	void eventSceneDeactivated ( );
	void eventSceneActivated ( unsigned long bInitialActivation );
	class UUIObject* eventGetFocusHint ( unsigned long bQueryOnly );
	void LogDockingStack ( );
	bool SetActiveContextMenu ( class UUIContextMenu* NewContextMenu, int PlayerIndex );
	class UUIContextMenu* GetActiveContextMenu ( );
	class UUIContextMenu* GetDefaultContextMenu ( );
	bool IsSceneActive ( unsigned long bTopmostScene );
	class AWorldInfo* GetWorldInfo ( );
	void SetSceneRenderMode ( unsigned char NewRenderMode );
	unsigned char GetSceneRenderMode ( );
	unsigned char GetSceneInputMode ( unsigned long bMemberValueOnly );
	void SetSceneInputMode ( unsigned char NewInputMode );
	unsigned char GetScenePostProcessGroup ( );
	bool ShouldRenderParentScenes ( );
	class UUIScene* GetPreviousScene ( unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIScene* GetNextScene ( unsigned long bRequireMatchingPlayerOwner, unsigned long bIgnoreUnfocusedScenes );
	class UUIDataStore* ResolveDataStore ( struct FName DataStoreTag, class ULocalPlayer* InPlayerOwner );
	void UnbindSubscribers ( );
	void SaveSceneDataValues ( unsigned long bUnbindSubscribers );
	void LoadSceneDataValues ( );
	class USceneDataStore* GetSceneDataStore ( );
	int FindTickableObjectIndex ( class UUITickableObject* ObjectToFind );
	bool UnregisterTickableObject ( class UUITickableObject* ObjectToRemove );
	bool RegisterTickableObject ( class UUITickableObject* ObjectToRegister, int InsertIndex );
	void ResolveScenePositions ( );
	void RebuildDockingStack ( );
	void ForceImmediateSceneUpdate ( );
	bool OnQueryEndAnimation_EnableInput ( struct FName AnimationSequenceName, int TrackTypeMask );
	bool OnQueryBeginAnimation_DisableInput ( struct FName AnimationSequenceName, int TrackTypeMask );
	bool ShouldModulateBackgroundAlpha ( float* AlphaModulationPercent );
	void OnTopSceneChanged ( class UUIScene* NewTopScene );
	bool OnQueryCloseSceneAllowed ( class UUIScene* SceneToDeactivate, unsigned long bCloseChildScenes, unsigned long bForcedClose );
	void OnSceneDeactivated ( class UUIScene* DeactivatedScene );
	void OnSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	bool OnInterceptRawInputKey ( struct FInputEventParameters* EventParms );
	unsigned char GetSceneInputModeOverride ( );
};

// Class Engine.UIState_Active
// 0x0002 (0x009C - 0x009A)
class UUIState_Active : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIState_Focused
// 0x0002 (0x009C - 0x009A)
class UUIState_Focused : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventActivateState ( class UUIScreenObject* Target, int PlayerIndex );
};

// Class Engine.UIState_Pressed
// 0x0002 (0x009C - 0x009A)
class UUIState_Pressed : public UUIState
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIListString
// 0x0000 (0x0114 - 0x0114)
class UUIListString : public UUIString
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIStyle_Data
// 0x002C (0x008C - 0x0060)
class UUIStyle_Data : public UUIRoot
{
public:
	struct FScriptDelegate                             __MatchesStyleData__Delegate;                     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FLinearColor                                StyleColor;                                       		// 0x0070 (0x0010) [0x0000000000000000]              
	float                                              StylePadding[ 0x2 ];                              		// 0x0080 (0x0008) [0x0000000000000000]              
	unsigned long                                      bEnabled : 1;                                     		// 0x0088 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bDirty : 1;                                       		// 0x0088 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool MatchesStyleData ( class UUIStyle_Data* OtherStyle );
};

// Class Engine.UIStyle_Combo
// 0x0060 (0x00EC - 0x008C)
class UUIStyle_Combo : public UUIStyle_Data
{
public:
	struct FStyleDataReference                         ImageStyle;                                       		// 0x008C (0x0030) [0x0000000000000000]              
	struct FStyleDataReference                         TextStyle;                                        		// 0x00BC (0x0030) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIStyle_Image* GetComboImageStyle ( );
	class UUIStyle_Text* GetComboTextStyle ( );
};

// Class Engine.UIStyle_Image
// 0x0040 (0x00CC - 0x008C)
class UUIStyle_Image : public UUIStyle_Data
{
public:
	struct FUIImageAdjustmentData                      AdjustmentType[ 0x2 ];                            		// 0x008C (0x0028) [0x0000000000000001]              ( CPF_Edit )
	struct FTextureCoordinates                         Coordinates;                                      		// 0x00B4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class USurface*                                    DefaultImage;                                     		// 0x00C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIStyle_Text
// 0x0028 (0x00B4 - 0x008C)
class UUIStyle_Text : public UUIStyle_Data
{
public:
	class UFont*                                       StyleFont;                                        		// 0x008C (0x0008) [0x0000000000000000]              
	struct FTextAutoScaleValue                         AutoScaling;                                      		// 0x0094 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   Scale;                                            		// 0x009C (0x0008) [0x0000000000000000]              
	struct FVector2D                                   SpacingAdjust;                                    		// 0x00A4 (0x0008) [0x0000000000000000]              
	struct FUITextAttributes                           Attributes;                                       		// 0x00AC (0x0004) [0x0000000000000000]              
	unsigned char                                      Alignment[ 0x2 ];                                 		// 0x00B0 (0x0002) [0x0000000000000000]              
	unsigned char                                      ClipMode;                                         		// 0x00B2 (0x0001) [0x0000000000000000]              
	unsigned char                                      ClipAlignment;                                    		// 0x00B3 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UITexture
// 0x00A4 (0x0104 - 0x0060)
class UUITexture : public UUIRoot
{
public:
	struct FUICombinedStyleData                        ImageStyleData;                                   		// 0x0060 (0x009C) [0x0000000000002000]              ( CPF_Transient )
	class USurface*                                    ImageTexture;                                     		// 0x00FC (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class USurface* GetSurface ( );
	bool HasValidStyleData ( );
	void SetImageStyle ( class UUIStyle_Image* NewImageStyle );
	class UUIScreenObject* GetOwnerWidget ( class UUIComponent** OwnerComponent );
};

// Class Engine.UITickableObjectProxy
// 0x0018 (0x0078 - 0x0060)
class UUITickableObjectProxy : public UUIRoot
{
public:
	struct FPointer                                    VfTable_IUITickableObject;                        		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FScriptDelegate                             __OnScriptTick__Delegate;                         		// 0x0068 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventScriptTick ( float DeltaTime );
	void OnScriptTick ( class UUITickableObjectProxy* Sender, float DeltaTime );
};

// Class Engine.UIStringRenderer
// 0x0000 (0x0060 - 0x0060)
class UUIStringRenderer : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetTextAlignment ( unsigned char Horizontal, unsigned char Vertical );
};

// Class Engine.UIStyleResolver
// 0x0000 (0x0060 - 0x0060)
class UUIStyleResolver : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool NotifyResolveStyle ( class UUISkin* ActiveSkin, unsigned long bClearExistingValue, class UUIState* CurrentMenuState, struct FName StylePropertyName );
	bool SetStyleResolverTag ( struct FName NewResolverTag );
	struct FName GetStyleResolverTag ( );
};

// Class Engine.UITickableObject
// 0x0000 (0x0060 - 0x0060)
class UUITickableObject : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UISequence
// 0x0018 (0x01CC - 0x01B4)
class UUISequence : public USequence
{
public:
	struct FPointer                                    VfTable_IUIEventContainer;                        		// 0x01B4 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct TArray<class UUIEvent*>                     UIEvents;                                         		// 0x01BC (0x0010) [0x0000000001502002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RemoveSequenceObjects ( struct TArray<class USequenceObject*>* ObjectsToRemove );
	void RemoveSequenceObject ( class USequenceObject* ObjectToRemove );
	bool AddSequenceObject ( class USequenceObject* NewObj, unsigned long bRecurse );
	void GetUIEvents ( class UClass* LimitClass, struct TArray<class UUIEvent*>* out_Events );
	class UUIScreenObject* GetOwner ( );
};

// Class Engine.UIStateSequence
// 0x0000 (0x01CC - 0x01CC)
class UUIStateSequence : public UUISequence
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UUIState* GetOwnerState ( );
};

// Class Engine.UIAction
// 0x0004 (0x00FC - 0x00F8)
class UUIAction : public USequenceAction
{
public:
	unsigned long                                      bAutoTargetOwner : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsValidLevelSequenceObject ( );
	class UUIScene* GetOwnerScene ( );
	class UUIScreenObject* GetOwner ( );
};

// Class Engine.UIEvent
// 0x003A (0x0160 - 0x0126)
class UUIEvent : public USequenceEvent
{
public:
	struct FString                                     Description;                                      		// 0x0128 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FScriptDelegate                             __AllowEventActivation__Delegate;                 		// 0x0138 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUIScreenObject*                             EventOwner;                                       		// 0x0148 (0x0008) [0x0000000001000000]              
	class UObject*                                     EventActivator;                                   		// 0x0150 (0x0008) [0x0000000000000000]              
	int                                                SubobjectVersionModifier;                         		// 0x0158 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bShouldRegisterEvent : 1;                         		// 0x015C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPropagateEvent : 1;                              		// 0x015C (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventShouldAlwaysInstance ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	bool eventIsValidLevelSequenceObject ( );
	bool ActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate );
	bool ConditionalActivateUIEvent ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate );
	bool CanBeActivated ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate );
	class UUIScene* GetOwnerScene ( );
	class UUIScreenObject* GetOwner ( );
	bool AllowEventActivation ( int ControllerIndex, class UUIScreenObject* InEventOwner, class UObject* InEventActivator, unsigned long bActivateImmediately, struct TArray<int>* IndicesToActivate );
};

// Class Engine.UIEvent_CalloutButtonInputProxy
// 0x0008 (0x0168 - 0x0160)
class UUIEvent_CalloutButtonInputProxy : public UUIEvent
{
public:
	class UUICalloutButtonPanel*                       ButtonPanel;                                      		// 0x0160 (0x0008) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	int FindButtonAliasIndex ( struct FName ButtonAliasName );
	bool ChangeButtonAlias ( struct FName CurrentAliasName, struct FName NewAliasName );
	bool UnregisterButtonAlias ( struct FName ButtonAliasName );
	bool RegisterButtonAlias ( struct FName ButtonAliasName );
};

// Class Engine.UIEvent_MetaObject
// 0x0008 (0x0168 - 0x0160)
class UUIEvent_MetaObject : public UUIEvent
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0160 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsPastingIntoUISequenceAllowed ( );
	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.UIEvent_ProcessInput
// 0x0048 (0x01A8 - 0x0160)
class UUIEvent_ProcessInput : public UUIEvent
{
public:
	struct FMultiMap_Mirror                            ActionMap;                                        		// 0x0160 (0x0048) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.Scene
// 0x0000 (0x0060 - 0x0060)
class UScene : public UObject
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FoliageFactory
// 0x002C (0x02E0 - 0x02B4)
class AFoliageFactory : public AVolume
{
public:
	struct TArray<struct FFoliageMesh>                 Meshes;                                           		// 0x02B4 (0x0010) [0x0000000000480003]              ( CPF_Edit | CPF_Const | CPF_Component | CPF_NeedCtorLink )
	float                                              VolumeFalloffRadius;                              		// 0x02C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              VolumeFalloffExponent;                            		// 0x02C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityUpFacing;                           		// 0x02CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensityDownFacing;                         		// 0x02D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SurfaceDensitySideFacing;                         		// 0x02D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              FacingFalloffExponent;                            		// 0x02D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                MaxInstanceCount;                                 		// 0x02DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InteractiveFoliageActor
// 0x005C (0x02DC - 0x0280)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	struct FVector                                     TouchingActorEntryPosition;                       		// 0x0280 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageVelocity;                                  		// 0x028C (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliageForce;                                     		// 0x0298 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     FoliagePosition;                                  		// 0x02A4 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	class UCylinderComponent*                          CylinderComponent;                                		// 0x02B0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              FoliageDamageImpulseScale;                        		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageTouchImpulseScale;                         		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffness;                                 		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageStiffnessQuadratic;                        		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FoliageDamping;                                   		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxDamageImpulse;                                 		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxTouchImpulse;                                  		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MaxForce;                                         		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Mass;                                             		// 0x02D8 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

// Class Engine.FoliageComponent
// 0x009C (0x02C0 - 0x0224)
class UFoliageComponent : public UPrimitiveComponent
{
public:
	struct TArray<struct FStoredFoliageInstance>       LitInstances;                                     		// 0x0224 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FGuid>                        StaticallyRelevantLights;                         		// 0x0234 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FGuid>                        StaticallyIrrelevantLights;                       		// 0x0244 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0254 (0x001C) [0x0000000000000000]              
	float                                              DirectionalStaticLightingScale[ 0x3 ];            		// 0x0270 (0x000C) [0x0000000000000002]              ( CPF_Const )
	float                                              SimpleStaticLightingScale[ 0x3 ];                 		// 0x027C (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     MinScale;                                         		// 0x0288 (0x000C) [0x0000000000000000]              
	struct FVector                                     MaxScale;                                         		// 0x0294 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 InstanceStaticMesh;                               		// 0x02A0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	class UMaterialInterface*                          Material;                                         		// 0x02A8 (0x0008) [0x0000000000000002]              ( CPF_Const )
	float                                              MaxDrawRadius;                                    		// 0x02B0 (0x0004) [0x0000000000000000]              
	float                                              MinTransitionRadius;                              		// 0x02B4 (0x0004) [0x0000000000000000]              
	float                                              MinThinningRadius;                                		// 0x02B8 (0x0004) [0x0000000000000000]              
	float                                              SwayScale;                                        		// 0x02BC (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.InteractiveFoliageComponent
// 0x0008 (0x02A8 - 0x02A0)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                                		// 0x02A0 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactoryInteractiveFoliage
// 0x0000 (0x00A0 - 0x00A0)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FluidInfluenceActor
// 0x001E (0x028C - 0x026E)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                    		// 0x0270 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class USpriteComponent*                            Sprite;                                           		// 0x0278 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UFluidInfluenceComponent*                    InfluenceComponent;                               		// 0x0280 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bActive : 1;                                      		// 0x0288 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bToggled : 1;                                     		// 0x0288 (0x0004) [0x0000000100000020] [0x00000002] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventReplicatedEvent ( struct FName VarName );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

// Class Engine.FluidSurfaceActor
// 0x0012 (0x0280 - 0x026E)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                   		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class UParticleSystem*                             ProjectileEntryEffect;                            		// 0x0278 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
	void eventTakeDamage ( float Damage, class AController* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, struct FTraceHitInfo HitInfo, class AActor* DamageCauser );
};

// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x0280 - 0x0280)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FluidInfluenceComponent
// 0x0065 (0x0289 - 0x0224)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	class AFluidSurfaceActor*                          FluidActor;                                       		// 0x0224 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AFluidSurfaceActor*                          CurrentFluidActor;                                		// 0x022C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              MaxDistance;                                      		// 0x0234 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WaveStrength;                                     		// 0x0238 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              WaveFrequency;                                    		// 0x023C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              WavePhase;                                        		// 0x0240 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              WaveRadius;                                       		// 0x0244 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RaindropAreaRadius;                               		// 0x0248 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RaindropRadius;                                   		// 0x024C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RaindropStrength;                                 		// 0x0250 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RaindropRate;                                     		// 0x0254 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FlowSpeed;                                        		// 0x0258 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	int                                                FlowNumRipples;                                   		// 0x025C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FlowSideMotionRadius;                             		// 0x0260 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FlowWaveRadius;                                   		// 0x0264 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FlowStrength;                                     		// 0x0268 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FlowFrequency;                                    		// 0x026C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SphereOuterRadius;                                		// 0x0270 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SphereInnerRadius;                                		// 0x0274 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              SphereStrength;                                   		// 0x0278 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              CurrentAngle;                                     		// 0x027C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              CurrentTimer;                                     		// 0x0280 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bActive : 1;                                      		// 0x0284 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      RaindropFillEntireFluid : 1;                      		// 0x0284 (0x0004) [0x0000000200000001] [0x00000002] ( CPF_Edit | CPF_Interp )
	unsigned long                                      bIsToggleTriggered : 1;                           		// 0x0284 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned char                                      InfluenceType;                                    		// 0x0288 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FluidSurfaceComponent
// 0x00FC (0x0320 - 0x0224)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	struct TArray<unsigned char>                       ClampMap;                                         		// 0x0224 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<class UShadowMap2D*>                 ShadowMaps;                                       		// 0x0234 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct UFluidSurfaceComponent_FLightMapRef         LightMap;                                         		// 0x0244 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    FluidSimulation;                                  		// 0x024C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x0254 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     SimulationPosition;                               		// 0x0270 (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	struct FVector                                     DetailPosition;                                   		// 0x027C (0x000C) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	class UMaterialInterface*                          FluidMaterial;                                    		// 0x0288 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetSimulation;                                 		// 0x0290 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class AActor*                                      TargetDetail;                                     		// 0x0298 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightMapResolution;                               		// 0x02A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SimulationQuadsX;                                 		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SimulationQuadsY;                                 		// 0x02A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacing;                                      		// 0x02AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GridSpacingLowRes;                                		// 0x02B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              GPUTessellationFactor;                            		// 0x02B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidDamping;                                     		// 0x02B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidTravelSpeed;                                 		// 0x02BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidHeightScale;                                 		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidUpdateRate;                                  		// 0x02C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceImpact;                                      		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ForceContinuous;                                  		// 0x02CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightingContrast;                                 		// 0x02D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DeactivationDistance;                             		// 0x02D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                DetailResolution;                                 		// 0x02D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailSize;                                       		// 0x02DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailDamping;                                    		// 0x02E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTravelSpeed;                                		// 0x02E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailTransfer;                                   		// 0x02E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailHeightScale;                                		// 0x02EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DetailUpdateRate;                                 		// 0x02F0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NormalLength;                                     		// 0x02F4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleSpeed;                                  		// 0x02F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleFrequency;                              		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TestRippleRadius;                                 		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FluidWidth;                                       		// 0x0304 (0x0004) [0x0000000000000000]              
	float                                              FluidHeight;                                      		// 0x0308 (0x0004) [0x0000000000000000]              
	float                                              TestRippleTime;                                   		// 0x030C (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              TestRippleAngle;                                  		// 0x0310 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              DeactivationTimer;                                		// 0x0314 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	float                                              ViewDistance;                                     		// 0x0318 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      EnableSimulation : 1;                             		// 0x031C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableDetail : 1;                                 		// 0x031C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bPause : 1;                                       		// 0x031C (0x0004) [0x0000000000002001] [0x00000004] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationNormals : 1;                       		// 0x031C (0x0004) [0x0000000000002001] [0x00000008] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowSimulationPosition : 1;                      		// 0x031C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bShowDetailNormals : 1;                           		// 0x031C (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bShowDetailPosition : 1;                          		// 0x031C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bShowFluidSimulation : 1;                         		// 0x031C (0x0004) [0x0000000000002001] [0x00000080] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bShowFluidDetail : 1;                             		// 0x031C (0x0004) [0x0000000000002001] [0x00000100] ( CPF_Edit | CPF_Transient )
	unsigned long                                      bTestRipple : 1;                                  		// 0x031C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bTestRippleCenterOnDetail : 1;                    		// 0x031C (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetSimulationPosition ( struct FVector WorldPos );
	void SetDetailPosition ( struct FVector WorldPos );
	void ApplyForce ( struct FVector WorldPos, float Strength, float Radius, unsigned long bImpulse );
};

// Class Engine.SpeedTreeActor
// 0x000A (0x0278 - 0x026E)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpeedTreeComponent
// 0x00F0 (0x0314 - 0x0224)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x0224 (0x000C) MISSED OFFSET
	struct FMatrix                                     RotationOnlyMatrix;                               		// 0x0230 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FSpeedTreeStaticLight>        StaticLights;                                     		// 0x0270 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct USpeedTreeComponent_FLightMapRef            BranchLightMap;                                   		// 0x0280 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            FrondLightMap;                                    		// 0x0288 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            LeafMeshLightMap;                                 		// 0x0290 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            LeafCardLightMap;                                 		// 0x0298 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct USpeedTreeComponent_FLightMapRef            BillboardLightMap;                                		// 0x02A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                		// 0x02A8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	class USpeedTree*                                  SpeedTree;                                        		// 0x02C4 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UMaterialInterface*                          Branch1Material;                                  		// 0x02CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch2Material;                                  		// 0x02D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x02DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafCardMaterial;                                 		// 0x02E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMeshMaterial;                                 		// 0x02EC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x02F4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lod3DStart;                                       		// 0x02FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Lod3DEnd;                                         		// 0x0300 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodBillboardStart;                                		// 0x0304 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodBillboardEnd;                                  		// 0x0308 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LodLevelOverride;                                 		// 0x030C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseLeafCards : 1;                                		// 0x0310 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseLeafMeshes : 1;                               		// 0x0310 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseBranches : 1;                                 		// 0x0310 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseFronds : 1;                                   		// 0x0310 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bUseBillboards : 1;                               		// 0x0310 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetMaterial ( unsigned char MeshType, class UMaterialInterface* Material );
	class UMaterialInterface* GetMaterial ( unsigned char MeshType );
};

// Class Engine.SpeedTreeActorFactory
// 0x0008 (0x0094 - 0x008C)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                        		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpeedTreeComponentFactory
// 0x0008 (0x006C - 0x0064)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                               		// 0x0064 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpeedTree
// 0x0060 (0x00C0 - 0x0060)
class USpeedTree : public UObject
{
public:
	struct FPointer                                    SRH;                                              		// 0x0060 (0x0008) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	struct FGuid                                       LightingGuid;                                     		// 0x0068 (0x0010) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     WindDirection;                                    		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch1Material;                                  		// 0x0084 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          Branch2Material;                                  		// 0x008C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          FrondMaterial;                                    		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafCardMaterial;                                 		// 0x009C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          LeafMeshMaterial;                                 		// 0x00A4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          BillboardMaterial;                                		// 0x00AC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              LeafStaticShadowOpacity;                          		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindStrength;                                     		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLegacySpeedTree : 1;                             		// 0x00BC (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LensFlareSource
// 0x000E (0x027C - 0x026E)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                    		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bCurrentlyActive : 1;                             		// 0x0278 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetActorParameter ( struct FName ParameterName, class AActor* Param );
	void SetExtColorParameter ( struct FName ParameterName, float Red, float Green, float Blue, float Alpha );
	void SetColorParameter ( struct FName ParameterName, struct FLinearColor Param );
	void SetVectorParameter ( struct FName ParameterName, struct FVector Param );
	void SetFloatParameter ( struct FName ParameterName, float Param );
	void OnToggle ( class USeqAct_Toggle* Action );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

// Class Engine.LensFlareComponent
// 0x004C (0x0270 - 0x0224)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x0224 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FLinearColor                                SourceColor;                                      		// 0x022C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class ULensFlare*                                  Template;                                         		// 0x023C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0244 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x024C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightRadiusComponent*                   PreviewRadius;                                    		// 0x0254 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              OuterCone;                                        		// 0x025C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              InnerCone;                                        		// 0x0260 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ConeFudgeFactor;                                  		// 0x0264 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              Radius;                                           		// 0x0268 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bAutoActivate : 1;                                		// 0x026C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bIsActive : 1;                                    		// 0x026C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bHasTranslucency : 1;                             		// 0x026C (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bHasUnlitTranslucency : 1;                        		// 0x026C (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bHasUnlitDistortion : 1;                          		// 0x026C (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned long                                      bUsesSceneColor : 1;                              		// 0x026C (0x0004) [0x0000000000002000] [0x00000020] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetIsActive ( unsigned long bInIsActive );
	void SetSourceColor ( struct FLinearColor InSourceColor );
	void SetTemplate ( class ULensFlare* NewTemplate );
};

// Class Engine.LensFlare
// 0x0226 (0x0286 - 0x0060)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                    		// 0x0060 (0x0194) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FRawDistributionFloat                       ScreenPercentageMap;                              		// 0x01F4 (0x0024) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FLensFlareElement>            Reflections;                                      		// 0x0218 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FBox                                        FixedRelativeBoundingBox;                         		// 0x0228 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    ThumbnailAngle;                                   		// 0x0244 (0x000C) [0x0000000000000000]              
	class UStaticMesh*                                 SourceMesh;                                       		// 0x0250 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UInterpCurveEdSetup*                         CurveEdSetup;                                     		// 0x0258 (0x0008) [0x0000000000000008]              ( CPF_ExportObject )
	class UTexture2D*                                  ThumbnailImage;                                   		// 0x0260 (0x0008) [0x0000000000000000]              
	float                                              OuterCone;                                        		// 0x0268 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              InnerCone;                                        		// 0x026C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ConeFudgeFactor;                                  		// 0x0270 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Radius;                                           		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ReflectionCount;                                  		// 0x0278 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              ThumbnailDistance;                                		// 0x027C (0x0004) [0x0000000000000000]              
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                 		// 0x0280 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRenderDebugLines : 1;                            		// 0x0280 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ThumbnailImageOutOfDate : 1;                      		// 0x0280 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned char                                      SourceDPG;                                        		// 0x0284 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      ReflectionsDPG;                                   		// 0x0285 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TextureFlipBook
// 0x0046 (0x01B9 - 0x0173)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0174 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FPointer                                    ReleaseResourcesFence;                            		// 0x017C (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TimeIntoMovie;                                    		// 0x0184 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              TimeSinceLastFrame;                               		// 0x0188 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              HorizontalScale;                                  		// 0x018C (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              VerticalScale;                                    		// 0x0190 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                HorizontalImages;                                 		// 0x0194 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                VerticalImages;                                   		// 0x0198 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameRate;                                        		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FrameTime;                                        		// 0x01A0 (0x0004) [0x0000000000000000]              
	int                                                CurrentRow;                                       		// 0x01A4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CurrentColumn;                                    		// 0x01A8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetU;                                    		// 0x01AC (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              RenderOffsetV;                                    		// 0x01B0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bPaused : 1;                                      		// 0x01B4 (0x0004) [0x0000000000000002] [0x00000001] ( CPF_Const )
	unsigned long                                      bStopped : 1;                                     		// 0x01B4 (0x0004) [0x0000000000000002] [0x00000002] ( CPF_Const )
	unsigned long                                      bLooping : 1;                                     		// 0x01B4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bAutoPlay : 1;                                    		// 0x01B4 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      FBMethod;                                         		// 0x01B8 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetCurrentFrame ( int Row, int Col );
	void Stop ( );
	void Pause ( );
	void Play ( );
};

// Class Engine.Texture2DComposite
// 0x0014 (0x00D4 - 0x00C0)
class UTexture2DComposite : public UTexture
{
public:
	struct TArray<struct FSourceTexture2DRegion>       SourceRegions;                                    		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxTextureSize;                                   		// 0x00D0 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ResetSourceRegions ( );
	void UpdateCompositeTexture ( int NumMipsToGenerate );
	bool SourceTexturesFullyStreamedIn ( );
};

// Class Engine.Texture2DDynamic
// 0x0011 (0x00D1 - 0x00C0)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                            		// 0x00C0 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                SizeY;                                            		// 0x00C4 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                NumMips;                                          		// 0x00C8 (0x0004) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      bIsResolveTarget : 1;                             		// 0x00CC (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x00D0 (0x0001) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UTexture2DDynamic* Create ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
	void Init ( int InSizeX, int InSizeY, unsigned char InFormat, unsigned long InIsResolveTarget );
};

// Class Engine.TextureCube
// 0x0041 (0x0101 - 0x00C0)
class UTextureCube : public UTexture
{
public:
	class UTexture2D*                                  FacePosX;                                         		// 0x00C0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegX;                                         		// 0x00C8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosY;                                         		// 0x00D0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegY;                                         		// 0x00D8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FacePosZ;                                         		// 0x00E0 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UTexture2D*                                  FaceNegZ;                                         		// 0x00E8 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeX;                                            		// 0x00F0 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                SizeY;                                            		// 0x00F4 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                NumMips;                                          		// 0x00F8 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bIsCubemapValid : 1;                              		// 0x00FC (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x0100 (0x0001) [0x0000000000002002]              ( CPF_Const | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TextureMovie
// 0x0090 (0x0150 - 0x00C0)
class UTextureMovie : public UTexture
{
public:
	struct FUntypedBulkData_Mirror                     Data;                                             		// 0x00C0 (0x0040) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UClass*                                      DecoderClass;                                     		// 0x0100 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FPointer                                    ReleaseCodecFence;                                		// 0x0108 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       TextureFileCacheGuid;                             		// 0x0110 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FGuid                                       TFCFileGuid;                                      		// 0x0120 (0x0010) [0x0000000000000000]              
	class UCodecMovie*                                 Decoder;                                          		// 0x0130 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FName                                       TextureFileCacheName;                             		// 0x0138 (0x0008) [0x0000000000000000]              
	int                                                SizeX;                                            		// 0x0140 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                SizeY;                                            		// 0x0144 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      Paused : 1;                                       		// 0x0148 (0x0004) [0x0000000000002002] [0x00000001] ( CPF_Const | CPF_Transient )
	unsigned long                                      Stopped : 1;                                      		// 0x0148 (0x0004) [0x0000000000002002] [0x00000002] ( CPF_Const | CPF_Transient )
	unsigned long                                      Looping : 1;                                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      AutoPlay : 1;                                     		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      m_bIsDroppingFrames : 1;                          		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x014C (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x014D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x014E (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      MovieStreamSource;                                		// 0x014F (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Stop ( );
	void Pause ( );
	void Play ( );
};

// Class Engine.TextureRenderTarget
// 0x0004 (0x00C4 - 0x00C0)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                             		// 0x00C0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNeedsTwoCopies : 1;                              		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bRenderOnce : 1;                                  		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.TextureRenderTarget2D
// 0x001F (0x00E3 - 0x00C4)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	struct FLinearColor                                ClearColor;                                       		// 0x00C4 (0x0010) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeX;                                            		// 0x00D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SizeY;                                            		// 0x00D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceLinearGamma : 1;                            		// 0x00DC (0x0004) [0x0000000000002003] [0x00000001] ( CPF_Edit | CPF_Const | CPF_Transient )
	unsigned char                                      Format;                                           		// 0x00E0 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      AddressX;                                         		// 0x00E1 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      AddressY;                                         		// 0x00E2 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	class UTextureRenderTarget2D* Create ( int InSizeX, int InSizeY, unsigned char InFormat, struct FLinearColor InClearColor, unsigned long bOnlyRenderOnce );
};

// Class Engine.ScriptedTexture
// 0x0015 (0x00F8 - 0x00E3)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x00E4 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	unsigned long                                      bNeedsUpdate : 1;                                 		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSkipNextClear : 1;                               		// 0x00F4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Render ( class UCanvas* C );
};

// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00C9 - 0x00C4)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                            		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      Format;                                           		// 0x00C8 (0x0001) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.AudioDevice
// 0x02CD (0x0335 - 0x0068)
class UAudioDevice : public USubsystem
{
public:
	struct FQWord                                      CurrentTick;                                      		// 0x0068 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeStartTime;                               		// 0x0070 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInStartTime;                         		// 0x0078 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeFadeInEndTime;                           		// 0x0080 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     SoundModeEndTime;                                 		// 0x0088 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorStartTime;                                		// 0x0090 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorEndTime;                                  		// 0x0098 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorEndTime;                                  		// 0x00A0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     InteriorLPFEndTime;                               		// 0x00A8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FDouble                                     ExteriorLPFEndTime;                               		// 0x00B0 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FPointer>                     Sources;                                          		// 0x00B8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FPointer>                     FreeSources;                                      		// 0x00C8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FListener>                    Listeners;                                        		// 0x00D8 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UAudioComponent*>              AudioComponents;                                  		// 0x00E8 (0x0010) [0x000000000448200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    CommonAudioPool;                                  		// 0x00F8 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    Effects;                                          		// 0x0100 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FPointer                                    TextToSpeech;                                     		// 0x0108 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0110 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.WaveInstanceSourceMap
	unsigned char                                      UnknownData01[ 0x48 ];                            		// 0x0158 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundModes
	unsigned char                                      UnknownData02[ 0x48 ];                            		// 0x01A0 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundClasses
	unsigned char                                      UnknownData03[ 0x48 ];                            		// 0x01E8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SourceSoundClasses
	unsigned char                                      UnknownData04[ 0x48 ];                            		// 0x0230 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.CurrentSoundClasses
	unsigned char                                      UnknownData05[ 0x48 ];                            		// 0x0278 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DestinationSoundClasses
	struct FInteriorSettings                           ListenerInteriorSettings;                         		// 0x02C0 (0x0024) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct FName                                       BaseSoundModeName;                                		// 0x02E4 (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class USoundMode*                                  CurrentMode;                                      		// 0x02EC (0x0008) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	class UAudioComponent*                             TestAudioComponent;                               		// 0x02F4 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	int                                                MaxChannels;                                      		// 0x02FC (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                CommonAudioPoolSize;                              		// 0x0300 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LowPassFilterResonance;                           		// 0x0304 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinCompressedDurationEditor;                      		// 0x0308 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              MinCompressedDurationGame;                        		// 0x030C (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	int                                                CommonAudioPoolFreeBytes;                         		// 0x0310 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ListenerVolumeIndex;                              		// 0x0314 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorVolumeInterp;                             		// 0x0318 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              InteriorLPFInterp;                                		// 0x031C (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorVolumeInterp;                             		// 0x0320 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              ExteriorLPFInterp;                                		// 0x0324 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	float                                              TransientMasterVolume;                            		// 0x0328 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastUpdateTime;                                   		// 0x032C (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bGameWasTicking : 1;                              		// 0x0330 (0x0004) [0x0000000000001002] [0x00000001] ( CPF_Const | CPF_Native )
	unsigned char                                      DebugState;                                       		// 0x0334 (0x0001) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool SetSoundMode ( struct FName NewMode );
};

// Class Engine.SoundClass
// 0x0078 (0x00D8 - 0x0060)
class USoundClass : public UObject
{
public:
	struct TArray<struct FName>                        ChildClassNames;                                  		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0070 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SoundClass.EditorData
	struct FSoundClassProperties                       Properties;                                       		// 0x00B8 (0x001C) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bIsChild : 1;                                     		// 0x00D4 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SoundMode
// 0x0048 (0x00A8 - 0x0060)
class USoundMode : public UObject
{
public:
	struct FAudioEQEffect                              EQSettings;                                       		// 0x0060 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct TArray<struct FSoundClassAdjuster>          SoundClassEffects;                                		// 0x0084 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              InitialDelay;                                     		// 0x0094 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeInTime;                                       		// 0x0098 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Duration;                                         		// 0x009C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FadeOutTime;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bApplyEQ : 1;                                     		// 0x00A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DebugCameraController
// 0x0046 (0x07CC - 0x0786)
class ADebugCameraController : public APlayerController
{
public:
	struct FName                                       PrimaryKey;                                       		// 0x0788 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       SecondaryKey;                                     		// 0x0790 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	struct FName                                       UnselectKey;                                      		// 0x0798 (0x0008) [0x0000000000044000]              ( CPF_Config | CPF_GlobalConfig )
	class APlayerController*                           OryginalControllerRef;                            		// 0x07A0 (0x0008) [0x0000000000000000]              
	class UPlayer*                                     OryginalPlayer;                                   		// 0x07A8 (0x0008) [0x0000000000000000]              
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x07B0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class AActor*                                      SelectedActor;                                    		// 0x07B8 (0x0008) [0x0000000000000000]              
	class UPrimitiveComponent*                         SelectedComponent;                                		// 0x07C0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	unsigned long                                      bShowSelectedInfo : 1;                            		// 0x07C8 (0x0004) [0x0000000000044000] [0x00000001] ( CPF_Config | CPF_GlobalConfig )
	unsigned long                                      bIsFrozenRendering : 1;                           		// 0x07C8 (0x0004) [0x0000000000000000] [0x00000002] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString ConsoleCommand ( struct FString Command, unsigned long bWriteToLog );
	void ShowDebugSelectedInfo ( );
	bool NativeInputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
	void DisableDebugCamera ( );
	void NormalSpeed ( );
	void MoreSpeed ( );
	void SetFreezeRendering ( );
	void OnDeactivate ( class APlayerController* PC );
	void OnActivate ( class APlayerController* PC );
	void eventPostBeginPlay ( );
	void Unselect ( );
	void SecondarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
	void PrimarySelect ( struct FVector HitLoc, struct FVector HitNormal, struct FTraceHitInfo HitInfo );
};

// Class Engine.MatineePawn
// 0x0000 (0x0584 - 0x0584)
class AMatineePawn : public APawn
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Scout
// 0x0074 (0x05F8 - 0x0584)
class AScout : public APawn
{
public:
	struct TArray<struct FPathSizeInfo>                PathSizes;                                        		// 0x0584 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      DefaultReachSpecClass;                            		// 0x0594 (0x0008) [0x0000000000000000]              
	float                                              TestJumpZ;                                        		// 0x059C (0x0004) [0x0000000000000000]              
	float                                              TestGroundSpeed;                                  		// 0x05A0 (0x0004) [0x0000000000000000]              
	float                                              TestMaxFallSpeed;                                 		// 0x05A4 (0x0004) [0x0000000000000000]              
	float                                              TestFallSpeed;                                    		// 0x05A8 (0x0004) [0x0000000000000000]              
	float                                              MaxLandingVelocity;                               		// 0x05AC (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                MinNumPlayerStarts;                               		// 0x05B0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_StepSize;                              		// 0x05B4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EntityHalfHeight;                      		// 0x05B8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_StartingHeightOffset;                  		// 0x05BC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxDropHeight;                         		// 0x05C0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxStepHeight;                         		// 0x05C4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_VertZDeltaSnapThresh;                  		// 0x05C8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinPolyArea;                           		// 0x05CC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_BorderBackfill_CheckDist;              		// 0x05D0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotAreaThreshold;              		// 0x05D4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotSmallArea;                  		// 0x05D8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinMergeDotLargeArea;                  		// 0x05DC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxPolyHeight;                         		// 0x05E0 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_HeightMergeThreshold;                  		// 0x05E4 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_EdgeMaxDelta;                          		// 0x05E8 (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MaxGroundCheckSize;                    		// 0x05EC (0x0004) [0x0000000000000000]              
	float                                              NavMeshGen_MinEdgeLength;                         		// 0x05F0 (0x0004) [0x0000000000000000]              
	unsigned long                                      bHightlightOneWayReachSpecs : 1;                  		// 0x05F4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreBeginPlay ( );
};

// Class Engine.LightVolume
// 0x0000 (0x02B4 - 0x02B4)
class ALightVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Light
// 0x000E (0x027C - 0x026E)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                   		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0278 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
};

// Class Engine.DirectionalLight
// 0x0000 (0x027C - 0x027C)
class ADirectionalLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DirectionalLightToggleable
// 0x0000 (0x027C - 0x027C)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DominantDirectionalLight
// 0x0000 (0x027C - 0x027C)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PointLight
// 0x0000 (0x027C - 0x027C)
class APointLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DominantPointLight
// 0x0000 (0x027C - 0x027C)
class ADominantPointLight : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PointLightMovable
// 0x0000 (0x027C - 0x027C)
class APointLightMovable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PointLightToggleable
// 0x0000 (0x027C - 0x027C)
class APointLightToggleable : public APointLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct APointLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};

// Class Engine.SkyLight
// 0x0000 (0x027C - 0x027C)
class ASkyLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkyLightToggleable
// 0x0000 (0x027C - 0x027C)
class ASkyLightToggleable : public ASkyLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpotLight
// 0x0000 (0x027C - 0x027C)
class ASpotLight : public ALight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DominantSpotLight
// 0x0000 (0x027C - 0x027C)
class ADominantSpotLight : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpotLightMovable
// 0x0000 (0x027C - 0x027C)
class ASpotLightMovable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpotLightToggleable
// 0x0000 (0x027C - 0x027C)
class ASpotLightToggleable : public ASpotLight
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ApplyCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	void CreateCheckpointRecord ( struct ASpotLightToggleable_FCheckpointRecord* Record );
	bool ShouldSaveForCheckpoint ( );
};

// Class Engine.StaticLightCollectionActor
// 0x0014 (0x0290 - 0x027C)
class AStaticLightCollectionActor : public ALight
{
public:
	struct TArray<class ULightComponent*>              LightComponents;                                  		// 0x027C (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	int                                                MaxLightComponents;                               		// 0x028C (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightComponent
// 0x014E (0x01D4 - 0x0086)
class ULightComponent : public UActorComponent
{
public:
	struct FPointer                                    SceneInfo;                                        		// 0x0088 (0x0008) [0x0000000001003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     WorldToLight;                                     		// 0x0090 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FMatrix                                     LightToWorld;                                     		// 0x00D0 (0x0040) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FGuid                                       LightGuid;                                        		// 0x0110 (0x0010) [0x0000000000200002]              ( CPF_Const )
	struct FGuid                                       LightmapGuid;                                     		// 0x0120 (0x0010) [0x0000000000200002]              ( CPF_Const )
	float                                              Brightness;                                       		// 0x0130 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	struct FColor                                      LightColor;                                       		// 0x0134 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	class ULightFunction*                              Function;                                         		// 0x0138 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              LightEnv_BouncedLightBrightness;                  		// 0x0140 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	struct FColor                                      LightEnv_BouncedModulationColor;                  		// 0x0144 (0x0004) [0x0000000200000003]              ( CPF_Edit | CPF_Const | CPF_Interp )
	unsigned long                                      bEnabled : 1;                                     		// 0x0148 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastShadows : 1;                                  		// 0x0148 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastStaticShadows : 1;                            		// 0x0148 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      CastDynamicShadows : 1;                           		// 0x0148 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bCastCompositeShadow : 1;                         		// 0x0148 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bAffectCompositeShadowDirection : 1;              		// 0x0148 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bNonModulatedSelfShadowing : 1;                   		// 0x0148 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bSelfShadowOnly : 1;                              		// 0x0148 (0x0004) [0x0000000200000001] [0x00000080] ( CPF_Edit | CPF_Interp )
	unsigned long                                      bAllowPreShadow : 1;                              		// 0x0148 (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bForceDynamicLight : 1;                           		// 0x0148 (0x0004) [0x0000000000000003] [0x00000200] ( CPF_Edit | CPF_Const )
	unsigned long                                      UseDirectLightMap : 1;                            		// 0x0148 (0x0004) [0x0000000000000003] [0x00000400] ( CPF_Edit | CPF_Const )
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;           		// 0x0148 (0x0004) [0x0000000000000002] [0x00000800] ( CPF_Const )
	unsigned long                                      bOnlyAffectSameAndSpecifiedLevels : 1;            		// 0x0148 (0x0004) [0x0000000000000003] [0x00001000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;		// 0x0148 (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseVolumes : 1;                                  		// 0x0148 (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bRenderLightShafts : 1;                           		// 0x0148 (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bPrecomputedLightingIsValid : 1;                  		// 0x0148 (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bAllowedToBypassLightEnvironments : 1;            		// 0x0148 (0x0004) [0x0000000000000001] [0x00020000] ( CPF_Edit )
	unsigned long                                      bCullModulatedShadowOnSubject : 1;                		// 0x0148 (0x0004) [0x0000000000000000] [0x00040000] 
	unsigned long                                      bAllowDynamicProjective : 1;                      		// 0x0148 (0x0004) [0x0000000000000001] [0x00080000] ( CPF_Edit )
	unsigned long                                      bForceDynamicLightEnvUpdate : 1;                  		// 0x0148 (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x014C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct TArray<struct FName>                        OtherLevelsToAffect;                              		// 0x0154 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FLightingChannelContainer                   LightingChannels;                                 		// 0x0164 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct TArray<struct FPointer>                     InclusionConvexVolumes;                           		// 0x0168 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FPointer>                     ExclusionConvexVolumes;                           		// 0x0178 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      LightAffectsClassification;                       		// 0x0188 (0x0001) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	unsigned char                                      LightShadowMode;                                  		// 0x0189 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                ModShadowColor;                                   		// 0x018C (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x019C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x01A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LightListIndex;                                   		// 0x01A4 (0x0004) [0x0000000000201002]              ( CPF_Const | CPF_Native )
	unsigned char                                      ShadowProjectionTechnique;                        		// 0x01A8 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x01A9 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinShadowResolution;                              		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x01B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionDepthRange;                              		// 0x01B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScale;                                       		// 0x01BC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              BloomThreshold;                                   		// 0x01C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BloomScreenBlendThreshold;                        		// 0x01C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BloomTint;                                        		// 0x01C8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RadialBlurPercent;                                		// 0x01CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OcclusionMaskDarkness;                            		// 0x01D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdatePropertyOcclusionMaskDarkness ( );
	void OnUpdatePropertyBloomTint ( );
	void OnUpdatePropertyBloomScale ( );
	void UpdateLightShaftParameters ( );
	void UpdateColorAndBrightness ( );
	struct FVector GetDirection ( );
	struct FVector GetOrigin ( );
	void SetLightProperties ( float NewBrightness, struct FColor NewLightColor, class ULightFunction* NewLightFunction );
	void SetEnabled ( unsigned long bSetEnabled );
};

// Class Engine.DirectionalLightComponent
// 0x0018 (0x01EC - 0x01D4)
class UDirectionalLightComponent : public ULightComponent
{
public:
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                		// 0x01D4 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	float                                              TraceDistance;                                    		// 0x01E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WholeSceneDynamicShadowRadius;                    		// 0x01E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
};

// Class Engine.DominantDirectionalLightComponent
// 0x00C4 (0x02B0 - 0x01EC)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	unsigned char                                      UnknownData00[ 0x4 ];                             		// 0x01EC (0x0004) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x01F0 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x02A0 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PointLightComponent
// 0x0090 (0x0264 - 0x01D4)
class UPointLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x01D4 (0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x01E0 (0x0040) [0x0000000000000002]              ( CPF_Const )
	struct FLightmassPointLightSettings                LightmassSettings;                                		// 0x0220 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     Translation;                                      		// 0x0230 (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                               		// 0x023C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                         		// 0x0244 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              ShadowRadiusMultiplier;                           		// 0x024C (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              Radius;                                           		// 0x0250 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              FalloffExponent;                                  		// 0x0254 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              ShadowFalloffExponent;                            		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowFalloffRadius;                           		// 0x025C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bAllowedInBasePass : 1;                           		// 0x0260 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdatePropertyBrightness ( );
	void OnUpdatePropertyLightColor ( );
	void SetTranslation ( struct FVector NewTranslation );
};

// Class Engine.DominantPointLightComponent
// 0x0000 (0x0264 - 0x0264)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SpotLightComponent
// 0x001C (0x0280 - 0x0264)
class USpotLightComponent : public UPointLightComponent
{
public:
	class UDrawLightConeComponent*                     PreviewInnerCone;                                 		// 0x0264 (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDrawLightConeComponent*                     PreviewOuterCone;                                 		// 0x026C (0x0008) [0x000000000408000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              InnerConeAngle;                                   		// 0x0274 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OuterConeAngle;                                   		// 0x0278 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightShaftConeAngle;                              		// 0x027C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DominantSpotLightComponent
// 0x00C0 (0x0340 - 0x0280)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:
	struct FDominantShadowInfo                         DominantLightShadowInfo;                          		// 0x0280 (0x00B0) [0x0000000000000002]              ( CPF_Const )
	struct FArray_Mirror                               DominantLightShadowMap;                           		// 0x0330 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkyLightComponent
// 0x0008 (0x01DC - 0x01D4)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                  		// 0x01D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FColor                                      LowerColor;                                       		// 0x01D8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SphericalHarmonicLightComponent
// 0x00A0 (0x0274 - 0x01D4)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData00[ 0xC ];                             		// 0x01D4 (0x000C) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                       		// 0x01E0 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bRenderBeforeModShadows : 1;                      		// 0x0270 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightEnvironmentComponent
// 0x001E (0x00A4 - 0x0086)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	struct TArray<class UPrimitiveComponent*>          AffectedComponents;                               		// 0x0088 (0x0010) [0x0000000004482008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	class ULightComponent*                             AffectingDominantLight;                           		// 0x0098 (0x0008) [0x000000000408200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x00A0 (0x0004) [0x0040000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bForceNonCompositeDynamicLights : 1;              		// 0x00A0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsEnabled ( );
	void SetEnabled ( unsigned long bNewEnabled );
};

// Class Engine.DynamicLightEnvironmentComponent
// 0x00BF (0x0163 - 0x00A4)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct TArray<class ULightComponent*>              OverriddenLightComponents;                        		// 0x00A4 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    State;                                            		// 0x00B4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FBoxSphereBounds                            OverriddenBounds;                                 		// 0x00BC (0x001C) [0x0000000000000000]              
	struct FLinearColor                                AmbientShadowColor;                               		// 0x00D8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientGlow;                                      		// 0x00E8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                MaxModulatedShadowColor;                          		// 0x00F8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     AmbientShadowSourceDirection;                     		// 0x0108 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InvisibleUpdateTime;                              		// 0x0114 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinTimeBetweenFullUpdates;                        		// 0x0118 (0x0004) [0x0040000000000001]              ( CPF_Edit )
	float                                              ShadowInterpolationSpeed;                         		// 0x011C (0x0004) [0x0000000000000000]              
	int                                                NumVolumeVisibilitySamples;                       		// 0x0120 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDesaturation;                                		// 0x0124 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightDistance;                                    		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ShadowDistance;                                   		// 0x012C (0x0004) [0x0040000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutTime;                             		// 0x0130 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ModShadowFadeoutExponent;                         		// 0x0134 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              DominantShadowTransitionStartDistance;            		// 0x0138 (0x0004) [0x0000000000000000]              
	float                                              DominantShadowTransitionEndDistance;              		// 0x013C (0x0004) [0x0000000000000000]              
	int                                                MinShadowResolution;                              		// 0x0140 (0x0004) [0x0040000000000001]              ( CPF_Edit )
	int                                                MaxShadowResolution;                              		// 0x0144 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                ShadowFadeResolution;                             		// 0x0148 (0x0004) [0x0040000000000001]              ( CPF_Edit )
	float                                              BouncedLightingFactor;                            		// 0x014C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BouncedLightingDesaturation;                      		// 0x0150 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MinShadowAngle;                                   		// 0x0154 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FLightingChannelContainer                   OverriddenLightingChannels;                       		// 0x0158 (0x0004) [0x0000000000000000]              
	unsigned long                                      bCastShadows : 1;                                 		// 0x015C (0x0004) [0x0040000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;           		// 0x015C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bForceCompositeAllLights : 1;                     		// 0x015C (0x0004) [0x0000000000000002] [0x00000004] ( CPF_Const )
	unsigned long                                      bDynamic : 1;                                     		// 0x015C (0x0004) [0x0040000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSynthesizeDirectionalLight : 1;                  		// 0x015C (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSynthesizeSHLight : 1;                           		// 0x015C (0x0004) [0x0040000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bForceAllowLightEnvSphericalHarmonicLights : 1;   		// 0x015C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRequiresNonLatentUpdates : 1;                    		// 0x015C (0x0004) [0x0040000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                 		// 0x015C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bIsCharacterLightEnvironment : 1;                 		// 0x015C (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bOverrideOwnerLightingChannels : 1;               		// 0x015C (0x0004) [0x0000000000000000] [0x00000400] 
	unsigned long                                      bShadowBouncedLight : 1;                          		// 0x015C (0x0004) [0x0040000000000001] [0x00000800] ( CPF_Edit )
	unsigned char                                      ShadowFilterQuality;                              		// 0x0160 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      LightShadowMode;                                  		// 0x0161 (0x0001) [0x0040000000000001]              ( CPF_Edit )
	unsigned char                                      BoundsMethod;                                     		// 0x0162 (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ParticleLightEnvironmentComponent
// 0x0009 (0x016C - 0x0163)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int                                                ReferenceCount;                                   		// 0x0164 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	unsigned long                                      bAllowDLESharing : 1;                             		// 0x0168 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawLightConeComponent
// 0x0000 (0x0234 - 0x0234)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x023C - 0x023C)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LightFunction
// 0x0014 (0x0074 - 0x0060)
class ULightFunction : public UObject
{
public:
	struct FVector                                     Scale;                                            		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          SourceMaterial;                                   		// 0x006C (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkeletalMeshComponent
// 0x05C8 (0x0820 - 0x0258)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x0258 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                          		// 0x0260 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0268 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UAnimNode*                                   Animations;                                       		// 0x0270 (0x0008) [0x000000000440000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FAnimTickEntry>               AnimTickArray;                                    		// 0x0278 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0288 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                             		// 0x0290 (0x0008) [0x000000000440200A]              ( CPF_Const | CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline )
	struct FPointer                                    ApexClothing;                                     		// 0x0298 (0x0008) [0x0000000000003001]              ( CPF_Edit | CPF_Native | CPF_Transient )
	float                                              PhysicsWeight;                                    		// 0x02A0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              GlobalAnimRateScale;                              		// 0x02A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    MeshObject;                                       		// 0x02A8 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FColor                                      WireframeColor;                                   		// 0x02B0 (0x0004) [0x0040000000000001]              ( CPF_Edit )
	struct TArray<struct FMatrix>                      SpaceBases;                                       		// 0x02B4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FBoneAtom>                    LocalAtoms;                                       		// 0x02C4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<unsigned char>                       RequiredBones;                                    		// 0x02D4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<unsigned char>                       ComposeOrderedRequiredBones;                      		// 0x02E4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ComposeOrderedRequiredBonesSkelControlIndex;      		// 0x02F4 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 PhysicsBodySetupToBoneIndex;                      		// 0x02F8 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class USkeletalMeshComponent*                      ParentAnimComponent;                              		// 0x0308 (0x0008) [0x000000000408000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct TArray<int>                                 ParentBoneMap;                                    		// 0x0310 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     AnimSets;                                         		// 0x0320 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<class UAnimSet*>                     TemporarySavedAnimSets;                           		// 0x0330 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<class UMorphTargetSet*>              MorphSets;                                        		// 0x0340 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FActiveMorph>                 ActiveMorphs;                                     		// 0x0350 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FActiveMorph>                 ActiveCurveMorphs;                                		// 0x0360 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x0370 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMeshComponent.MorphTargetIndexMap
	struct TArray<struct FAttachment>                  Attachments;                                      		// 0x03B8 (0x0010) [0x0000000000680002]              ( CPF_Const | CPF_Component | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       SkelControlIndex;                                 		// 0x03C8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<unsigned char>                       PostPhysSkelControlIndex;                         		// 0x03D8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	int                                                ForcedLodModel;                                   		// 0x03E8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinLodModel;                                      		// 0x03EC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                PredictedLODLevel;                                		// 0x03F0 (0x0004) [0x0000000000000000]              
	int                                                OldPredictedLODLevel;                             		// 0x03F4 (0x0004) [0x0000000000000000]              
	float                                              MaxDistanceFactor;                                		// 0x03F8 (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bForceWireframe;                                  		// 0x03FC (0x0004) [0x0000000000000000]              
	int                                                bForceRefpose;                                    		// 0x0400 (0x0004) [0x0000000000000000]              
	int                                                bOldForceRefPose;                                 		// 0x0404 (0x0004) [0x0000000000000000]              
	unsigned long                                      bNoSkeletonUpdate : 1;                            		// 0x0408 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	int                                                bDisplayBones;                                    		// 0x040C (0x0004) [0x0000000000000000]              
	int                                                bShowPrePhysBones;                                		// 0x0410 (0x0004) [0x0000000000000000]              
	int                                                bHideSkin;                                        		// 0x0414 (0x0004) [0x0000000000000000]              
	int                                                bForceRawOffset;                                  		// 0x0418 (0x0004) [0x0000000000000000]              
	int                                                bIgnoreControllers;                               		// 0x041C (0x0004) [0x0000000000000000]              
	int                                                bTransformFromAnimParent;                         		// 0x0420 (0x0004) [0x0000000000000000]              
	int                                                TickTag;                                          		// 0x0424 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                CachedAtomsTag;                                   		// 0x0428 (0x0004) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	int                                                bUseSingleBodyPhysics;                            		// 0x042C (0x0004) [0x0000000000000002]              ( CPF_Const )
	int                                                bRequiredBonesUpToDate;                           		// 0x0430 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              MinDistFactorForKinematicUpdate;                  		// 0x0434 (0x0004) [0x0000000000000000]              
	int                                                FramesPhysicsAsleep;                              		// 0x0438 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;              		// 0x043C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                  		// 0x043C (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                   		// 0x043C (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;            		// 0x043C (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bTickAnimNodesWhenNotRendered : 1;                		// 0x043C (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;           		// 0x043C (0x0004) [0x0000000000000002] [0x00000020] ( CPF_Const )
	unsigned long                                      bForceDiscardRootMotion : 1;                      		// 0x043C (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bRootMotionModeChangeNotify : 1;                  		// 0x043C (0x0004) [0x0000000000000000] [0x00000080] 
	unsigned long                                      bRootMotionExtractedNotify : 1;                   		// 0x043C (0x0004) [0x0000000000000000] [0x00000100] 
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;       		// 0x043C (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned long                                      bAnimTreeInitialised : 1;                         		// 0x043C (0x0004) [0x0000000000002002] [0x00000400] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAnimSetUpdated : 1;                              		// 0x043C (0x0004) [0x0000000000002000] [0x00000800] ( CPF_Transient )
	unsigned long                                      bForceMeshObjectUpdate : 1;                       		// 0x043C (0x0004) [0x0000000000002000] [0x00001000] ( CPF_Transient )
	unsigned long                                      bHasPhysicsAssetInstance : 1;                     		// 0x043C (0x0004) [0x0000000000000003] [0x00002000] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;           		// 0x043C (0x0004) [0x0000000000000001] [0x00004000] ( CPF_Edit )
	unsigned long                                      bUpdateJointsFromAnimation : 1;                   		// 0x043C (0x0004) [0x0000000000000001] [0x00008000] ( CPF_Edit )
	unsigned long                                      bSkelCompFixed : 1;                               		// 0x043C (0x0004) [0x0000000000000002] [0x00010000] ( CPF_Const )
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                      		// 0x043C (0x0004) [0x0000000000000002] [0x00020000] ( CPF_Const )
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                		// 0x043C (0x0004) [0x0000000000000001] [0x00040000] ( CPF_Edit )
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                  		// 0x043C (0x0004) [0x0000000000002000] [0x00080000] ( CPF_Transient )
	unsigned long                                      bPerBoneVolumeEffects : 1;                        		// 0x043C (0x0004) [0x0000000000000001] [0x00100000] ( CPF_Edit )
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;            		// 0x043C (0x0004) [0x0000000000000001] [0x00200000] ( CPF_Edit )
	unsigned long                                      bUseRawData : 1;                                  		// 0x043C (0x0004) [0x0000000000000002] [0x00400000] ( CPF_Const )
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;              		// 0x043C (0x0004) [0x0000000000000000] [0x00800000] 
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;           		// 0x043C (0x0004) [0x0000000000000000] [0x01000000] 
	unsigned long                                      bNeedsToDeleteHitMask : 1;                        		// 0x043C (0x0004) [0x0000000000002002] [0x02000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bBioComputedValidPose : 1;                        		// 0x043C (0x0004) [0x0000000000002002] [0x04000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bBioAllowResubmitPose : 1;                        		// 0x043C (0x0004) [0x0000000000002002] [0x08000000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bPauseAnims : 1;                                  		// 0x043C (0x0004) [0x0000000000000000] [0x10000000] 
	unsigned long                                      bChartDistanceFactor : 1;                         		// 0x043C (0x0004) [0x0000000000000000] [0x20000000] 
	unsigned long                                      bEnableLineCheckWithBounds : 1;                   		// 0x043C (0x0004) [0x0000000000000000] [0x40000000] 
	unsigned long                                      bIsFrozen : 1;                                    		// 0x043C (0x0004) [0x0000000000000000] [0x80000000] 
	unsigned long                                      bFrozenMeshProcessed : 1;                         		// 0x0440 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bMeshShouldBeFrozen : 1;                          		// 0x0440 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FVector                                     LineCheckBoundsScale;                             		// 0x0444 (0x000C) [0x0000000000000000]              
	struct TArray<struct FBioActorReBase>              BioActorsToReBase;                                		// 0x0450 (0x0010) [0x0000000000482002]              ( CPF_Const | CPF_Transient | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FBioActorAttach>              BioActorsToAttach;                                		// 0x0460 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothSimulation : 1;                       		// 0x0470 (0x0004) [0x0040000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bDisableClothCollision : 1;                       		// 0x0470 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothFrozen : 1;                                 		// 0x0470 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;              		// 0x0470 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bClothAwakeOnStartup : 1;                         		// 0x0470 (0x0004) [0x0040000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bClothBaseVelClamp : 1;                           		// 0x0470 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bClothBaseVelInterp : 1;                          		// 0x0470 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                  		// 0x0470 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bIsClothOnStaticObject : 1;                       		// 0x0470 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bUpdatedFixedClothVerts : 1;                      		// 0x0470 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bClothPositionalDampening : 1;                    		// 0x0470 (0x0004) [0x0000000000000001] [0x00000400] ( CPF_Edit )
	unsigned long                                      bClothWindRelativeToOwner : 1;                    		// 0x0470 (0x0004) [0x0000000000000001] [0x00000800] ( CPF_Edit )
	unsigned long                                      bRecentlyRendered : 1;                            		// 0x0470 (0x0004) [0x0000000000000000] [0x00001000] 
	unsigned long                                      bCacheAnimSequenceNodes : 1;                      		// 0x0470 (0x0004) [0x0000000000000000] [0x00002000] 
	unsigned long                                      bAlwaysUpdateMeshObject : 1;                      		// 0x0470 (0x0004) [0x0000000000000000] [0x00004000] 
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                   		// 0x0470 (0x0004) [0x0000000000002002] [0x00008000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                    		// 0x0470 (0x0004) [0x0000000000002002] [0x00010000] ( CPF_Const | CPF_Transient )
	unsigned long                                      bUpdateComposeSkeletonPasses : 1;                 		// 0x0470 (0x0004) [0x0000000000002002] [0x00020000] ( CPF_Const | CPF_Transient )
	struct TArray<unsigned long>                       HiddenMaterials;                                  		// 0x0474 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FBonePair>                    InstanceVertexWeightBones;                        		// 0x0484 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     FrozenLocalToWorldPos;                            		// 0x0494 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FRotator                                    FrozenLocalToWorldRot;                            		// 0x04A0 (0x000C) [0x0000000000000002]              ( CPF_Const )
	struct FVector                                     ClothExternalForce;                               		// 0x04AC (0x000C) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     ClothWind;                                        		// 0x04B8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ClothBaseVelClampRange;                           		// 0x04C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendWeight;                                 		// 0x04D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothDynamicBlendWeight;                          		// 0x04D4 (0x0004) [0x0000000000000000]              
	float                                              ClothBlendMinDistanceFactor;                      		// 0x04D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothBlendMaxDistanceFactor;                      		// 0x04DC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampRange;                                  		// 0x04E0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampRange;                                  		// 0x04EC (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MinPosDampScale;                                  		// 0x04F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     MaxPosDampScale;                                  		// 0x0504 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    ClothSim;                                         		// 0x0510 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SceneIndex;                                       		// 0x0518 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FVector>                      ClothMeshPosData;                                 		// 0x051C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FVector>                      ClothMeshNormalData;                              		// 0x052C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 ClothMeshIndexData;                               		// 0x053C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshVerts;                                		// 0x054C (0x0004) [0x0000000000000000]              
	int                                                NumClothMeshIndices;                              		// 0x0550 (0x0004) [0x0000000000000000]              
	struct TArray<int>                                 ClothMeshParentData;                              		// 0x0554 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumClothMeshParentIndices;                        		// 0x0564 (0x0004) [0x0000000000000000]              
	struct TArray<struct FVector>                      ClothMeshWeldedPosData;                           		// 0x0568 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FVector>                      ClothMeshWeldedNormalData;                        		// 0x0578 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 ClothMeshWeldedIndexData;                         		// 0x0588 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                ClothDirtyBufferFlag;                             		// 0x0598 (0x0004) [0x0000000000000000]              
	unsigned char                                      ClothRBChannel;                                   		// 0x059C (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                       		// 0x05A0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothForceScale;                                  		// 0x05A4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothImpulseScale;                                		// 0x05A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothAttachmentTearFactor;                        		// 0x05AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothUseCompartment : 1;                         		// 0x05B0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              MinDistanceForClothReset;                         		// 0x05B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector                                     LastClothLocation;                                		// 0x05B8 (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    SoftBodySim;                                      		// 0x05C4 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	int                                                SoftBodySceneIndex;                               		// 0x05CC (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bEnableSoftBodySimulation : 1;                    		// 0x05D0 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct TArray<struct FVector>                      SoftBodyTetraPosData;                             		// 0x05D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 SoftBodyTetraIndexData;                           		// 0x05E4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                NumSoftBodyTetraVerts;                            		// 0x05F4 (0x0004) [0x0000000000000000]              
	int                                                NumSoftBodyTetraIndices;                          		// 0x05F8 (0x0004) [0x0000000000000000]              
	float                                              SoftBodyImpulseScale;                             		// 0x05FC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSoftBodyFrozen : 1;                              		// 0x0600 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;           		// 0x0600 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                      		// 0x0600 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bSoftBodyUseCompartment : 1;                      		// 0x0600 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned char                                      SoftBodyRBChannel;                                		// 0x0604 (0x0001) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                    		// 0x0608 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FPointer                                    SoftBodyASVPlane;                                 		// 0x060C (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	class UMaterial*                                   LimitMaterial;                                    		// 0x0614 (0x0008) [0x0000000000000000]              
	unsigned char                                      UnknownData01[ 0x4 ];                             		// 0x061C (0x0004) MISSED OFFSET
	struct FBoneAtom                                   RootMotionDelta;                                  		// 0x0620 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionVelocity;                               		// 0x0640 (0x000C) [0x0000000000002000]              ( CPF_Transient )
	struct FVector                                     RootBoneTranslation;                              		// 0x064C (0x000C) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FVector                                     RootMotionAccelScale;                             		// 0x0658 (0x000C) [0x0000000000000000]              
	unsigned char                                      RootMotionMode;                                   		// 0x0664 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      PreviousRMM;                                      		// 0x0665 (0x0001) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      PendingRMM;                                       		// 0x0666 (0x0001) [0x0000000000000000]              
	unsigned char                                      OldPendingRMM;                                    		// 0x0667 (0x0001) [0x0000000000000000]              
	int                                                bRMMOneFrameDelay;                                		// 0x0668 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned char                                      RootMotionRotationMode;                           		// 0x066C (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      FaceFXBlendMode;                                  		// 0x066D (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct FPointer                                    FaceFXActorInstance;                              		// 0x0670 (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	int                                                bFaceFXDisabled;                                  		// 0x0678 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FaceFXTimer;                                      		// 0x067C (0x0004) [0x0000000000000000]              
	struct TArray<struct FBoneAtom>                    FaceBlendAtoms;                                   		// 0x0680 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<float>                               MaterialBlendValues;                              		// 0x0690 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	unsigned long                                      bDoClipToClipBlend : 1;                           		// 0x06A0 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bNotThisFrame : 1;                                		// 0x06A0 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bSetNotThisFrame : 1;                             		// 0x06A0 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBioFaceFXOpenInMatinee : 1;                      		// 0x06A0 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	float                                              FaceBlendTimer;                                   		// 0x06A4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FaceBlendSpeed;                                   		// 0x06A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              FaceBlendInterpolator;                            		// 0x06AC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bOverrideParentSkeleton : 1;                      		// 0x06B0 (0x0004) [0x0000000000000000] [0x00000001] 
	struct FName                                       nmOverrideStartBoneName;                          		// 0x06B4 (0x0008) [0x0000000000000000]              
	struct TArray<struct FBoneOverrideInfo>            OverrideBones;                                    		// 0x06BC (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	int                                                MinAutoLODLevel;                                  		// 0x06CC (0x0004) [0x0000000000000000]              
	class UAudioComponent*                             CachedFaceFXAudioComp;                            		// 0x06D0 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	struct TArray<unsigned char>                       BoneVisibility;                                   		// 0x06D8 (0x0010) [0x0000000000402002]              ( CPF_Const | CPF_Transient | CPF_NeedCtorLink )
	unsigned char                                      UnknownData02[ 0x8 ];                             		// 0x06E8 (0x0008) MISSED OFFSET
	struct FBoneAtom                                   LocalToWorldBoneAtom;                             		// 0x06F0 (0x0020) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	float                                              ProgressiveDrawingFraction;                       		// 0x0710 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	class UWwiseBaseSoundObject*                       WwiseSound;                                       		// 0x0714 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct TArray<struct FBoneDrivenMaterialParameter> BoneMaterialDrivers;                              		// 0x071C (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	unsigned long                                      m_bBioAreRigidBodiesAwake : 1;                    		// 0x072C (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bCachedRootBodyOffset : 1;                        		// 0x072C (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	struct FMatrix                                     RootBodyOffsetInvTM;                              		// 0x0730 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      m_bStopFaceFXAnim : 1;                            		// 0x0770 (0x0004) [0x0000000000003000] [0x00000001] ( CPF_Native | CPF_Transient )
	unsigned char                                      UnknownData03[ 0xC ];                             		// 0x0774 (0x000C) MISSED OFFSET
	struct FMatrix                                     WoundEllipse[ 0x2 ];                              		// 0x0780 (0x0080) [0x0000000000002000]              ( CPF_Transient )
	class UFaceFXAsset*                                m_pBioFaceFXAsset;                                		// 0x0800 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct TArray<unsigned char>                       m_aBioFFXBoneMap;                                 		// 0x0808 (0x0010) [0x0000000000003000]              ( CPF_Native | CPF_Transient )
	unsigned long                                      m_bBioFFXShouldRelinkBoneMap : 1;                 		// 0x0818 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bSupportsLowDetailProxyRendering : 1;             		// 0x0818 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	int                                                LowDetailLODIndex;                                		// 0x081C (0x0004) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void BreakConstraint ( struct FVector impulse, struct FVector HitLocation, struct FName InBoneName, unsigned long bVelChange );
	void SkelMeshCompOnParticleSystemFinished ( class UParticleSystemComponent* PSC );
	void eventPlayParticleEffect ( class UAnimNotify_PlayParticleEffect* AnimNotifyData );
	void StopAnim ( );
	void PlayAnim ( struct FName AnimName, float Duration, unsigned long bLoop, unsigned long bRestartIfAlreadyPlaying, float StartTime, unsigned long bPlayBackwards );
	void SFXFlushAsyncWork ( );
	void ShowMaterialSection ( int MaterialID, unsigned long bShow );
	bool RefSkeletonsMatch ( class USkeletalMesh* SkelMeshA, class USkeletalMesh* SkelMeshB );
	void CalculateRootBodyOffsetInvTM ( );
	void BioEnableFaceFX ( unsigned long bEnable );
	bool IsFrozen ( );
	void SetFrozen ( unsigned long bFrozen );
	void UpdateMeshForBrokenConstraints ( );
	void UnHideBoneByName ( struct FName BoneName );
	void HideBoneByName ( struct FName BoneName, unsigned char PhysBodyOption );
	bool IsBoneHidden ( int BoneIndex );
	void UnHideBone ( int BoneIndex );
	void HideBone ( int BoneIndex, unsigned char PhysBodyOption );
	void SetFaceFXRegisterEx ( struct FString RegName, unsigned char RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration );
	void SetFaceFXRegister ( struct FString RegName, float RegVal, unsigned char RegOp, float InterpDuration );
	float GetFaceFXRegister ( struct FString RegName );
	void DeclareFaceFXRegister ( struct FString RegName );
	bool IsPlayingFaceFXAnim ( struct FName nmAnimName );
	void StopFaceFXAnim ( unsigned long bBioRampDown );
	bool PlayFaceFXAnim ( class UFaceFXAnimSet* FaceFXAnimSetRef, struct FString AnimName, struct FString GroupName, class USoundCue* SoundCueToPlay );
	void ToggleInstanceVertexWeights ( unsigned long bEnable );
	void UpdateInstanceVertexWeightBones ( struct TArray<struct FBonePair> BonePairs );
	int FindInstanceVertexweightBonePair ( struct FBonePair Bones );
	void RemoveInstanceVertexWeightBoneParented ( struct FName BoneName );
	void AddInstanceVertexWeightBoneParented ( struct FName BoneName, unsigned long bPairWithParent );
	bool GetBonesWithinRadius ( struct FVector Origin, float Radius, int TraceFlags, struct TArray<struct FName>* out_Bones );
	void UpdateAnimations ( );
	void ForceSkelUpdate ( );
	void UpdateRBBonesFromSpaceBases ( unsigned long bMoveUnfixedBodies, unsigned long bTeleport );
	void SetHasPhysicsAssetInstance ( unsigned long bHasInstance );
	class URB_BodyInstance* FindBodyInstanceNamed ( struct FName BoneName );
	struct FName FindConstraintBoneName ( int ConstraintIndex );
	int FindConstraintIndex ( struct FName ConstraintName );
	void InitMorphTargets ( );
	void InitSkelControls ( );
	void UpdateParentBoneMap ( );
	void SetParentAnimComponent ( class USkeletalMeshComponent* NewParentAnimComp );
	void SetAnimTreeTemplate ( class UAnimTree* NewTemplate );
	struct FVector GetClosestCollidingBoneLocation ( struct FVector TestLocation, unsigned long bCheckZeroExtent, unsigned long bCheckNonZeroExtent );
	void BioFindClosestBones ( struct FVector vTestLocation, float fRadius, unsigned long bOutsideRadius, struct TArray<struct FName>* BoneNames );
	struct FName FindClosestBone ( struct FVector TestLocation, float IgnoreScale, struct FVector* BoneLocation );
	void TransformFromBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	void TransformToBoneSpace ( struct FName BoneName, struct FVector InPosition, struct FRotator InRotation, struct FVector* OutPosition, struct FRotator* OutRotation );
	struct FVector GetBoneAxis ( struct FName BoneName, unsigned char Axis );
	struct FVector GetRefPosePosition ( int BoneIndex );
	bool BoneIsChildOf ( struct FName BoneName, struct FName ParentBoneName );
	void GetBoneNames ( struct TArray<struct FName>* BoneNames );
	int GetParentBoneIndex ( int BoneIndex );
	struct FName GetParentBone ( struct FName BoneName );
	struct FMatrix GetBoneMatrix ( int BoneIndex );
	struct FName GetBoneName ( int BoneIndex );
	int MatchRefBone ( struct FName BoneName );
	struct FVector GetBoneLocation ( struct FName BoneName, int Space );
	struct FQuat GetBoneQuaternion ( struct FName BoneName, int Space );
	class UMorphNodeBase* FindMorphNode ( struct FName InNodeName );
	class USkelControlBase* FindSkelControl ( struct FName InControlName );
	void AllAnimNodes ( class UClass* BaseClass, class UAnimNode** Node );
	class UAnimNode* FindAnimNode ( struct FName InNodeName );
	class UMorphTarget* FindMorphTarget ( struct FName MorphTargetName );
	float GetAnimLength ( struct FName AnimSeqName );
	float GetAnimRateByDuration ( struct FName AnimSeqName, float Duration );
	void RestoreSavedAnimSets ( );
	void SaveAnimSets ( );
	struct FString BioGetDetails ( );
	class UAnimSequence* FindAnimSequence ( struct FName AnimSeqName );
	void WakeSoftBody ( );
	void SetSoftBodyFrozen ( unsigned long bNewFrozen );
	void UpdateSoftBodyParams ( );
	void SetClothValidBounds ( struct FVector ClothValidBoundsMin, struct FVector ClothValidBoundsMax );
	void EnableClothValidBounds ( unsigned long IfEnableClothValidBounds );
	void AttachClothToCollidingShapes ( unsigned long AttatchTwoWay, unsigned long AttachTearable );
	void SetClothVelocity ( struct FVector VelocityOffSet );
	void SetClothPosition ( struct FVector ClothOffSet );
	void SetClothSleep ( unsigned long IfClothSleep );
	void SetClothThickness ( float ClothThickness );
	void SetClothTearFactor ( float ClothTearFactor );
	void SetClothStretchingStiffness ( float ClothStretchingStiffness );
	void SetClothSolverIterations ( int ClothSolverIterations );
	void SetClothSleepLinearVelocity ( float ClothSleepLinearVelocity );
	void SetClothPressure ( float ClothPressure );
	void SetClothFriction ( float ClothFriction );
	void SetClothFlags ( int ClothFlags );
	void SetClothDampingCoefficient ( float ClothDampingCoefficient );
	void SetClothCollisionResponseCoefficient ( float ClothCollisionResponseCoefficient );
	void SetClothBendingStiffness ( float ClothBendingStiffness );
	void SetClothAttachmentTearFactor ( float ClothAttachTearFactor );
	void SetClothAttachmentResponseCoefficient ( float ClothAttachmentResponseCoefficient );
	class UFaceFXAsset* GetBioFaceFXAsset ( );
	float GetClothThickness ( );
	float GetClothTearFactor ( );
	float GetClothStretchingStiffness ( );
	int GetClothSolverIterations ( );
	float GetClothSleepLinearVelocity ( );
	float GetClothPressure ( );
	float GetClothFriction ( );
	int GetClothFlags ( );
	float GetClothDampingCoefficient ( );
	float GetClothCollisionResponseCoefficient ( );
	float GetClothBendingStiffness ( );
	float GetClothAttachmentTearFactor ( );
	float GetClothAttachmentResponseCoefficient ( );
	void ResetClothVertsToRefPose ( );
	void SetAttachClothVertsToBaseBody ( unsigned long bAttachVerts );
	void SetClothExternalForce ( struct FVector InForce );
	void UpdateClothParams ( );
	void SetClothFrozen ( unsigned long bNewFrozen );
	void SetEnableClothSimulation ( unsigned long bInEnable );
	void SetForceRefPose ( unsigned long bNewForceRefPose );
	void SetPhysicsAsset ( class UPhysicsAsset* NewPhysicsAsset, unsigned long bForceReInit );
	void SetSkeletalMesh ( class USkeletalMesh* NewMesh, unsigned long bKeepSpaceBases, unsigned long InbAlwaysUseInstanceWeights );
	bool BioComputeAttachedComponentPositionRotation ( class UActorComponent* Component, struct FName BoneName, struct FVector* Position, struct FRotator* Orientation );
	void AttachedComponents ( class UClass* BaseClass, class UActorComponent** OutComponent );
	bool IsComponentAttached ( class UActorComponent* Component, struct FName BoneName );
	class UActorComponent* FindComponentAttachedToBone ( struct FName InBoneName );
	struct FName GetSocketBoneName ( struct FName InSocketName );
	class USkeletalMeshSocket* GetSocketByName ( struct FName InSocketName );
	bool GetSocketWorldLocationAndRotation ( struct FName InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation );
	void AttachComponentToSocket ( class UActorComponent* Component, struct FName SocketName );
	void DetachComponent ( class UActorComponent* Component );
	void AttachComponent ( class UActorComponent* Component, struct FName BoneName, struct FVector RelativeLocation, struct FRotator RelativeRotation, struct FVector RelativeScale );
};

// Class Engine.SkeletalMesh
// 0x03C4 (0x0424 - 0x0060)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                           		// 0x0060 (0x001C) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<class UMaterialInterface*>           Materials;                                        		// 0x007C (0x0010) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct TArray<class UApexClothingAsset*>           ClothingAssets;                                   		// 0x008C (0x0010) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FVector                                     Origin;                                           		// 0x009C (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct FRotator                                    RotOrigin;                                        		// 0x00A8 (0x000C) [0x0000000000001003]              ( CPF_Edit | CPF_Const | CPF_Native )
	struct TArray<int>                                 RefSkeleton;                                      		// 0x00B4 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                SkeletalDepth;                                    		// 0x00C4 (0x0004) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned char                                      UnknownData00[ 0x48 ];                            		// 0x00C8 (0x0048) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                        		// 0x0110 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FBoneTransform>               RefBasesInvMatrix;                                		// 0x0120 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<struct FBoneMirrorInfo>              SkelMirrorTable;                                  		// 0x0130 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	unsigned char                                      SkelMirrorAxis;                                   		// 0x0140 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      SkelMirrorFlipAxis;                               		// 0x0141 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	struct TArray<class USkeletalMeshSocket*>          Sockets;                                          		// 0x0144 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      BoneBreakNames;                                   		// 0x0154 (0x0010) [0x0000000000021003]              ( CPF_Edit | CPF_Const | CPF_Native | CPF_EditConst )
	struct TArray<struct FSkeletalMeshLODInfo>         LODInfo;                                          		// 0x0164 (0x0010) [0x0000000000400041]              ( CPF_Edit | CPF_EditConstArray | CPF_NeedCtorLink )
	struct TArray<struct FName>                        PerPolyCollisionBones;                            		// 0x0174 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<struct FName>                        AddToParentPerPolyCollisionBone;                  		// 0x0184 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct TArray<int>                                 PerPolyBoneKDOPs;                                 		// 0x0194 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                     		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseSimpleLineCollision : 1;                      		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseSimpleBoxCollision : 1;                       		// 0x01A4 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bForceCPUSkinning : 1;                            		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseFullPrecisionUVs : 1;                         		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUsePackedPosition : 1;                           		// 0x01A4 (0x0004) [0x0000000000000003] [0x00000020] ( CPF_Edit | CPF_Const )
	int                                                LODBiasPC;                                        		// 0x01A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasPS3;                                       		// 0x01AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                LODBiasXbox360;                                   		// 0x01B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct TArray<struct FPointer>                     ClothMesh;                                        		// 0x01B4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<float>                               ClothMeshScale;                                   		// 0x01C4 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<int>                                 ClothToGraphicsVertMap;                           		// 0x01D4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<float>                               ClothMovementScale;                               		// 0x01E4 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned char                                      ClothMovementScaleGenMode;                        		// 0x01F4 (0x0001) [0x0000000000000001]              ( CPF_Edit )
	float                                              ClothToAnimMeshMaxDist;                           		// 0x01F8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bLimitClothToAnimMesh : 1;                        		// 0x01FC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct TArray<int>                                 ClothWeldingMap;                                  		// 0x0200 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	int                                                ClothWeldingDomain;                               		// 0x0210 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct TArray<int>                                 ClothWeldedIndices;                               		// 0x0214 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bForceNoWelding : 1;                              		// 0x0224 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	int                                                NumFreeClothVerts;                                		// 0x0228 (0x0004) [0x0000000000000002]              ( CPF_Const )
	struct TArray<int>                                 ClothIndexBuffer;                                 		// 0x022C (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FName>                        ClothBones;                                       		// 0x023C (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	int                                                ClothHierarchyLevels;                             		// 0x024C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothBendConstraints : 1;                  		// 0x0250 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothDamping : 1;                          		// 0x0250 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseClothCOMDamping : 1;                          		// 0x0250 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              ClothStretchStiffness;                            		// 0x0254 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothBendStiffness;                               		// 0x0258 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDensity;                                     		// 0x025C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothThickness;                                   		// 0x0260 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothDamping;                                     		// 0x0264 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothIterations;                                  		// 0x0268 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothHierarchicalIterations;                      		// 0x026C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothFriction;                                    		// 0x0270 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothRelativeGridSpacing;                         		// 0x0274 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothPressure;                                    		// 0x0278 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothCollisionResponseCoefficient;                		// 0x027C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentResponseCoefficient;               		// 0x0280 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothAttachmentTearFactor;                        		// 0x0284 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothSleepLinearVelocity;                         		// 0x0288 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              HardStretchLimitFactor;                           		// 0x028C (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bHardStretchLimit : 1;                            		// 0x0290 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;             		// 0x0290 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothSelfCollision : 1;                    		// 0x0290 (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothPressure : 1;                         		// 0x0290 (0x0004) [0x0000000000000003] [0x00000008] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTwoWayCollision : 1;                  		// 0x0290 (0x0004) [0x0000000000000003] [0x00000010] ( CPF_Edit | CPF_Const )
	struct TArray<struct FClothSpecialBoneInfo>        ClothSpecialBones;                                		// 0x0294 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	unsigned long                                      bEnableClothLineChecks : 1;                       		// 0x02A4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bClothMetal : 1;                                  		// 0x02A4 (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	float                                              ClothMetalImpulseThreshold;                       		// 0x02A8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalPenetrationDepth;                       		// 0x02AC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              ClothMetalMaxDeformationDistance;                 		// 0x02B0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableClothTearing : 1;                          		// 0x02B4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              ClothTearFactor;                                  		// 0x02B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                ClothTearReserve;                                 		// 0x02BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableValidBounds : 1;                           		// 0x02C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	struct FVector                                     ValidBoundsMin;                                   		// 0x02C4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ValidBoundsMax;                                   		// 0x02D0 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FMap_Mirror                                 ClothTornTriMap;                                  		// 0x02DC (0x0048) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	struct TArray<int>                                 SoftBodySurfaceToGraphicsVertMap;                 		// 0x0324 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 SoftBodySurfaceIndices;                           		// 0x0334 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FVector>                      SoftBodyTetraVertsUnscaled;                       		// 0x0344 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<int>                                 SoftBodyTetraIndices;                             		// 0x0354 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FSoftBodyTetraLink>           SoftBodyTetraLinks;                               		// 0x0364 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FPointer>                     CachedSoftBodyMeshes;                             		// 0x0374 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<float>                               CachedSoftBodyMeshScales;                         		// 0x0384 (0x0010) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct TArray<struct FName>                        SoftBodyBones;                                    		// 0x0394 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct TArray<struct FSoftBodySpecialBoneInfo>     SoftBodySpecialBones;                             		// 0x03A4 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	float                                              SoftBodyVolumeStiffness;                          		// 0x03B4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyStretchingStiffness;                      		// 0x03B8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDensity;                                  		// 0x03BC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyParticleRadius;                           		// 0x03C0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDamping;                                  		// 0x03C4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySolverIterations;                         		// 0x03C8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyFriction;                                 		// 0x03CC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyRelativeGridSpacing;                      		// 0x03D0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodySleepLinearVelocity;                      		// 0x03D4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                 		// 0x03D8 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentResponse;                       		// 0x03DC (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyCollisionResponse;                        		// 0x03E0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	float                                              SoftBodyDetailLevel;                              		// 0x03E4 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	int                                                SoftBodySubdivisionLevel;                         		// 0x03E8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bSoftBodyIsoSurface : 1;                          		// 0x03EC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyDamping : 1;                       		// 0x03EC (0x0004) [0x0000000000000003] [0x00000002] ( CPF_Edit | CPF_Const )
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                       		// 0x03EC (0x0004) [0x0000000000000003] [0x00000004] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentThreshold;                      		// 0x03F0 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;               		// 0x03F4 (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	float                                              SoftBodyAttachmentTearFactor;                     		// 0x03F8 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                    		// 0x03FC (0x0004) [0x0000000000000003] [0x00000001] ( CPF_Edit | CPF_Const )
	struct TArray<unsigned long>                       GraphicsIndexIsCloth;                             		// 0x0400 (0x0010) [0x0000000000001002]              ( CPF_Const | CPF_Native )
	int                                                ReleaseResourcesFence;                            		// 0x0410 (0x0004) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FQWord                                      SkelMeshRUID;                                     		// 0x0414 (0x0008) [0x0000000000002002]              ( CPF_Const | CPF_Transient )
	struct FPointer                                    m_VerticesPerBone;                                		// 0x041C (0x0008) [0x0000000000003000]              ( CPF_Native | CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SkeletalMeshSocket
// 0x003C (0x009C - 0x0060)
class USkeletalMeshSocket : public UObject
{
public:
	struct FVector                                     RelativeLocation;                                 		// 0x0060 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x006C (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     RelativeScale;                                    		// 0x0078 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       SocketName;                                       		// 0x0084 (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       BoneName;                                         		// 0x008C (0x0008) [0x0000000000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	struct FName                                       SupermodelName;                                   		// 0x0094 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SplineActor
// 0x006A (0x02D8 - 0x026E)
class ASplineActor : public AActor
{
public:
	struct FInterpCurveFloat                           SplineVelocityOverTime;                           		// 0x0270 (0x0014) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<struct FSplineConnection>            Connections;                                      		// 0x0284 (0x0010) [0x0000000000480000]              ( CPF_Component | CPF_NeedCtorLink )
	struct TArray<class ASplineActor*>                 LinksFrom;                                        		// 0x0294 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     SplineActorTangent;                               		// 0x02A4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class ASplineActor*                                nextOrdered;                                      		// 0x02B0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                prevOrdered;                                      		// 0x02B8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class ASplineActor*                                previousPath;                                     		// 0x02C0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FColor                                      SplineColor;                                      		// 0x02C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                bestPathWeight;                                   		// 0x02CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	int                                                visitedWeight;                                    		// 0x02D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisableDestination : 1;                          		// 0x02D4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAlreadyVisited : 1;                              		// 0x02D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* inAction );
	void GetAllConnectedSplineActors ( struct TArray<class ASplineActor*>* OutSet );
	bool FindSplinePathTo ( class ASplineActor* Goal, struct TArray<class ASplineActor*>* OutRoute );
	class ASplineActor* GetBestConnectionInDirection ( struct FVector DesiredDir, unsigned long bUseLinksFrom );
	class ASplineActor* GetRandomConnection ( unsigned long bUseLinksFrom );
	void BreakAllConnectionsFrom ( );
	void BreakAllConnections ( );
	void BreakConnectionTo ( class ASplineActor* NextActor );
	class ASplineActor* FindTargetForComponent ( class USplineComponent* SplineComp );
	class USplineComponent* FindSplineComponentTo ( class ASplineActor* NextActor );
	bool IsConnectedTo ( class ASplineActor* NextActor, unsigned long bCheckForDisableDestination );
	void AddConnectionTo ( class ASplineActor* NextActor );
	void UpdateConnectedSplineComponents ( unsigned long bFinish );
	void UpdateSplineComponents ( unsigned long bFinish );
	struct FVector GetWorldSpaceTangent ( );
};

// Class Engine.SplineLoftActor
// 0x004C (0x0324 - 0x02D8)
class ASplineLoftActor : public ASplineActor
{
public:
	struct TArray<class USplineMeshComponent*>         SplineMeshComps;                                  		// 0x02D8 (0x0010) [0x0000000004480008]              ( CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class UMaterialInterface*>           DeformMeshMaterials;                              		// 0x02E8 (0x0010) [0x0000000000400003]              ( CPF_Edit | CPF_Const | CPF_NeedCtorLink )
	struct FVector                                     WorldXDir;                                        		// 0x02F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UStaticMesh*                                 DeformMesh;                                       		// 0x0304 (0x0008) [0x0000000000000003]              ( CPF_Edit | CPF_Const )
	struct FVector2D                                   Offset;                                           		// 0x030C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleX;                                           		// 0x0314 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ScaleY;                                           		// 0x0318 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              Roll;                                             		// 0x031C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSmoothInterpRollAndScale : 1;                    		// 0x0320 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bAcceptsLights : 1;                               		// 0x0320 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bCastShadow : 1;                                  		// 0x0320 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearLoftMesh ( );
};

// Class Engine.SplineComponent
// 0x003C (0x0260 - 0x0224)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                       		// 0x0224 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FInterpCurveFloat                           SplineReparamTable;                               		// 0x0238 (0x0014) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              SplineCurviness;                                  		// 0x024C (0x0004) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	struct FColor                                      SplineColor;                                      		// 0x0250 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineDrawRes;                                    		// 0x0254 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              SplineArrowSize;                                  		// 0x0258 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSplineDisabled : 1;                              		// 0x025C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FVector GetTangentAtDistanceAlongSpline ( float Distance );
	struct FVector GetLocationAtDistanceAlongSpline ( float Distance );
	float GetSplineLength ( );
	void UpdateSplineReparamTable ( );
	void UpdateSplineCurviness ( );
};

// Class Engine.ProcBuilding
// 0x0094 (0x0348 - 0x02B4)
class AProcBuilding : public AVolume
{
public:
	struct TArray<struct FPBMeshCompInfo>              BuildingMeshCompInfos;                            		// 0x02B4 (0x0010) [0x00000000004A0003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FPBFracMeshCompInfo>          BuildingFracMeshCompInfos;                        		// 0x02C4 (0x0010) [0x00000000004A0003]              ( CPF_Edit | CPF_Const | CPF_EditConst | CPF_Component | CPF_NeedCtorLink )
	struct TArray<class UStaticMeshComponent*>         LODMeshComps;                                     		// 0x02D4 (0x0010) [0x000000000448000A]              ( CPF_Const | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	struct TArray<class AProcBuilding*>                OverlappingBuildings;                             		// 0x02E4 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<struct FPBMaterialParam>             BuildingMaterialParams;                           		// 0x02F4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UStaticMeshComponent*                        SimpleMeshComp;                                   		// 0x0304 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	class AStaticMeshActor*                            LowLODPersistentActor;                            		// 0x030C (0x0008) [0x0000100000020003]              ( CPF_Edit | CPF_Const | CPF_EditConst )
	class UStaticMeshComponent*                        CurrentSimpleMeshComp;                            		// 0x0314 (0x0008) [0x0000000004082008]              ( CPF_ExportObject | CPF_Transient | CPF_Component | CPF_EditInline )
	class AActor*                                      CurrentSimpleMeshActor;                           		// 0x031C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	int                                                NumMeshedTopLevelScopes;                          		// 0x0324 (0x0004) [0x0000000000000000]              
	float                                              MaxFacadeZ;                                       		// 0x0328 (0x0004) [0x0000000000000000]              
	float                                              MinFacadeZ;                                       		// 0x032C (0x0004) [0x0000000000000000]              
	float                                              SimpleMeshMassiveLODDistance;                     		// 0x0330 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RenderToTexturePullBackAmount;                    		// 0x0334 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoofLightmapRes;                                  		// 0x0338 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                NonRectWallLightmapRes;                           		// 0x033C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BuildingInstanceVersion;                          		// 0x0340 (0x0004) [0x0000000000000002]              ( CPF_Const )
	unsigned long                                      bGenerateRoofMesh : 1;                            		// 0x0344 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bGenerateFloorMesh : 1;                           		// 0x0344 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bApplyRulesToRoof : 1;                            		// 0x0344 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bApplyRulesToFloor : 1;                           		// 0x0344 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bSplitWallsAtRoofLevels : 1;                      		// 0x0344 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bSplitWallsAtWallEdges : 1;                       		// 0x0344 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bQuickEdited : 1;                                 		// 0x0344 (0x0004) [0x0000000000002000] [0x00000040] ( CPF_Transient )
	unsigned long                                      bBuildingBrushCollision : 1;                      		// 0x0344 (0x0004) [0x0000000000000001] [0x00000080] ( CPF_Edit )
	unsigned long                                      bDebugDrawEdgeInfo : 1;                           		// 0x0344 (0x0004) [0x0000000000000001] [0x00000100] ( CPF_Edit )
	unsigned long                                      bDebugDrawScopes : 1;                             		// 0x0344 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int FindEdgeForTopLevelScope ( int TopLevelScopeIndex, unsigned char Edge );
	void BreakFractureComponent ( class UFracturedStaticMeshComponent* Comp, struct FVector BoxMin, struct FVector BoxMax );
	void GetAllGroupedProcBuildings ( struct TArray<class AProcBuilding*>* OutSet );
	class AProcBuilding* GetBaseMostBuilding ( );
	struct TArray<class UStaticMeshComponent*> FindComponentsForTopLevelScope ( int TopLevelScopeIndex );
	void ClearBuildingMeshes ( );
};

// Class Engine.ProcBuilding_SimpleLODActor
// 0x0000 (0x0280 - 0x0280)
class AProcBuilding_SimpleLODActor : public AStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeBase
// 0x0010 (0x0070 - 0x0060)
class UPBRuleNodeBase : public UObject
{
public:
	struct TArray<struct FPBRuleLink>                  NextRules;                                        		// 0x0060 (0x0010) [0x0000000000400040]              ( CPF_EditConstArray | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeAlternate
// 0x000D (0x007D - 0x0070)
class UPBRuleNodeAlternate : public UPBRuleNodeBase
{
public:
	float                                              ASize;                                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BMaxSize;                                         		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bInvertPatternOrder : 1;                          		// 0x0078 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEqualSizeAB : 1;                                 		// 0x0078 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      RepeatAxis;                                       		// 0x007C (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeComment
// 0x0018 (0x0088 - 0x0070)
class UPBRuleNodeComment : public UPBRuleNodeBase
{
public:
	int                                                SizeX;                                            		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                SizeY;                                            		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BorderWidth;                                      		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      BorderColor;                                      		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	struct FColor                                      FillColor;                                        		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bFilled : 1;                                      		// 0x0084 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeCorner
// 0x0029 (0x0099 - 0x0070)
class UPBRuleNodeCorner : public UPBRuleNodeBase
{
public:
	struct TArray<struct FRBCornerAngleInfo>           Angles;                                           		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	float                                              CornerSize;                                       		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FlatThreshold;                                    		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CornerShapeOffset;                                		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                RoundTesselation;                                 		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoundCurvature;                                   		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bNoMeshForConcaveCorners : 1;                     		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bUseAdjacentRulesetForRightGap : 1;               		// 0x0094 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned char                                      CornerType;                                       		// 0x0098 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeEdgeAngle
// 0x0011 (0x0081 - 0x0070)
class UPBRuleNodeEdgeAngle : public UPBRuleNodeBase
{
public:
	struct TArray<struct FRBEdgeAngleInfo>             Angles;                                           		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      Edge;                                             		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeEdgeMesh
// 0x0008 (0x0078 - 0x0070)
class UPBRuleNodeEdgeMesh : public UPBRuleNodeBase
{
public:
	float                                              FlatThreshold;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              MainXPullIn;                                      		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeExtractTopBottom
// 0x0010 (0x0080 - 0x0070)
class UPBRuleNodeExtractTopBottom : public UPBRuleNodeBase
{
public:
	float                                              ExtractTopZ;                                      		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractNotTopZ;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractBottomZ;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              ExtractNotBottomZ;                                		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeLODQuad
// 0x0004 (0x0074 - 0x0070)
class UPBRuleNodeLODQuad : public UPBRuleNodeBase
{
public:
	float                                              MassiveLODDistanceScale;                          		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeMesh
// 0x0060 (0x00D0 - 0x0070)
class UPBRuleNodeMesh : public UPBRuleNodeBase
{
public:
	struct FBuildingMeshInfo                           PartialOccludedBuildingMesh;                      		// 0x0070 (0x004C) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	struct TArray<struct FBuildingMeshInfo>            BuildingMeshes;                                   		// 0x00BC (0x0010) [0x0000000000480001]              ( CPF_Edit | CPF_Component | CPF_NeedCtorLink )
	unsigned long                                      bDoOcclusionTest : 1;                             		// 0x00CC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bBlockAll : 1;                                    		// 0x00CC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int PickRandomBuildingMesh ( );
};

// Class Engine.PBRuleNodeOcclusion
// 0x0000 (0x0070 - 0x0070)
class UPBRuleNodeOcclusion : public UPBRuleNodeBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeQuad
// 0x001C (0x008C - 0x0070)
class UPBRuleNodeQuad : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatMaxSizeX;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RepeatMaxSizeZ;                                   		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                QuadLightmapRes;                                  		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YOffset;                                          		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDisableMaterialRepeat : 1;                       		// 0x0088 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeRandom
// 0x000C (0x007C - 0x0070)
class UPBRuleNodeRandom : public UPBRuleNodeBase
{
public:
	int                                                NumOutputs;                                       		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MinNumExecuted;                                   		// 0x0074 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                MaxNumExecuted;                                   		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeRepeat
// 0x0005 (0x0075 - 0x0070)
class UPBRuleNodeRepeat : public UPBRuleNodeBase
{
public:
	float                                              RepeatMaxSize;                                    		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned char                                      RepeatAxis;                                       		// 0x0074 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeSize
// 0x0009 (0x0079 - 0x0070)
class UPBRuleNodeSize : public UPBRuleNodeBase
{
public:
	float                                              DecisionSize;                                     		// 0x0070 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bUseTopLevelScopeSize : 1;                        		// 0x0074 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned char                                      SizeAxis;                                         		// 0x0078 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeSplit
// 0x0011 (0x0081 - 0x0070)
class UPBRuleNodeSplit : public UPBRuleNodeBase
{
public:
	struct TArray<struct FRBSplitInfo>                 SplitSetup;                                       		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned char                                      SplitAxis;                                        		// 0x0080 (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeSubRuleset
// 0x0008 (0x0078 - 0x0070)
class UPBRuleNodeSubRuleset : public UPBRuleNodeBase
{
public:
	class UProcBuildingRuleset*                        SubRuleset;                                       		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeTransform
// 0x0018 (0x0088 - 0x0070)
class UPBRuleNodeTransform : public UPBRuleNodeBase
{
public:
	class UDistributionVector*                         Translation;                                      		// 0x0070 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         Rotation;                                         		// 0x0078 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UDistributionVector*                         Scale;                                            		// 0x0080 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeVariation
// 0x0004 (0x0074 - 0x0070)
class UPBRuleNodeVariation : public UPBRuleNodeBase
{
public:
	unsigned long                                      bVariationOfScopeOnLeft : 1;                      		// 0x0070 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.PBRuleNodeWindowWall
// 0x0028 (0x0098 - 0x0070)
class UPBRuleNodeWindowWall : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                         		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              CellMaxSizeX;                                     		// 0x0078 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              CellMaxSizeZ;                                     		// 0x007C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowSizeX;                                      		// 0x0080 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowSizeZ;                                      		// 0x0084 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowPosX;                                       		// 0x0088 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WindowPosZ;                                       		// 0x008C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              YOffset;                                          		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bScaleWindowWithCell : 1;                         		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ProcBuildingRuleset
// 0x0064 (0x00C4 - 0x0060)
class UProcBuildingRuleset : public UObject
{
public:
	struct TArray<struct FPBVariationInfo>             Variations;                                       		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UMaterialInterface*                          DefaultRoofMaterial;                              		// 0x0070 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultFloorMaterial;                             		// 0x0078 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInterface*                          DefaultNonRectWallMaterial;                       		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    LODCubemap;                                       		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    InteriorTexture;                                  		// 0x0090 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UPBRuleNodeBase*                             RootRule;                                         		// 0x0098 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              RoofZOffset;                                      		// 0x00A0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotRoofZOffset;                                   		// 0x00A4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloorZOffset;                                     		// 0x00A8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              NotFloorZOffset;                                  		// 0x00AC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoofPolyInset;                                    		// 0x00B0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              FloorPolyInset;                                   		// 0x00B4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              BuildingLODSpecular;                              		// 0x00B8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RoofEdgeScopeRaise;                               		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bEnableInteriorTexture : 1;                       		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bLODOnlyRoof : 1;                                 		// 0x00C0 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ReplicationInfo
// 0x0000 (0x0270 - 0x0270)
class AReplicationInfo : public AInfo
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.GameReplicationInfo
// 0x0080 (0x02F0 - 0x0270)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	struct TArray<class ATeamInfo*>                    Teams;                                            		// 0x0270 (0x0010) [0x0000000040400000]              ( CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     ServerName;                                       		// 0x0280 (0x0010) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct FString                                     MessageOfTheDay;                                  		// 0x0290 (0x0010) [0x0000000040444021]              ( CPF_Edit | CPF_Net | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink | CPF_EditInlineNotify )
	struct TArray<class APlayerReplicationInfo*>       PRIArray;                                         		// 0x02A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class APlayerReplicationInfo*>       InactivePRIArray;                                 		// 0x02B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameClass;                                        		// 0x02C0 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	class UCurrentGameDataStore*                       CurrentGameData;                                  		// 0x02C8 (0x0008) [0x0000000000000000]              
	class AActor*                                      Winner;                                           		// 0x02D0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	int                                                RemainingTime;                                    		// 0x02D8 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                ElapsedTime;                                      		// 0x02DC (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                RemainingMinute;                                  		// 0x02E0 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                GoalScore;                                        		// 0x02E4 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                TimeLimit;                                        		// 0x02E8 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	unsigned long                                      bStopCountDown : 1;                               		// 0x02EC (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bMatchHasBegun : 1;                               		// 0x02EC (0x0004) [0x0000000100000020] [0x00000002] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bMatchIsOver : 1;                                 		// 0x02EC (0x0004) [0x0000000100000020] [0x00000004] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventShouldShowGore ( );
	bool IsCoopMultiplayerGame ( );
	bool IsMultiplayerGame ( );
	void EndGame ( );
	void StartMatch ( );
	void CleanupGameDataStore ( );
	void InitializeGameDataStore ( );
	void eventReplicatedDataBinding ( struct FName VarName );
	void SortPRIArray ( );
	bool InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );
	void GetPRIArray ( struct TArray<class APlayerReplicationInfo*>* pris );
	void SetTeam ( int Index, class ATeamInfo* TI );
	void RemovePRI ( class APlayerReplicationInfo* PRI );
	void AddPRI ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* FindPlayerByID ( int PlayerID );
	bool OnSameTeam ( class AActor* A, class AActor* B );
	void eventTimer ( );
	void eventDestroyed ( );
	void Reset ( );
	void ReceivedGameClass ( );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

// Class Engine.PlayerReplicationInfo
// 0x00DA (0x034A - 0x0270)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	struct FUniqueNetId                                UniqueId;                                         		// 0x0270 (0x0008) [0x0000000140000020]              ( CPF_Net | CPF_EditInlineNotify | CPF_RepNotify )
	struct FString                                     PlayerName;                                       		// 0x0278 (0x0010) [0x0000000140400020]              ( CPF_Net | CPF_NeedCtorLink | CPF_EditInlineNotify | CPF_RepNotify )
	struct FString                                     OldName;                                          		// 0x0288 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     StringSpectating;                                 		// 0x0298 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     StringUnknown;                                    		// 0x02A8 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SavedNetworkAddress;                              		// 0x02B8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      GameMessageClass;                                 		// 0x02C8 (0x0008) [0x0000000000000000]              
	class AActor*                                      PlayerLocationHint;                               		// 0x02D0 (0x0008) [0x0000000000000020]              ( CPF_Net )
	class ATeamInfo*                                   Team;                                             		// 0x02D8 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )
	struct FName                                       SessionName;                                      		// 0x02E0 (0x0008) [0x0000000000000002]              ( CPF_Const )
	struct FAutomatedTestingDatum                      AutomatedTestingData;                             		// 0x02E8 (0x0008) [0x0000000000000000]              
	class UTexture2D*                                  Avatar;                                           		// 0x02F0 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              Score;                                            		// 0x02F8 (0x0004) [0x0000000140000020]              ( CPF_Net | CPF_EditInlineNotify | CPF_RepNotify )
	int                                                Deaths;                                           		// 0x02FC (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                NumLives;                                         		// 0x0300 (0x0004) [0x0000000000000000]              
	int                                                PlayerID;                                         		// 0x0304 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                SplitscreenIndex;                                 		// 0x0308 (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                StartTime;                                        		// 0x030C (0x0004) [0x0000000000000020]              ( CPF_Net )
	int                                                Kills;                                            		// 0x0310 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              ExactPing;                                        		// 0x0314 (0x0004) [0x0000000000000000]              
	int                                                StatConnectionCounts;                             		// 0x0318 (0x0004) [0x0000000000000000]              
	int                                                StatPingTotals;                                   		// 0x031C (0x0004) [0x0000000000000000]              
	int                                                StatPingMin;                                      		// 0x0320 (0x0004) [0x0000000000000000]              
	int                                                StatPingMax;                                      		// 0x0324 (0x0004) [0x0000000000000000]              
	int                                                StatPKLTotal;                                     		// 0x0328 (0x0004) [0x0000000000000000]              
	int                                                StatPKLMin;                                       		// 0x032C (0x0004) [0x0000000000000000]              
	int                                                StatPKLMax;                                       		// 0x0330 (0x0004) [0x0000000000000000]              
	int                                                StatMaxInBPS;                                     		// 0x0334 (0x0004) [0x0000000000000000]              
	int                                                StatAvgInBPS;                                     		// 0x0338 (0x0004) [0x0000000000000000]              
	int                                                StatMaxOutBPS;                                    		// 0x033C (0x0004) [0x0000000000000000]              
	int                                                StatAvgOutBPS;                                    		// 0x0340 (0x0004) [0x0000000000000000]              
	unsigned long                                      bAdmin : 1;                                       		// 0x0344 (0x0004) [0x0000000000000020] [0x00000001] ( CPF_Net )
	unsigned long                                      bIsFemale : 1;                                    		// 0x0344 (0x0004) [0x0000000000000020] [0x00000002] ( CPF_Net )
	unsigned long                                      bIsSpectator : 1;                                 		// 0x0344 (0x0004) [0x0000000000000020] [0x00000004] ( CPF_Net )
	unsigned long                                      bOnlySpectator : 1;                               		// 0x0344 (0x0004) [0x0000000000000020] [0x00000008] ( CPF_Net )
	unsigned long                                      bWaitingPlayer : 1;                               		// 0x0344 (0x0004) [0x0000000000000020] [0x00000010] ( CPF_Net )
	unsigned long                                      bReadyToPlay : 1;                                 		// 0x0344 (0x0004) [0x0000000000000020] [0x00000020] ( CPF_Net )
	unsigned long                                      bOutOfLives : 1;                                  		// 0x0344 (0x0004) [0x0000000000000020] [0x00000040] ( CPF_Net )
	unsigned long                                      bBot : 1;                                         		// 0x0344 (0x0004) [0x0000000000000020] [0x00000080] ( CPF_Net )
	unsigned long                                      bHasFlag : 1;                                     		// 0x0344 (0x0004) [0x0000000000000020] [0x00000100] ( CPF_Net )
	unsigned long                                      bHasBeenWelcomed : 1;                             		// 0x0344 (0x0004) [0x0000000000000000] [0x00000200] 
	unsigned long                                      bIsInactive : 1;                                  		// 0x0344 (0x0004) [0x0000000100000020] [0x00000400] ( CPF_Net | CPF_RepNotify )
	unsigned long                                      bFromPreviousLevel : 1;                           		// 0x0344 (0x0004) [0x0000000000000000] [0x00000800] 
	unsigned char                                      Ping;                                             		// 0x0348 (0x0001) [0x0000000000000020]              ( CPF_Net )
	unsigned char                                      TTSSpeaker;                                       		// 0x0349 (0x0001) [0x0000000000002000]              ( CPF_Transient )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UnregisterPlayerFromSession ( );
	void RegisterPlayerWithSession ( );
	bool IsInvalidName ( );
	unsigned char GetTeamNum ( );
	void SetUniqueId ( struct FUniqueNetId PlayerUniqueId );
	void ServerSetSplitscreenIndex ( unsigned char PlayerIndex );
	void SetSplitscreenIndex ( unsigned char PlayerIndex );
	bool IsLocalPlayerPRI ( );
	void BindPlayerOwnerDataProvider ( );
	void NotifyLocalPlayerTeamReceived ( );
	void UpdateTeamDataProvider ( );
	void UpdatePlayerDataProvider ( struct FName PropertyName );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void SeamlessTravelTo ( class APlayerReplicationInfo* NewPRI );
	void IncrementDeaths ( int Amt );
	void CopyProperties ( class APlayerReplicationInfo* PRI );
	void OverrideWith ( class APlayerReplicationInfo* PRI );
	class APlayerReplicationInfo* Duplicate ( );
	void SetWaitingPlayer ( unsigned long B );
	void eventSetPlayerName ( struct FString S );
	void eventTimer ( );
	void DisplayDebug ( class AHUD* HUD, float* YL, float* YPos );
	void UpdatePlayerLocation ( );
	struct FString GetLocationName ( );
	struct FString GetHumanReadableName ( );
	void Reset ( );
	void eventDestroyed ( );
	bool ShouldBroadCastWelcomeMessage ( unsigned long bExiting );
	void UpdatePing ( float TimeStamp );
	void eventReplicatedDataBinding ( struct FName VarName );
	void eventReplicatedEvent ( struct FName VarName );
	void SetPlayerTeam ( class ATeamInfo* NewTeam );
	void ClientInitialize ( class AController* C );
	void eventPostBeginPlay ( );
	struct FString GetPlayerAlias ( );
};

// Class Engine.TeamInfo
// 0x0020 (0x0290 - 0x0270)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x0270 (0x0010) [0x0000000040408022]              ( CPF_Const | CPF_Net | CPF_Localized | CPF_NeedCtorLink | CPF_EditInlineNotify )
	int                                                Size;                                             		// 0x0280 (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )
	float                                              Score;                                            		// 0x0284 (0x0004) [0x0000000040000020]              ( CPF_Net | CPF_EditInlineNotify )
	int                                                TeamIndex;                                        		// 0x0288 (0x0004) [0x0000000140000020]              ( CPF_Net | CPF_EditInlineNotify | CPF_RepNotify )
	struct FColor                                      TeamColor;                                        		// 0x028C (0x0004) [0x0000000040000000]              ( CPF_EditInlineNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GetTeamNum ( );
	struct FColor GetTextColor ( );
	struct FColor GetHUDColor ( );
	struct FString GetHumanReadableName ( );
	void RemoveFromTeam ( class AController* Other );
	bool AddToTeam ( class AController* Other );
	void eventDestroyed ( );
	void UnbindTeamDataProvider ( );
	class UCurrentGameDataStore* GetCurrentGameDS ( );
	void eventReplicatedEvent ( struct FName VarName );
};

// Class Engine.Camera
// 0x029A (0x0508 - 0x026E)
class ACamera : public AActor
{
public:
	struct FPostProcessSettings                        CamPostProcessSettings;                           		// 0x0270 (0x00E0) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UCameraModifier*>              ModifierList;                                     		// 0x0350 (0x0010) [0x1000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class AEmitterCameraLensEffectBase*> CameraLensEffects;                                		// 0x0360 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct TArray<class UCameraAnimInst*>              ActiveAnims;                                      		// 0x0370 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<class UCameraAnimInst*>              FreeAnims;                                        		// 0x0380 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UClass*                                      CameraShakeCamModClass;                           		// 0x0390 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnimInst*                             AnimInstPool[ 0x8 ];                              		// 0x0398 (0x0040) [0x0000000000000000]              
	struct FTViewTarget                                ViewTarget;                                       		// 0x03D8 (0x0038) [0x0000000000000000]              
	struct FTViewTarget                                PendingViewTarget;                                		// 0x0410 (0x0038) [0x0000000000000000]              
	struct FTCameraCache                               CameraCache;                                      		// 0x0448 (0x0020) [0x0000000000000000]              
	struct FViewTargetTransitionParams                 BlendParams;                                      		// 0x0468 (0x0010) [0x0000000000000000]              
	struct FVector                                     ColorScale;                                       		// 0x0478 (0x000C) [0x0000000000000000]              
	struct FVector                                     DesiredColorScale;                                		// 0x0484 (0x000C) [0x0000000000000000]              
	struct FVector                                     OriginalColorScale;                               		// 0x0490 (0x000C) [0x0000000000000000]              
	struct FVector                                     FreeCamOffset;                                    		// 0x049C (0x000C) [0x0000000000000000]              
	class APlayerController*                           PCOwner;                                          		// 0x04A8 (0x0008) [0x0000000000000000]              
	struct FName                                       CameraStyle;                                      		// 0x04B0 (0x0008) [0x0000000000000000]              
	struct FVector2D                                   FadeAlpha;                                        		// 0x04B8 (0x0008) [0x0000000000000000]              
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                		// 0x04C0 (0x0008) [0x0000000004002001]              ( CPF_Edit | CPF_Transient | CPF_EditInline )
	class ADynamicCameraActor*                         AnimCameraActor;                                  		// 0x04C8 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	float                                              DefaultFOV;                                       		// 0x04D0 (0x0004) [0x0000000000000000]              
	float                                              LockedFOV;                                        		// 0x04D4 (0x0004) [0x0000000000000000]              
	float                                              ConstrainedAspectRatio;                           		// 0x04D8 (0x0004) [0x0000000000000000]              
	float                                              DefaultAspectRatio;                               		// 0x04DC (0x0004) [0x0000000000000000]              
	struct FColor                                      FadeColor;                                        		// 0x04E0 (0x0004) [0x0000000000000000]              
	float                                              FadeAmount;                                       		// 0x04E4 (0x0004) [0x0000000000000000]              
	float                                              CamOverridePostProcessAlpha;                      		// 0x04E8 (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpDuration;                         		// 0x04EC (0x0004) [0x0000000000000000]              
	float                                              ColorScaleInterpStartTime;                        		// 0x04F0 (0x0004) [0x0000000000000000]              
	float                                              BlendTimeToGo;                                    		// 0x04F4 (0x0004) [0x0000000000000000]              
	float                                              FreeCamDistance;                                  		// 0x04F8 (0x0004) [0x0000000000000000]              
	float                                              FadeTime;                                         		// 0x04FC (0x0004) [0x0000000000000000]              
	float                                              FadeTimeRemaining;                                		// 0x0500 (0x0004) [0x0000000000000000]              
	unsigned long                                      bLockedFOV : 1;                                   		// 0x0504 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x0504 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bEnableFading : 1;                                		// 0x0504 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bEnableColorScaling : 1;                          		// 0x0504 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bEnableColorScaleInterp : 1;                      		// 0x0504 (0x0004) [0x0000000000000000] [0x00000010] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void StopCameraAnim ( class UCameraAnimInst* AnimInst, unsigned long bImmediate );
	void StopAllCameraAnimsByType ( class UCameraAnim* Anim, unsigned long bImmediate );
	void StopAllCameraAnims ( unsigned long bImmediate );
	class UCameraAnimInst* PlayCameraAnim ( class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, unsigned long bLoop, unsigned long bRandomStartTime, float Duration, unsigned long bSingleInstance );
	void ClearAllCameraShakes ( );
	void PlayWorldCameraShake ( class UCameraShake* Shake, class AActor* ShakeInstigator, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff, unsigned long bTryForceFeedback, unsigned long bOrientShakeTowardsEpicenter );
	float CalcRadialShakeScale ( class ACamera* Cam, struct FVector Epicenter, float InnerRadius, float OuterRadius, float Falloff );
	void StopCameraShake ( class UCameraShake* Shake );
	void PlayCameraShake ( class UCameraShake* Shake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ClearCameraLensEffects ( );
	void RemoveCameraLensEffect ( class AEmitterCameraLensEffectBase* Emitter );
	void AddCameraLensEffect ( class UClass* LensEffectEmitterClass );
	class AEmitterCameraLensEffectBase* FindCameraLensEffect ( class UClass* LensEffectEmitterClass );
	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	bool AllowPawnRotation ( );
	void ProcessViewRotation ( float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot );
	void SetViewTarget ( class AActor* NewViewTarget, struct FViewTargetTransitionParams TransitionParams );
	void UpdateViewTarget ( float DeltaTime, struct FTViewTarget* OutVT );
	void CheckViewTarget ( struct FTViewTarget* VT );
	void FillCameraCache ( struct FTPOV* NewPOV );
	struct FTPOV BlendViewTargets ( float Alpha, struct FTViewTarget* A, struct FTViewTarget* B );
	void eventUpdateCamera ( float DeltaTime );
	void SetDesiredColorScale ( struct FVector NewColorScale, float InterpTime );
	void GetCameraViewPoint ( struct FVector* OutCamLoc, struct FRotator* OutCamRot );
	void SetFOV ( float NewFOV );
	float GetFOVAngle ( );
	void InitializeFor ( class APlayerController* PC );
	void ApplyCameraModifiers ( float DeltaTime, struct FTPOV* OutPOV );
	void eventDestroyed ( );
	void PostBeginPlay ( );
	class UCameraModifier* CreateCameraModifier ( class UClass* ModifierClass );
};

// Class Engine.CameraActor
// 0x0102 (0x0370 - 0x026E)
class ACameraActor : public AActor
{
public:
	struct FPostProcessSettings                        CamOverridePostProcess;                           		// 0x0270 (0x00E0) [0x0000000200400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_Interp )
	class UDrawFrustumComponent*                       DrawFrustum;                                      		// 0x0350 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	class UStaticMeshComponent*                        MeshComp;                                         		// 0x0358 (0x0008) [0x0000000004080008]              ( CPF_ExportObject | CPF_Component | CPF_EditInline )
	float                                              AspectRatio;                                      		// 0x0360 (0x0004) [0x0000000200000021]              ( CPF_Edit | CPF_Net | CPF_Interp )
	float                                              FOVAngle;                                         		// 0x0364 (0x0004) [0x0000000200000021]              ( CPF_Edit | CPF_Net | CPF_Interp )
	float                                              CamOverridePostProcessAlpha;                      		// 0x0368 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	unsigned long                                      bConstrainAspectRatio : 1;                        		// 0x036C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void DisplayDebug ( class AHUD* HUD, float* out_YL, float* out_YPos );
	void GetCameraView ( float DeltaTime, struct FTPOV* OutPOV );
};

// Class Engine.DynamicCameraActor
// 0x0000 (0x0370 - 0x0370)
class ADynamicCameraActor : public ACameraActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CameraAnim
// 0x0110 (0x0170 - 0x0060)
class UCameraAnim : public UObject
{
public:
	struct FPostProcessSettings                        BasePPSettings;                                   		// 0x0060 (0x00E0) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FBox                                        BoundingBox;                                      		// 0x0140 (0x001C) [0x0000000000000002]              ( CPF_Const )
	class UInterpGroup*                                CameraInterpGroup;                                		// 0x015C (0x0008) [0x0000000000000000]              
	float                                              AnimLength;                                       		// 0x0164 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BasePPSettingsAlpha;                              		// 0x0168 (0x0004) [0x0000000000000002]              ( CPF_Const )
	float                                              BaseFOV;                                          		// 0x016C (0x0004) [0x0000000000000002]              ( CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.CameraAnimInst
// 0x0179 (0x01D9 - 0x0060)
class UCameraAnimInst : public UObject
{
public:
	struct FMatrix                                     UserPlaySpaceMatrix;                              		// 0x0060 (0x0040) [0x0000000000002000]              ( CPF_Transient )
	struct FPostProcessSettings                        LastPPSettings;                                   		// 0x00A0 (0x00E0) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	class UCameraAnim*                                 CamAnim;                                          		// 0x0180 (0x0008) [0x0000000000000000]              
	class UInterpTrackMove*                            MoveTrack;                                        		// 0x0188 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInterpTrackInstMove*                        MoveInst;                                         		// 0x0190 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UAnimNodeSequence*                           SourceAnimNode;                                   		// 0x0198 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UInterpGroupInst*                            InterpGroupInst;                                  		// 0x01A0 (0x0008) [0x0000000004400008]              ( CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline )
	float                                              CurTime;                                          		// 0x01A8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              BlendInTime;                                      		// 0x01AC (0x0004) [0x0000000000000000]              
	float                                              BlendOutTime;                                     		// 0x01B0 (0x0004) [0x0000000000000000]              
	float                                              CurBlendInTime;                                   		// 0x01B4 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              CurBlendOutTime;                                  		// 0x01B8 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              PlayRate;                                         		// 0x01BC (0x0004) [0x0000000000000000]              
	float                                              BasePlayScale;                                    		// 0x01C0 (0x0004) [0x0000000000000000]              
	float                                              TransientScaleModifier;                           		// 0x01C4 (0x0004) [0x0000000000000000]              
	float                                              CurrentBlendWeight;                               		// 0x01C8 (0x0004) [0x0000000000000000]              
	float                                              RemainingTime;                                    		// 0x01CC (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              LastPPSettingsAlpha;                              		// 0x01D0 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bLooping : 1;                                     		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000001] ( CPF_Transient )
	unsigned long                                      bFinished : 1;                                    		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000002] ( CPF_Transient )
	unsigned long                                      bAutoReleaseWhenFinished : 1;                     		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000004] ( CPF_Transient )
	unsigned long                                      bBlendingIn : 1;                                  		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000008] ( CPF_Transient )
	unsigned long                                      bBlendingOut : 1;                                 		// 0x01D4 (0x0004) [0x0000000000002000] [0x00000010] ( CPF_Transient )
	unsigned char                                      PlaySpace;                                        		// 0x01D8 (0x0001) [0x0000008000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetPlaySpace ( unsigned char NewSpace, struct FRotator UserPlaySpace );
	void ApplyTransientScaling ( float Scalar );
	void Stop ( unsigned long bImmediate );
	void AdvanceAnim ( float DeltaTime, unsigned long bJump );
	void Update ( float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration );
	void PlayEx ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float StartTime, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration );
	void Play ( class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, unsigned long bInLoop, unsigned long bRandomStartTime, float Duration );
};

// Class Engine.CameraModifier
// 0x001D (0x007D - 0x0060)
class UCameraModifier : public UObject
{
public:
	class ACamera*                                     CameraOwner;                                      		// 0x0060 (0x0008) [0x0000000000000000]              
	float                                              AlphaInTime;                                      		// 0x0068 (0x0004) [0x0000000000000000]              
	float                                              AlphaOutTime;                                     		// 0x006C (0x0004) [0x0000000000000000]              
	float                                              Alpha;                                            		// 0x0070 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	float                                              TargetAlpha;                                      		// 0x0074 (0x0004) [0x0000000000002000]              ( CPF_Transient )
	unsigned long                                      bDisabled : 1;                                    		// 0x0078 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bPendingDisable : 1;                              		// 0x0078 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bExclusive : 1;                                   		// 0x0078 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bDebug : 1;                                       		// 0x0078 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned char                                      Priority;                                         		// 0x007C (0x0001) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void UpdateAlpha ( class ACamera* Camera, float DeltaTime );
	bool ProcessViewRotation ( class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot );
	void ToggleModifier ( );
	void EnableModifier ( );
	void eventDisableModifier ( unsigned long bImmediate );
	bool RemoveCameraModifier ( class ACamera* Camera );
	bool AddCameraModifier ( class ACamera* Camera );
	bool IsDisabled ( );
	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void Init ( );
};

// Class Engine.CameraModifier_CameraShake
// 0x0017 (0x0094 - 0x007D)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	struct TArray<struct FCameraShakeInstance>         ActiveShakes;                                     		// 0x0080 (0x0010) [0x1000000000400000]              ( CPF_NeedCtorLink )
	float                                              SplitScreenShakeScale;                            		// 0x0090 (0x0004) [0x0000000000000003]              ( CPF_Edit | CPF_Const )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ModifyCamera ( class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV );
	void UpdateCameraShake ( float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV );
	void RemoveAllCameraShakes ( );
	void RemoveCameraShake ( class UCameraShake* Shake );
	void AddCameraShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	struct FCameraShakeInstance InitializeShake ( class UCameraShake* NewShake, float Scale, unsigned char PlaySpace, struct FRotator UserPlaySpaceRot );
	void ReinitShake ( int ActiveShakeIdx, float Scale );
	float InitializeOffset ( struct FFOscillator* Param );
};

// Class Engine.CameraShake
// 0x0080 (0x00E0 - 0x0060)
class UCameraShake : public UObject
{
public:
	struct FROscillator                                RotOscillation;                                   		// 0x0060 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FVOscillator                                LocOscillation;                                   		// 0x0084 (0x0024) [0x0000000000000001]              ( CPF_Edit )
	struct FFOscillator                                FOVOscillation;                                   		// 0x00A8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	class UCameraAnim*                                 Anim;                                             		// 0x00B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationDuration;                              		// 0x00BC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendInTime;                           		// 0x00C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              OscillationBlendOutTime;                          		// 0x00C4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimPlayRate;                                     		// 0x00C8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimScale;                                        		// 0x00CC (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendInTime;                                  		// 0x00D0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              AnimBlendOutTime;                                 		// 0x00D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              RandomAnimSegmentDuration;                        		// 0x00D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bSingleInstance : 1;                              		// 0x00DC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bRandomAnimSegment : 1;                           		// 0x00DC (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	float GetLocOscillationMagnitude ( );
	float GetRotOscillationMagnitude ( );
};

// Class Engine.BioRemoteLogger
// 0x01CC (0x022C - 0x0060)
class UBioRemoteLogger : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                     		// 0x0060 (0x0008) [0x0000000000801002]              ( CPF_Const | CPF_Native | CPF_NoExport )
	struct FDouble                                     m_LastEventSent;                                  		// 0x0068 (0x0008) [0x0000000000000000]              
	struct FString                                     NoString;                                         		// 0x0070 (0x0010) [0x0000000000400002]              ( CPF_Const | CPF_NeedCtorLink )
	struct FString                                     m_sRunMessage;                                    		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCurrentTest;                                   		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCurrentTestCasePath;                           		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_UserName;                                       		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_remoteScreenshotPath;                           		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_remoteSavegamePath;                             		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sCampaignName;                                  		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_serverIP;                                       		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_FormattedMapName;                               		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_LevelName;                                      		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TriggerDesignName;                              		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TriggerDesignStateName;                         		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_TriggerArtInChunkName;                          		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_PlayerWeapon;                                   		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_PlayerClass;                                    		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_sLogString;                                     		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_MPEventEmailAddress;                            		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_MPEventSubjectLine;                             		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FString                                     m_QueuedEventsBuffer;                             		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FVector                                     m_PlayerLocation;                                 		// 0x01B0 (0x000C) [0x0000000000000000]              
	struct FVector                                     m_PlayerLocationLastInfo;                         		// 0x01BC (0x000C) [0x0000000000000000]              
	int                                                m_sessionID;                                      		// 0x01C8 (0x0004) [0x0000000000000000]              
	int                                                m_sessionStatus;                                  		// 0x01CC (0x0004) [0x0000000000000000]              
	int                                                m_gameID;                                         		// 0x01D0 (0x0004) [0x0000000000000000]              
	int                                                m_runID;                                          		// 0x01D4 (0x0004) [0x0000000000000000]              
	int                                                m_runStatus;                                      		// 0x01D8 (0x0004) [0x0000000000000000]              
	int                                                m_nCurrentTestPlanID;                             		// 0x01DC (0x0004) [0x0000000000000000]              
	int                                                m_Interface;                                      		// 0x01E0 (0x0004) [0x0000000000000000]              
	int                                                m_enabled;                                        		// 0x01E4 (0x0004) [0x0000000000000000]              
	int                                                m_KeepAlive;                                      		// 0x01E8 (0x0004) [0x0000000000000000]              
	int                                                m_port;                                           		// 0x01EC (0x0004) [0x0000000000000000]              
	int                                                m_LogStringUsage;                                 		// 0x01F0 (0x0004) [0x0000000000000000]              
	int                                                m_GameMode;                                       		// 0x01F4 (0x0004) [0x0000000000000000]              
	int                                                m_online;                                         		// 0x01F8 (0x0004) [0x0000000000000000]              
	float                                              m_LastPacketTime;                                 		// 0x01FC (0x0004) [0x0000000000000000]              
	int                                                m_testFlags;                                      		// 0x0200 (0x0004) [0x0000000000000000]              
	int                                                m_LogLineCount;                                   		// 0x0204 (0x0004) [0x0000000000000000]              
	int                                                m_AnnounceRetryCount;                             		// 0x0208 (0x0004) [0x0000000000000000]              
	int                                                m_CampaignRetryCount;                             		// 0x020C (0x0004) [0x0000000000000000]              
	int                                                m_MultiplayerStartIndex;                          		// 0x0210 (0x0004) [0x0000000000000000]              
	float                                              m_EventDelay;                                     		// 0x0214 (0x0004) [0x0000000000000000]              
	int                                                m_QueuedEventsBufferIndex;                        		// 0x0218 (0x0004) [0x0000000000000000]              
	int                                                m_NumQueuedEvents;                                		// 0x021C (0x0004) [0x0000000000000000]              
	int                                                m_MaxQueuedEvents;                                		// 0x0220 (0x0004) [0x0000000000000000]              
	int                                                m_MaxQueuedMessageLength;                         		// 0x0224 (0x0004) [0x0000000000000000]              
	unsigned long                                      m_bSendTPMPackets : 1;                            		// 0x0228 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      m_PlayerInCover : 1;                              		// 0x0228 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      m_PlayerIsFiring : 1;                             		// 0x0228 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      m_PlayerIsGhosting : 1;                           		// 0x0228 (0x0004) [0x0000000000000000] [0x00000008] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetRemoteSavegamePath ( );
	void eventTPMCheckinTestPlan ( );
	void eventTPMCheckoutTestPlan ( int nTestPlanID );
	void eventTRun ( int nResult );
	void eventTAdd ( struct FString sTestName, struct FString sTestCaseString );
	void eventSendTPMMessage ( struct FString sMessage );
	void SendVocalizationEvent ( struct FName SpeakerTag, struct FName Sound );
	void SendMPEventEmail ( int nEventID, struct FString sEventName, struct FString sEventInfo );
	void SendMPEventFloat ( unsigned char eLogEvent, float fX, float fY, float fZ, struct FString sNameObject, struct FString sNameTarget, float fData );
	void SendMPEvent ( unsigned char eLogEvent, float fX, float fY, float fZ, struct FString sNameObject, struct FString sNameTarget, int nIntVal1, int nIntVal2 );
	bool EventEnabled ( int nEventID );
	struct FString ShortName ( class UObject* o );
	int GetGameMode ( );
	void SetTPMLoggingEnabled ( unsigned long enable );
	int GetTPMLoggingEnabled ( );
	int GetSessionBuild ( );
	int GetRunID ( );
	void SetGameID ( int NewGameID );
	int GetGameID ( );
	int GetSessionID ( );
	int GetSessionStatus ( );
	void SetFlag ( int nFlag, unsigned long bVal );
	void ToggleFlag ( int nFlag );
	bool GetFlag ( int nFlag );
	void SkynetScreenshot ( struct FString sScreenshotName );
	void SendUnitTestInfo ( int testType, struct FString className, struct FString methodName, int successType );
	void SendStatistic ( struct FString sStatisticName, struct FString sOperationType, float fData );
	void SendBugReport ( float fX, float fY, float fZ, float fOrientation, int nWeaponType, int nWeaponMod, int nArmourType, int nArmourMod, struct FString sPartyMember1, struct FString sPartyMember2, unsigned long bIsPercievingEnemy, struct FString sBugDescription, struct FString sEmailAddress );
	void SendDebugEmail ( struct FString sEmailDestination, struct FString sEmailSubject, int nExceptionType, struct FString sEmailBody );
	void SendCustomEventFloat ( struct FString sPacketHandler, int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, float fData0, float fData1, struct FString sString1, struct FString sString2, int nObjectType, unsigned long bIsPartyMember );
	void SendCustomEvent ( struct FString sPacketHandler, int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, int nIntVal1, int nIntVal2, struct FString sString1, struct FString sString2, int nObjectType, unsigned long bIsPartyMember );
	void SendEventFloat ( int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, float fData0, float fData1, struct FString sString1, struct FString sString2, int nObjectType, int bIsPartyMember );
	void SendEvent ( int nLogEventID, float fX, float fY, float fZ, struct FString sAreaName, struct FString sNameObject, struct FString sNameTarget, int nIntVal1, int nIntVal2, struct FString sString1, struct FString sString2, int nObjectType, int bIsPartyMember );
	void SendPlayerEventFloat ( int nLogEventID, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, float fData0, float fData1, int nInt3, int nInt4 );
	void SendPlayerEvent ( int nLogEventID, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, int nInt1, int nInt2, int nInt3, int nInt4 );
	void SendMapEvent ( int nLogEventID, struct FVector pos, struct FString sString1, struct FString sString2, struct FString sString3, struct FString sString4, int nInt1, int nInt2, int nInt3, int nInt4 );
	void SendHardwareInfoMessage ( );
	void SendFPSTest ( );
	void SendTPMEvent ( struct FString sMessage );
	void SendAssertEvent ( int nLineNumber, struct FString sAssertFileName, struct FString sAssertMessage );
	void SendQAEvent ( int nMessageEventId, struct FString sType, struct FString sLogMsg, struct FString sCurrentMessage );
	void SendInvalidPlaythrough ( struct FString sCheat );
	void SendFastResumeLoaded ( struct FString LevelName, float fTime, unsigned long bRunningOffMedia );
	void SendLevelLoaded ( struct FString LevelName, struct FString LevelFrom, float fTime, unsigned long bRunningOffMedia );
	void SendStringLastUsed ( int nStringID );
	void SendStrRefNotFound ( int nStrRef );
	void SendTextureMemorySacrificed ( int nOldTextureMemoryLimit );
	void SendPurpleLevel ( struct FString sObjRefName, struct FString sObjLeakedName );
	void SendAreaEnteredEvent ( );
	void SendNewCampaignMessage ( );
	class UBioRemoteLogger* GetLogger ( );
};

// Class Engine.SFXLightProbeBlendVolume
// 0x0010 (0x02C4 - 0x02B4)
class ASFXLightProbeBlendVolume : public AVolume
{
public:
	struct TArray<class ASFXLightProbe*>               LightProbes;                                      		// 0x02B4 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class Engine.SFXLightProbe
// 0x000A (0x0278 - 0x026E)
class ASFXLightProbe : public AActor
{
public:
	class USFXLightRig*                                LightRig;                                         		// 0x0270 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXPointLightComponent
// 0x0004 (0x0268 - 0x0264)
class USFXPointLightComponent : public UPointLightComponent
{
public:
	unsigned long                                      bUseVSMShadows : 1;                               		// 0x0264 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BioDynamicLightEnvironmentComponent
// 0x008B (0x01EE - 0x0163)
class UBioDynamicLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	struct TArray<class ASFXLightProbeBlendVolume*>    LightProbeVolumeStack;                            		// 0x0164 (0x0010) [0x0000000000402000]              ( CPF_Transient | CPF_NeedCtorLink )
	struct FPointer                                    BioState;                                         		// 0x0174 (0x0008) [0x0000000000003002]              ( CPF_Const | CPF_Native | CPF_Transient )
	struct FVector                                     KeyLightScale;                                    		// 0x017C (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FVector                                     FillLightScale;                                   		// 0x0188 (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FVector                                     AmbientLightScale;                                		// 0x0194 (0x000C) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FName                                       TargetBoneName;                                   		// 0x01A0 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	class USFXLightRig*                                CinematicLightRig;                                		// 0x01A8 (0x0008) [0x0040000000000001]              ( CPF_Edit )
	float                                              SHAmbientScale;                                   		// 0x01B0 (0x0004) [0x0040000200004001]              ( CPF_Edit | CPF_Config | CPF_Interp )
	float                                              BlendTime;                                        		// 0x01B4 (0x0004) [0x0040000000004001]              ( CPF_Edit | CPF_Config )
	float                                              PopAngleLimit;                                    		// 0x01B8 (0x0004) [0x0040000000004001]              ( CPF_Edit | CPF_Config )
	float                                              SurfaceBoundsRatio;                               		// 0x01BC (0x0004) [0x0040000000004001]              ( CPF_Edit | CPF_Config )
	float                                              MinPolarAngle;                                    		// 0x01C0 (0x0004) [0x0040000000004001]              ( CPF_Edit | CPF_Config )
	float                                              RimLightYaw;                                      		// 0x01C4 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RimLightPitch;                                    		// 0x01C8 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              RimLightScale;                                    		// 0x01CC (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	struct FColor                                      RimLightColor;                                    		// 0x01D0 (0x0004) [0x0000000200000001]              ( CPF_Edit | CPF_Interp )
	float                                              WrapLightingDirectMultiplier;                     		// 0x01D4 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              WrapLightingIndirectMultiplier;                   		// 0x01D8 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              LightRigOrientation;                              		// 0x01DC (0x0004) [0x0040000000000001]              ( CPF_Edit )
	float                                              LastFrameWeight_Cinematic;                        		// 0x01E0 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	float                                              LastFrameWeight_Exploration;                      		// 0x01E4 (0x0004) [0x0000000000004002]              ( CPF_Const | CPF_Config )
	unsigned long                                      LightAxisEnabled : 1;                             		// 0x01E8 (0x0004) [0x0040000000004001] [0x00000001] ( CPF_Edit | CPF_Config )
	unsigned long                                      DisplayDebugLines : 1;                            		// 0x01E8 (0x0004) [0x0040000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      ForcePolarKeyFill : 1;                            		// 0x01E8 (0x0004) [0x0040000000004001] [0x00000004] ( CPF_Edit | CPF_Config )
	unsigned long                                      UseOptimizedLightingPath : 1;                     		// 0x01E8 (0x0004) [0x0040000000004001] [0x00000008] ( CPF_Edit | CPF_Config )
	unsigned long                                      UseTargetBoneAsOrigin : 1;                        		// 0x01E8 (0x0004) [0x0040000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bLockEnvironment : 1;                             		// 0x01E8 (0x0004) [0x0040000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      SmoothShadowLight_Cinematic : 1;                  		// 0x01E8 (0x0004) [0x0000000000004002] [0x00000040] ( CPF_Const | CPF_Config )
	unsigned long                                      SmoothShadowLight_Exploration : 1;                		// 0x01E8 (0x0004) [0x0000000000004002] [0x00000080] ( CPF_Const | CPF_Config )
	unsigned long                                      bHasDirtyInterpProperties : 1;                    		// 0x01E8 (0x0004) [0x0000000000002000] [0x00000100] ( CPF_Transient )
	unsigned long                                      bSupportsLightProbes : 1;                         		// 0x01E8 (0x0004) [0x0000000000000001] [0x00000200] ( CPF_Edit )
	unsigned char                                      QualityType;                                      		// 0x01EC (0x0001) [0x0040000000000003]              ( CPF_Edit | CPF_Const )
	unsigned char                                      RimLightControl;                                  		// 0x01ED (0x0001) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnUpdatePropertyRimLightControl ( );
	void OnUpdatePropertyRimLightColor ( );
	void OnUpdatePropertyRimLightScale ( );
	void OnUpdatePropertyRimLightPitch ( );
	void OnUpdatePropertyRimLightYaw ( );
	void OnUpdatePropertyAmbientLightScale ( );
	void OnUpdatePropertyFillLightScale ( );
	void OnUpdatePropertyKeyLightScale ( );
	void UntouchLightProbeBlendVolume ( class ASFXLightProbeBlendVolume* InVolume );
	void TouchLightProbeBlendVolume ( class ASFXLightProbeBlendVolume* InVolume );
	class UBioDynamicLightEnvironmentComponent* ScriptFindDLE ( class AActor* InActor );
	void SetQuality ( unsigned char Quality );
};

// Class Engine.SFXUberPostProcessEffect
// 0x0027 (0x0148 - 0x0121)
class USFXUberPostProcessEffect : public UUberPostProcessEffect
{
public:
	class UTexture2D*                                  FilmGrainTexture;                                 		// 0x0124 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UMaterialInterface*                          VignetteMaterial;                                 		// 0x012C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UMaterialInterface*                          FilmGrainAndVignetteMaterial;                     		// 0x0134 (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	class UMaterialInterface*                          FilmGrainMaterial;                                		// 0x013C (0x0008) [0x0000000000020001]              ( CPF_Edit | CPF_EditConst )
	unsigned long                                      EnableFilmicResponse : 1;                         		// 0x0144 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      EnableVignette : 1;                               		// 0x0144 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      EnableFilmgrain : 1;                              		// 0x0144 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      EnableHardwareGamma : 1;                          		// 0x0144 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      EnableMergedMaterialEffects : 1;                  		// 0x0144 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXLightRig
// 0x016C (0x01CC - 0x0060)
class USFXLightRig : public UObject
{
public:
	struct FSHVectorRGB                                LightEnvironment;                                 		// 0x0060 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	struct FSHVectorRGB                                NonShadowedLightEnvironment;                      		// 0x00F0 (0x0090) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                KeyLightModifier;                                 		// 0x0180 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                FillLightModifier;                                		// 0x0190 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                AmbientLightModifier;                             		// 0x01A0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FLinearColor                                TotalShadowIntensity;                             		// 0x01B0 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	struct FVector                                     ShadowDirection;                                  		// 0x01C0 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Init ( class UBioDynamicLightEnvironmentComponent* InSourceEnv );
};

// Class Engine.SeqEvent_HitWall
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_HitWall : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.LocalMessage
// 0x0014 (0x0074 - 0x0060)
class ULocalMessage : public UObject
{
public:
	float                                              Lifetime;                                         		// 0x0060 (0x0004) [0x0000000000000000]              
	struct FColor                                      DrawColor;                                        		// 0x0064 (0x0004) [0x0000000000000000]              
	float                                              PosY;                                             		// 0x0068 (0x0004) [0x0000000000000000]              
	int                                                FontSize;                                         		// 0x006C (0x0004) [0x0000000000000000]              
	unsigned long                                      bIsSpecial : 1;                                   		// 0x0070 (0x0004) [0x0000000000000000] [0x00000001] 
	unsigned long                                      bIsUnique : 1;                                    		// 0x0070 (0x0004) [0x0000000000000000] [0x00000002] 
	unsigned long                                      bIsPartiallyUnique : 1;                           		// 0x0070 (0x0004) [0x0000000000000000] [0x00000004] 
	unsigned long                                      bIsConsoleMessage : 1;                            		// 0x0070 (0x0004) [0x0000000000000000] [0x00000008] 
	unsigned long                                      bBeep : 1;                                        		// 0x0070 (0x0004) [0x0000000000000000] [0x00000010] 
	unsigned long                                      bCountInstances : 1;                              		// 0x0070 (0x0004) [0x0000000000000000] [0x00000020] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool PartiallyDuplicates ( int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2 );
	bool IsKeyObjectiveMessage ( int Switch );
	bool IsConsoleMessage ( int Switch );
	float GetLifeTime ( int Switch );
	int GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );
	float GetPos ( int Switch, class AHUD* myHUD );
	struct FColor GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	struct FColor GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI );
	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

// Class Engine.SeqAct_Destroy
// 0x0014 (0x010C - 0x00F8)
class USeqAct_Destroy : public USequenceAction
{
public:
	struct TArray<class UClass*>                       IgnoreBasedClasses;                               		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bDestroyBasedActors : 1;                          		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetVelocity
// 0x0014 (0x010C - 0x00F8)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                      		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              VelocityMag;                                      		// 0x0104 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bVelocityRelativeToActorRotation : 1;             		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_ToggleHidden
// 0x0014 (0x010C - 0x00F8)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	struct TArray<class UClass*>                       IgnoreBasedClasses;                               		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bToggleBasedActors : 1;                           		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x011C - 0x00F8)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	struct FVector                                     RelativeOffset;                                   		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FRotator                                    RelativeRotation;                                 		// 0x0104 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       BoneName;                                         		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bDetach : 1;                                      		// 0x0118 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bHardAttach : 1;                                  		// 0x0118 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bUseRelativeOffset : 1;                           		// 0x0118 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bUseRelativeRotation : 1;                         		// 0x0118 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.AccessControl
// 0x011C (0x038C - 0x0270)
class AAccessControl : public AInfo
{
public:
	struct FString                                     ACDisplayText[ 0x3 ];                             		// 0x0270 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ACDescText[ 0x3 ];                                		// 0x02A0 (0x0030) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct TArray<struct FString>                      IPPolicies;                                       		// 0x02D0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct TArray<struct FUniqueNetId>                 BannedIDs;                                        		// 0x02E0 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     IPBanned;                                         		// 0x02F0 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WrongPassword;                                    		// 0x0300 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NeedPassword;                                     		// 0x0310 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SessionBanned;                                    		// 0x0320 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickedMsg;                                        		// 0x0330 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     DefaultKickReason;                                		// 0x0340 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     IdleKickReason;                                   		// 0x0350 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     AdminPassword;                                    		// 0x0360 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	struct FString                                     GamePassword;                                     		// 0x0370 (0x0010) [0x0000000000444000]              ( CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink )
	class UClass*                                      AdminClass;                                       		// 0x0380 (0x0008) [0x0000000000000000]              
	unsigned long                                      bDontAddDefaultAdmin : 1;                         		// 0x0388 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool IsIDBanned ( struct FUniqueNetId* NetId );
	bool CheckIPPolicy ( struct FString Address );
	void eventPreLogin ( struct FString Options, struct FString Address, unsigned long bSpectator, struct FString* OutError );
	bool ValidLogin ( struct FString Username, struct FString Password );
	bool ParseAdminOptions ( struct FString Options );
	void AdminExited ( class APlayerController* P );
	void AdminEntered ( class APlayerController* P );
	bool AdminLogout ( class APlayerController* P );
	bool AdminLogin ( class APlayerController* P, struct FString Password );
	bool KickPlayer ( class APlayerController* C, struct FString KickReason );
	bool ForceKickPlayer ( class APlayerController* C, struct FString KickReason );
	void KickBan ( struct FString Target );
	void Kick ( struct FString Target );
	class AController* GetControllerFromString ( struct FString Target );
	bool RequiresPassword ( );
	void SetGamePassword ( struct FString P );
	bool SetAdminPassword ( struct FString P );
	bool IsAdmin ( class APlayerController* P );
};

// Class Engine.Admin
// 0x0002 (0x0788 - 0x0786)
class AAdmin : public APlayerController
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ServerSwitch ( struct FString URL );
	void Switch ( struct FString URL );
	void ServerRestartMap ( );
	void RestartMap ( );
	void PlayerList ( );
	void ServerKick ( struct FString S );
	void Kick ( struct FString S );
	void ServerKickBan ( struct FString S );
	void KickBan ( struct FString S );
	void ServerAdmin ( struct FString CommandLine );
	void Admin ( struct FString CommandLine );
	void eventPostBeginPlay ( );
};

// Class Engine.EmitterSpawnable
// 0x0008 (0x028C - 0x0284)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x0284 (0x0008) [0x0000000100000020]              ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventReplicatedEvent ( struct FName VarName );
	void eventSetTemplate ( class UParticleSystem* NewTemplate, unsigned long bDestroyOnFinish );
};

// Class Engine.KAssetSpawnable
// 0x0000 (0x028C - 0x028C)
class AKAssetSpawnable : public AKAsset
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactorySkeletalMeshCinematic
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactorySkeletalMeshCinematic : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x00A4 - 0x00A4)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_Death
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_Death : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_ControlMovieTexture
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                     		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class Engine.OnlineAccountInterface
// 0x0010 (0x0070 - 0x0060)
class UOnlineAccountInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnCreateOnlineAccountCompleted__Delegate;       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool GetLocalAccountNames ( struct TArray<struct FString>* Accounts );
	bool DeleteLocalAccount ( struct FString Username, struct FString Password );
	bool RenameLocalAccount ( struct FString NewUserName, struct FString OldUserName, struct FString Password );
	bool CreateLocalAccount ( struct FString Username, struct FString Password );
	void ClearCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void AddCreateOnlineAccountCompletedDelegate ( struct FScriptDelegate AccountCreateDelegate );
	void OnCreateOnlineAccountCompleted ( unsigned char ErrorStatus );
	bool CreateOnlineAccount ( struct FString Username, struct FString Password, struct FString EmailAddress, struct FString ProductKey );
};

// Class Engine.OnlinePlayerInterface
// 0x0150 (0x01B0 - 0x0060)
class UOnlinePlayerInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadPlayerStorageForNetIdComplete__Delegate;  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginCancelled__Delegate;                     		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnMutingChange__Delegate;                       		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendsChange__Delegate;                      		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginFailed__Delegate;                        		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLogoutCompleted__Delegate;                    		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginStatusChange__Delegate;                  		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadProfileSettingsComplete__Delegate;        		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWriteProfileSettingsComplete__Delegate;       		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadPlayerStorageComplete__Delegate;          		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLoginChange__Delegate;                        		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnWritePlayerStorageComplete__Delegate;         		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadFriendsComplete__Delegate;                		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnKeyboardInputComplete__Delegate;              		// 0x0130 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnAddFriendByNameComplete__Delegate;            		// 0x0140 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendInviteReceived__Delegate;               		// 0x0150 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReceivedGameInvite__Delegate;                 		// 0x0160 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinFriendGameComplete__Delegate;             		// 0x0170 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFriendMessageReceived__Delegate;              		// 0x0180 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnlockAchievementComplete__Delegate;          		// 0x0190 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadAchievementsComplete__Delegate;           		// 0x01A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GetAchievements ( unsigned char LocalUserNum, int TitleId, int SetIndex, struct TArray<struct FAchievementDetails>* Achievements );
	void ClearReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void AddReadAchievementsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadAchievementsCompleteDelegate );
	void OnReadAchievementsComplete ( int TitleId );
	bool ReadAchievements ( unsigned char LocalUserNum, int TitleId, unsigned long bShouldReadText, unsigned long bShouldReadImages );
	void ClearUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void AddUnlockAchievementCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate UnlockAchievementCompleteDelegate );
	void OnUnlockAchievementComplete ( unsigned long bWasSuccessful );
	bool UnlockAchievement ( unsigned char LocalUserNum, int AchievementId );
	bool DeleteMessage ( unsigned char LocalUserNum, int MessageIndex );
	void ClearFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void AddFriendMessageReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate MessageDelegate );
	void OnFriendMessageReceived ( unsigned char LocalUserNum, struct FUniqueNetId SendingPlayer, struct FString SendingNick, struct FString Message );
	void GetFriendMessages ( unsigned char LocalUserNum, struct TArray<struct FOnlineFriendMessage>* FriendMessages );
	void ClearJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void AddJoinFriendGameCompleteDelegate ( struct FScriptDelegate JoinFriendGameCompleteDelegate );
	void OnJoinFriendGameComplete ( unsigned long bWasSuccessful );
	bool JoinFriendGame ( unsigned char LocalUserNum, struct FUniqueNetId Friend );
	void ClearReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void AddReceivedGameInviteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReceivedGameInviteDelegate );
	void OnReceivedGameInvite ( unsigned char LocalUserNum, struct FString InviterName );
	bool SendGameInviteToFriends ( unsigned char LocalUserNum, struct TArray<struct FUniqueNetId> Friends, struct FString Text );
	bool SendGameInviteToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Text );
	bool SendMessageToFriend ( unsigned char LocalUserNum, struct FUniqueNetId Friend, struct FString Message );
	void ClearFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void AddFriendInviteReceivedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate InviteDelegate );
	void OnFriendInviteReceived ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer, struct FString RequestingNick, struct FString Message );
	bool RemoveFriend ( unsigned char LocalUserNum, struct FUniqueNetId FormerFriend );
	bool DenyFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	bool AcceptFriendInvite ( unsigned char LocalUserNum, struct FUniqueNetId RequestingPlayer );
	void ClearAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void AddAddFriendByNameCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendDelegate );
	void OnAddFriendByNameComplete ( unsigned long bWasSuccessful );
	bool AddFriendByName ( unsigned char LocalUserNum, struct FString FriendName, struct FString Message );
	bool AddFriend ( unsigned char LocalUserNum, struct FUniqueNetId NewFriend, struct FString Message );
	struct FString GetKeyboardInputResults ( unsigned char* bWasCanceled );
	void ClearKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void AddKeyboardInputDoneDelegate ( struct FScriptDelegate InputDelegate );
	void OnKeyboardInputComplete ( unsigned long bWasSuccessful );
	bool ShowKeyboardUI ( unsigned char LocalUserNum, struct FString TitleText, struct FString DescriptionText, unsigned long bIsPassword, unsigned long bShouldValidate, struct FString DefaultText, int MaxResultLength );
	void SetOnlineStatus ( unsigned char LocalUserNum, int StatusId, struct TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, struct TArray<struct FSettingsProperty>* Properties );
	unsigned char GetFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt, struct TArray<struct FOnlineFriend>* Friends );
	void ClearReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void AddReadFriendsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadFriendsCompleteDelegate );
	void OnReadFriendsComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsList ( unsigned char LocalUserNum, int Count, int StartingAt );
	void ClearWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void AddWritePlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WritePlayerStorageCompleteDelegate );
	void OnWritePlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WritePlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
	class UOnlinePlayerStorage* GetPlayerStorage ( unsigned char LocalUserNum );
	void ClearReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void AddReadPlayerStorageForNetIdCompleteDelegate ( struct FUniqueNetId NetId, struct FScriptDelegate ReadPlayerStorageForNetIdCompleteDelegate );
	void OnReadPlayerStorageForNetIdComplete ( struct FUniqueNetId NetId, unsigned long bWasSuccessful );
	bool ReadPlayerStorageForNetId ( struct FUniqueNetId NetId, class UOnlinePlayerStorage* PlayerStorage );
	void ClearReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void AddReadPlayerStorageCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadPlayerStorageCompleteDelegate );
	void OnReadPlayerStorageComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadPlayerStorage ( unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage );
	void ClearWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void AddWriteProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate WriteProfileSettingsCompleteDelegate );
	void OnWriteProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool WriteProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings, unsigned long bIsTrilogyProfile );
	class UOnlineProfileSettings* GetProfileSettings ( unsigned char LocalUserNum );
	void ClearReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void AddReadProfileSettingsCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ReadProfileSettingsCompleteDelegate );
	void OnReadProfileSettingsComplete ( unsigned char LocalUserNum, unsigned long bWasSuccessful );
	bool ReadProfileSettings ( unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings, unsigned long bIsTrilogyProfile );
	void ClearFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void AddFriendsChangeDelegate ( unsigned char LocalUserNum, struct FScriptDelegate FriendsDelegate );
	void ClearMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void AddMutingChangeDelegate ( struct FScriptDelegate MutingDelegate );
	void ClearLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void AddLoginCancelledDelegate ( struct FScriptDelegate CancelledDelegate );
	void ClearLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void AddLoginStatusChangeDelegate ( struct FScriptDelegate LoginStatusDelegate, unsigned char LocalUserNum );
	void OnLoginStatusChange ( unsigned char NewStatus, struct FUniqueNetId NewId );
	void ClearLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	void AddLoginChangeDelegate ( struct FScriptDelegate LoginDelegate );
	bool ShowFriendsUI ( unsigned char LocalUserNum );
	bool IsMuted ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool AreAnyFriends ( unsigned char LocalUserNum, struct TArray<struct FFriendsQuery>* Query );
	bool IsFriend ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	unsigned char CanShowPresenceInformation ( unsigned char LocalUserNum );
	unsigned char CanViewPlayerProfiles ( unsigned char LocalUserNum );
	unsigned char CanPurchaseContent ( unsigned char LocalUserNum );
	unsigned char CanDownloadUserContent ( unsigned char LocalUserNum );
	unsigned char CanCommunicate ( unsigned char LocalUserNum );
	unsigned char CanPlayOnline ( unsigned char LocalUserNum );
	bool IsLocalLogin ( unsigned char LocalUserNum );
	bool IsGuestLogin ( unsigned char LocalUserNum );
	struct FString GetPlayerNickname ( unsigned char LocalUserNum );
	bool GetUniquePlayerId ( unsigned char LocalUserNum, struct FUniqueNetId* PlayerID );
	unsigned char GetLoginStatus ( unsigned char LocalUserNum );
	void ClearLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void AddLogoutCompletedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LogoutDelegate );
	void OnLogoutCompleted ( unsigned long bWasSuccessful );
	bool Logout ( unsigned char LocalUserNum );
	void ClearLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void AddLoginFailedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate LoginDelegate );
	void OnLoginFailed ( unsigned char LocalUserNum, unsigned char errorCode );
	bool AutoLogin ( );
	bool Login ( unsigned char LocalUserNum, struct FString LoginName, struct FString Password, unsigned long bWantsLocalOnly );
	bool ShowLoginUI ( unsigned long bShowOnlineOnly );
	void OnFriendsChange ( );
	void OnMutingChange ( );
	void OnLoginCancelled ( );
	void OnLoginChange ( unsigned char LocalUserNum );
};

// Class Engine.OnlinePlayerInterfaceEx
// 0x0020 (0x0080 - 0x0060)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:
	struct FScriptDelegate                             __OnProfileDataChanged__Delegate;                 		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDeviceSelectionComplete__Delegate;            		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UnlockAvatarAward ( unsigned char LocalUserNum, int AvatarItemId );
	bool ShowCustomPlayersUI ( unsigned char LocalUserNum, struct FString Title, struct FString Description, struct TArray<struct FUniqueNetId>* Players );
	bool ShowPlayersUI ( unsigned char LocalUserNum );
	bool ShowFriendsInviteUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	void ClearProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void AddProfileDataChangedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate ProfileDataChangedDelegate );
	void OnProfileDataChanged ( );
	bool UnlockGamerPicture ( unsigned char LocalUserNum, int PictureId );
	bool IsDeviceValid ( int DeviceID, int SizeNeeded );
	int GetDeviceSelectionResults ( unsigned char LocalUserNum, struct FString* DeviceName );
	void ClearDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void AddDeviceSelectionDoneDelegate ( unsigned char LocalUserNum, struct FScriptDelegate DeviceDelegate );
	void OnDeviceSelectionComplete ( unsigned long bWasSuccessful, unsigned long bWasBlocked );
	bool ShowDeviceSelectionUI ( unsigned char LocalUserNum, int SizeNeeded, unsigned long bForceShowUI, unsigned long bManageStorage );
	bool ShowMembershipMarketplaceUI ( unsigned char LocalUserNum );
	bool ShowContentMarketplaceUI ( unsigned char LocalUserNum, int CategoryMask, int offerId );
	bool ShowInviteUI ( unsigned char LocalUserNum, struct FString InviteText );
	bool ShowAchievementsUI ( unsigned char LocalUserNum );
	bool ShowMessagesUI ( unsigned char LocalUserNum );
	bool ShowGamerCardUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool ShowFeedbackUI ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
};

// Class Engine.OnlineSystemInterface
// 0x0060 (0x00C0 - 0x0060)
class UOnlineSystemInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnExternalUIChange__Delegate;                   		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnControllerChange__Delegate;                   		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnConnectionStatusChange__Delegate;             		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStorageDeviceChange__Delegate;                		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;              		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnLinkStatusChange__Delegate;                   		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	unsigned char GetTitleFileState ( struct FString Filename );
	bool GetTitleFileContents ( struct FString Filename, struct TArray<unsigned char>* FileContents );
	void ClearReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	void AddReadTitleFileCompleteDelegate ( struct FScriptDelegate ReadTitleFileCompleteDelegate );
	bool ReadTitleFile ( struct FString FileToRead );
	void OnReadTitleFileComplete ( unsigned long bWasSuccessful, struct FString Filename );
	void ClearStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void AddStorageDeviceChangeDelegate ( struct FScriptDelegate StorageDeviceChangeDelegate );
	void OnStorageDeviceChange ( );
	unsigned char GetNATType ( );
	void ClearConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void AddConnectionStatusChangeDelegate ( struct FScriptDelegate ConnectionStatusDelegate );
	void OnConnectionStatusChange ( unsigned char ConnectionStatus );
	bool IsControllerConnected ( int ControllerId );
	void ClearControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void AddControllerChangeDelegate ( struct FScriptDelegate ControllerChangeDelegate );
	void OnControllerChange ( int ControllerId, unsigned long bIsConnected );
	void SetNetworkNotificationPosition ( unsigned char NewPos );
	unsigned char GetNetworkNotificationPosition ( );
	void ClearExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void AddExternalUIChangeDelegate ( struct FScriptDelegate ExternalUIDelegate );
	void OnExternalUIChange ( unsigned long bIsOpening );
	void ClearLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void AddLinkStatusChangeDelegate ( struct FScriptDelegate LinkStatusDelegate );
	void OnLinkStatusChange ( unsigned long bIsConnected );
	bool HasLinkConnection ( );
};

// Class Engine.OnlineGameInterface
// 0x00D0 (0x0130 - 0x0060)
class UOnlineGameInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnRegisterPlayerComplete__Delegate;             		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUpdateOnlineGameComplete__Delegate;           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDestroyOnlineGameComplete__Delegate;          		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnFindOnlineGamesComplete__Delegate;            		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCancelFindOnlineGamesComplete__Delegate;      		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnJoinOnlineGameComplete__Delegate;             		// 0x00B0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnCreateOnlineGameComplete__Delegate;           		// 0x00C0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUnregisterPlayerComplete__Delegate;           		// 0x00D0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnStartOnlineGameComplete__Delegate;            		// 0x00E0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnEndOnlineGameComplete__Delegate;              		// 0x00F0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnArbitrationRegistrationComplete__Delegate;    		// 0x0100 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGameInviteAccepted__Delegate;                 		// 0x0110 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQuickMatchComplete__Delegate;                 		// 0x0120 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClearQuickMatchCompleteDelegate ( struct FScriptDelegate QuickMatchCompleteDelegate );
	void AddQuickMatchCompleteDelegate ( struct FScriptDelegate QuickMatchCompleteDelegate );
	void OnQuickMatchComplete ( unsigned char Result );
	bool QuickMatch ( class UOnlineGameSettings* quickMatchSettings );
	bool ForceCleanUp ( );
	bool RecalculateSkillRating ( struct FName SessionName, struct TArray<struct FUniqueNetId>* Players );
	bool AcceptGameInvite ( unsigned char LocalUserNum, struct FName SessionName );
	void ClearGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void AddGameInviteAcceptedDelegate ( unsigned char LocalUserNum, struct FScriptDelegate GameInviteAcceptedDelegate );
	void OnGameInviteAccepted ( struct FOnlineGameSearchResult* InviteResult );
	struct TArray<struct FOnlineArbitrationRegistrant> GetArbitratedPlayers ( struct FName SessionName );
	void ClearArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void AddArbitrationRegistrationCompleteDelegate ( struct FScriptDelegate ArbitrationRegistrationCompleteDelegate );
	void OnArbitrationRegistrationComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool RegisterForArbitration ( struct FName SessionName );
	void ClearEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void AddEndOnlineGameCompleteDelegate ( struct FScriptDelegate EndOnlineGameCompleteDelegate );
	void OnEndOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool EndOnlineGame ( struct FName SessionName );
	void ClearStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void AddStartOnlineGameCompleteDelegate ( struct FScriptDelegate StartOnlineGameCompleteDelegate );
	void OnStartOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool StartOnlineGame ( struct FName SessionName );
	void ClearUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void AddUnregisterPlayerCompleteDelegate ( struct FScriptDelegate UnregisterPlayerCompleteDelegate );
	void OnUnregisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool UnregisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID );
	void ClearRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void AddRegisterPlayerCompleteDelegate ( struct FScriptDelegate RegisterPlayerCompleteDelegate );
	void OnRegisterPlayerComplete ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasSuccessful );
	bool RegisterPlayer ( struct FName SessionName, struct FUniqueNetId PlayerID, unsigned long bWasInvited );
	bool GetResolvedConnectString ( struct FName SessionName, struct FString* ConnectInfo );
	void ClearJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void AddJoinOnlineGameCompleteDelegate ( struct FScriptDelegate JoinOnlineGameCompleteDelegate );
	void OnJoinOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool JoinOnlineGame ( unsigned char PlayerNum, struct FName SessionName, struct FOnlineGameSearchResult* DesiredGame );
	bool QueryNonAdvertisedData ( int StartAt, int NumberToQuery );
	bool FreeSearchResults ( class UOnlineGameSearch* Search );
	class UOnlineGameSearch* GetGameSearch ( );
	bool BindPlatformSpecificSessionToSearch ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfoBySessionName ( struct FName SessionName, unsigned char* PlatformSpecificInfo );
	bool ReadPlatformSpecificSessionInfo ( struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo );
	void ClearCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void AddCancelFindOnlineGamesCompleteDelegate ( struct FScriptDelegate CancelFindOnlineGamesCompleteDelegate );
	void OnCancelFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool CancelFindOnlineGames ( );
	void ClearFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void AddFindOnlineGamesCompleteDelegate ( struct FScriptDelegate FindOnlineGamesCompleteDelegate );
	void OnFindOnlineGamesComplete ( unsigned long bWasSuccessful );
	bool FindOnlineGames ( unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings );
	void ClearDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void AddDestroyOnlineGameCompleteDelegate ( struct FScriptDelegate DestroyOnlineGameCompleteDelegate );
	void OnDestroyOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool DestroyOnlineGame ( struct FName SessionName );
	class UOnlineGameSettings* GetGameSettings ( struct FName SessionName );
	void ClearUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void AddUpdateOnlineGameCompleteDelegate ( struct FScriptDelegate UpdateOnlineGameCompleteDelegate );
	void OnUpdateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool UpdateOnlineGame ( struct FName SessionName, class UOnlineGameSettings* UpdatedGameSettings, unsigned long bShouldRefreshOnlineData );
	void ClearCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void AddCreateOnlineGameCompleteDelegate ( struct FScriptDelegate CreateOnlineGameCompleteDelegate );
	void OnCreateOnlineGameComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool CreateOnlineGame ( unsigned char HostingPlayerNum, struct FName SessionName, class UOnlineGameSettings* NewGameSettings );
};

// Class Engine.OnlineContentInterface
// 0x0030 (0x0090 - 0x0060)
class UOnlineContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadContentComplete__Delegate;                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnQueryAvailableDownloadsComplete__Delegate;    		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnContentChange__Delegate;                      		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void GetAvailableDownloadCounts ( unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads );
	void ClearQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void AddQueryAvailableDownloadsComplete ( unsigned char LocalUserNum, struct FScriptDelegate QueryDownloadsDelegate );
	void OnQueryAvailableDownloadsComplete ( unsigned long bWasSuccessful );
	bool QueryAvailableDownloads ( unsigned char LocalUserNum, int CategoryMask );
	unsigned char GetContentList ( unsigned char LocalUserNum, struct TArray<struct FOnlineContent>* ContentList );
	bool ReadContentList ( unsigned char LocalUserNum );
	void ClearReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void AddReadContentComplete ( unsigned char LocalUserNum, struct FScriptDelegate ReadContentCompleteDelegate );
	void OnReadContentComplete ( unsigned long bWasSuccessful );
	void ClearContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void AddContentChangeDelegate ( struct FScriptDelegate ContentDelegate, unsigned char LocalUserNum );
	void OnContentChange ( );
};

// Class Engine.OnlineVoiceInterface
// 0x0020 (0x0080 - 0x0060)
class UOnlineVoiceInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnRecognitionComplete__Delegate;                		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnPlayerTalkingStateChange__Delegate;           		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UnmuteAll ( unsigned char LocalUserNum );
	bool MuteAll ( unsigned char LocalUserNum, unsigned long bAllowFriends );
	bool SetSpeechRecognitionObject ( unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj );
	bool SelectVocabulary ( unsigned char LocalUserNum, int VocabularyId );
	void ClearRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void AddRecognitionCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate RecognitionDelegate );
	void OnRecognitionComplete ( );
	bool GetRecognitionResults ( unsigned char LocalUserNum, struct TArray<struct FSpeechRecognizedWord>* Words );
	bool StopSpeechRecognition ( unsigned char LocalUserNum );
	bool StartSpeechRecognition ( unsigned char LocalUserNum );
	void StopNetworkedVoice ( unsigned char LocalUserNum );
	void StartNetworkedVoice ( unsigned char LocalUserNum );
	void ClearPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void AddPlayerTalkingDelegate ( struct FScriptDelegate TalkerDelegate );
	void OnPlayerTalkingStateChange ( struct FUniqueNetId Player, unsigned long bIsTalking );
	bool UnmuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool MuteRemoteTalker ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID );
	bool SetRemoteTalkerPriority ( unsigned char LocalUserNum, struct FUniqueNetId PlayerID, int Priority );
	bool IsHeadsetPresent ( unsigned char LocalUserNum );
	bool IsRemotePlayerTalking ( struct FUniqueNetId PlayerID );
	bool IsLocalPlayerTalking ( unsigned char LocalUserNum );
	bool UnregisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool RegisterRemoteTalker ( struct FUniqueNetId PlayerID );
	bool UnregisterLocalTalker ( unsigned char LocalUserNum );
	bool RegisterLocalTalker ( unsigned char LocalUserNum );
};

// Class Engine.OnlineStatsInterface
// 0x0030 (0x0090 - 0x0060)
class UOnlineStatsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnFlushOnlineStatsComplete__Delegate;           		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnRegisterHostStatGuidComplete__Delegate;       		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadOnlineStatsComplete__Delegate;            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool RegisterStatGuid ( struct FUniqueNetId PlayerID, struct FString* ClientStatGuid );
	struct FString GetClientStatGuid ( );
	void ClearRegisterHostStatGuidCompleteDelegateDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void AddRegisterHostStatGuidCompleteDelegate ( struct FScriptDelegate RegisterHostStatGuidCompleteDelegate );
	void OnRegisterHostStatGuidComplete ( unsigned long bWasSuccessful );
	bool RegisterHostStatGuid ( struct FString* HostStatGuid );
	struct FString GetHostStatGuid ( );
	bool WriteOnlinePlayerScores ( struct FName SessionName, int LeaderboardId, struct TArray<struct FOnlinePlayerScore>* PlayerScores );
	void ClearFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void AddFlushOnlineStatsCompleteDelegate ( struct FScriptDelegate FlushOnlineStatsCompleteDelegate );
	void OnFlushOnlineStatsComplete ( struct FName SessionName, unsigned long bWasSuccessful );
	bool FlushOnlineStats ( struct FName SessionName );
	bool WriteOnlineStats ( struct FName SessionName, struct FUniqueNetId Player, class UOnlineStatsWrite* StatsWrite );
	void FreeStats ( class UOnlineStatsRead* StatsRead );
	void ClearReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void AddReadOnlineStatsCompleteDelegate ( struct FScriptDelegate ReadOnlineStatsCompleteDelegate );
	void OnReadOnlineStatsComplete ( unsigned long bWasSuccessful );
	bool ReadOnlineStatsByRankAroundPlayer ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows );
	bool ReadOnlineStatsByRank ( class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead );
	bool ReadOnlineStatsForFriends ( unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead );
	bool ReadOnlineStats ( class UOnlineStatsRead* StatsRead, struct TArray<struct FUniqueNetId>* Players );
};

// Class Engine.OnlineNewsInterface
// 0x0010 (0x0070 - 0x0060)
class UOnlineNewsInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadNewsCompleted__Delegate;                  		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetNews ( unsigned char LocalUserNum, unsigned char NewsType );
	void ClearReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void AddReadNewsCompletedDelegate ( struct FScriptDelegate ReadNewsDelegate );
	void OnReadNewsCompleted ( unsigned long bWasSuccessful, unsigned char NewsType );
	bool ReadNews ( unsigned char LocalUserNum, unsigned char NewsType );
};

// Class Engine.OnlinePartyChatInterface
// 0x0010 (0x0070 - 0x0060)
class UOnlinePartyChatInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnSendPartyGameInvitesComplete__Delegate;       		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool ShowCommunitySessionsUI ( unsigned char LocalUserNum );
	bool ShowVoiceChannelUI ( unsigned char LocalUserNum );
	bool ShowPartyUI ( unsigned char LocalUserNum );
	int GetPartyBandwidth ( );
	bool SetPartyMemberCustomData ( unsigned char LocalUserNum, struct FQWord Data1, struct FQWord Data2 );
	bool GetPartyMemberInformation ( struct TArray<struct FOnlinePartyMember>* PartyMembers );
	void ClearSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void AddSendPartyGameInvitesCompleteDelegate ( unsigned char LocalUserNum, struct FScriptDelegate SendPartyGameInvitesCompleteDelegate );
	void OnSendPartyGameInvitesComplete ( unsigned long bWasSuccessful );
	bool SendPartyGameInvites ( unsigned char LocalUserNum );
};

// Class Engine.CoverReplicator
// 0x0010 (0x0280 - 0x0270)
class ACoverReplicator : public AReplicationInfo
{
public:
	struct TArray<struct FCoverReplicationInfo>        CoverReplicationData;                             		// 0x0270 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ClientReceiveLinkDisabledState ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled );
	void ServerSendLinkDisabledState ( int Index );
	void NotifyLinkDisabledStateChange ( class ACoverLink* Link );
	void ClientReceiveManualCoverTypeSlots ( int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendManualCoverTypeSlots ( int Index );
	void NotifySetManualCoverTypeForSlots ( class ACoverLink* Link, unsigned char NewCoverType, struct TArray<int>* SlotIndices );
	void ClientReceiveAdjustedSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned long bDone );
	void ServerSendAdjustedSlots ( int Index );
	void NotifyAutoAdjustSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices );
	void ClientReceiveDisabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned long bDone );
	void ServerSendDisabledSlots ( int Index );
	void NotifyDisabledSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices );
	void ClientReceiveEnabledSlots ( int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned long bDone );
	void ServerSendEnabledSlots ( int Index );
	void NotifyEnabledSlots ( class ACoverLink* Link, struct TArray<int>* SlotIndices );
	void ClientReceiveInitialCoverReplicationInfo ( int Index, class ACoverLink* Link, unsigned long bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char* SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char* SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char* SlotsAdjusted, unsigned char NumCoverTypesChanged, struct FManualCoverTypeInfo* SlotsCoverTypeChanged, unsigned long bDone );
	void ServerSendInitialCoverReplicationInfo ( int Index );
	void ClientSetOwner ( class APlayerController* PC );
	void ReplicateInitialCoverInfo ( );
	void PurgeOldEntries ( );
};

// Class Engine.GameMessage
// 0x0170 (0x01E4 - 0x0074)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x0074 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     LeftMessage;                                      		// 0x0084 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedTeamMessage;                                		// 0x0094 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedPlaceMessage;                               		// 0x00A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     FailedSpawnMessage;                               		// 0x00B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     EnteredMessage;                                   		// 0x00C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MaxedOutMessage;                                  		// 0x00D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     ArbitrationMessage;                               		// 0x00E4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     OvertimeMessage;                                  		// 0x00F4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     GlobalNameChange;                                 		// 0x0104 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessage;                                   		// 0x0114 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewTeamMessageTrailer;                            		// 0x0124 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NoNameChange;                                     		// 0x0134 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VoteStarted;                                      		// 0x0144 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     VotePassed;                                       		// 0x0154 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     MustHaveStats;                                    		// 0x0164 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBeSpectator;                                  		// 0x0174 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CantBePlayer;                                     		// 0x0184 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     BecameSpectator;                                  		// 0x0194 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewPlayerMessage;                                 		// 0x01A4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     KickWarning;                                      		// 0x01B4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     NewSpecMessage;                                   		// 0x01C4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     SpecEnteredMessage;                               		// 0x01D4 (0x0010) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
};

// Class Engine.Scoreboard
// 0x0004 (0x05AC - 0x05A8)
class AScoreboard : public AHUD
{
public:
	unsigned long                                      bDisplayMessages : 1;                             		// 0x05A8 (0x0004) [0x0000000000000000] [0x00000001] 

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void ChangeState ( unsigned long bIsVisible );
	void UpdateScoreBoard ( );
	bool UpdateGRI ( );
	void DrawHUD ( );
};

// Class Engine.DmgType_Suicided
// 0x0000 (0x00C0 - 0x00C0)
class UDmgType_Suicided : public UKillZDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bToggleTurning : 1;                               		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
};

// Class Engine.SeqAct_ForceFeedback
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UClass*                                      PredefinedWaveForm;                               		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UForceFeedbackWaveform*                      FFWaveform;                                       		// 0x0100 (0x0008) [0x0000000004000001]              ( CPF_Edit | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                             		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bDisableTurning : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bHidePlayer : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bDisableInput : 1;                                		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )
	unsigned long                                      bHideHUD : 1;                                     		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000010] ( CPF_Edit )
	unsigned long                                      bDeadBodies : 1;                                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000020] ( CPF_Edit )
	unsigned long                                      bDroppedPickups : 1;                              		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000040] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsValidUISequenceObject ( class UUIScreenObject* TargetObject );
	void eventActivated ( );
};

// Class Engine.SeqAct_ConsoleCommand
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                          		// 0x00F8 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FString>                      Commands;                                         		// 0x0108 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void VersionUpdated ( int OldVersion, int NewVersion );
};

// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetSoundMode
// 0x000C (0x0104 - 0x00F8)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                        		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bTopPriority : 1;                                 		// 0x0100 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
	void eventActivated ( );
};

// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0038 (0x0098 - 0x0060)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	struct FString                                     GroupName;                                        		// 0x0060 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FString                                     AnimName;                                         		// 0x0070 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                 		// 0x0080 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   SoundCueToPlay;                                   		// 0x0088 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	float                                              PlayFrequency;                                    		// 0x0090 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverridePlayingAnim : 1;                         		// 0x0094 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventNotify ( class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator );
};

// Class Engine.BioLineBloomEffect
// 0x0063 (0x00E8 - 0x0085)
class UBioLineBloomEffect : public UPostProcessEffect
{
public:
	struct FBioFlareParameters                         BaseFlare;                                        		// 0x0088 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	struct FBioFlareParameters                         OverrideFlare;                                    		// 0x00B4 (0x002C) [0x0000000000000001]              ( CPF_Edit )
	float                                              BlurScale;                                        		// 0x00E0 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	int                                                BlurWidth;                                        		// 0x00E4 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.BroadcastHandler
// 0x0008 (0x0278 - 0x0270)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                         		// 0x0270 (0x0004) [0x0000000000000000]              
	unsigned long                                      bMuteSpectators : 1;                              		// 0x0274 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventAllowBroadcastLocalizedTeam ( int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type );
	void Broadcast ( class AActor* Sender, struct FString Msg, struct FName Type );
	void BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	void BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString Msg, struct FName Type );
	bool AllowsBroadcast ( class AActor* broadcaster, int InLen );
	void UpdateSentText ( );
};

// Class Engine.ColorScaleVolume
// 0x0010 (0x02C4 - 0x02B4)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                       		// 0x02B4 (0x000C) [0x0000000000000001]              ( CPF_Edit )
	float                                              InterpTime;                                       		// 0x02C0 (0x0004) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventUnTouch ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class Engine.DebugCameraHUD
// 0x0000 (0x05A8 - 0x05A8)
class ADebugCameraHUD : public AHUD
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPostRender ( );
	bool DisplayMaterials ( float X, float DY, class UMeshComponent* MeshComp, float* Y );
	void eventPostBeginPlay ( );
};

// Class Engine.DebugCameraInput
// 0x0001 (0x0204 - 0x0203)
class UDebugCameraInput : public UPlayerInput
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool InputKey ( int ControllerId, struct FName Key, unsigned char Event, float AmountDepressed, unsigned long bGamepad );
};

// Class Engine.VolumeTimer
// 0x0008 (0x0278 - 0x0270)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                		// 0x0270 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTimer ( );
	void eventPostBeginPlay ( );
};

// Class Engine.SeqAct_SetDamageInstigator
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                 		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DmgType_Crushed
// 0x0000 (0x00C0 - 0x00C0)
class UDmgType_Crushed : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DmgType_Fell
// 0x0000 (0x00C0 - 0x00C0)
class UDmgType_Fell : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DmgType_Telefragged
// 0x0000 (0x00C0 - 0x00C0)
class UDmgType_Telefragged : public UDamageType
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DynamicPhysicsVolume
// 0x0004 (0x0308 - 0x0304)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0304 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPostBeginPlay ( );
};

// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x02B8 - 0x02B8)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.DynamicTriggerVolume
// 0x0004 (0x02B8 - 0x02B4)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x02B4 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPostBeginPlay ( );
};

// Class Engine.SeqAct_SetParticleSysParam
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	struct TArray<struct FParticleSysParam>            InstanceParameters;                               		// 0x00F8 (0x0010) [0x0000000004480009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_NeedCtorLink | CPF_EditInline )
	float                                              ScalarValue;                                      		// 0x0108 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOverrideScalar : 1;                              		// 0x010C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.FailedConnect
// 0x0040 (0x00B4 - 0x0074)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[ 0x4 ];                               		// 0x0074 (0x0040) [0x0000000000408002]              ( CPF_Const | CPF_Localized | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString GetString ( int Switch, unsigned long bPRI1HUD, class APlayerReplicationInfo* RelatedPRI, class APlayerReplicationInfo* RelatedPRI01, class UObject* OptionalObject );
	int GetFailSwitch ( struct FString FailString );
};

// Class Engine.FracturedSMActorSpawnable
// 0x0000 (0x0304 - 0x0304)
class AFracturedSMActorSpawnable : public AFracturedStaticMeshActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_PlayerSpawned
// 0x000A (0x0130 - 0x0126)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                       		// 0x0128 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIMessageBoxBase
// 0x0074 (0x06F0 - 0x067C)
class UUIMessageBoxBase : public UUIScene
{
public:
	struct FScriptDelegate                             __OnOptionSelected__Delegate;                     		// 0x067C (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	class UUILabel*                                    lblTitle;                                         		// 0x068C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUILabel*                                    lblMessage;                                       		// 0x0694 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUILabel*                                    lblQuestion;                                      		// 0x069C (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUIImage*                                    imgQuestion;                                      		// 0x06A4 (0x0008) [0x0000000000002000]              ( CPF_Transient )
	class UUICalloutButtonPanel*                       btnbarChoices;                                    		// 0x06AC (0x0008) [0x0000000000002000]              ( CPF_Transient )
	struct FName                                       TitleWidgetName;                                  		// 0x06B4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       MessageWidgetName;                                		// 0x06BC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       QuestionWidgetName;                               		// 0x06C4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ChoicesWidgetName;                                		// 0x06CC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       QuestionWidgetImageName;                          		// 0x06D4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ButtonBarButtonBGStyleName;                       		// 0x06DC (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ButtonBarButtonTextStyleName;                     		// 0x06E4 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bPerformAutomaticLayout : 1;                      		// 0x06EC (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void HandleSceneActivated ( class UUIScene* ActivatedScene, unsigned long bInitialActivation );
	bool OptionChosen ( class UUIScreenObject* EventObject, int PlayerIndex );
	void SetupDockingRelationships ( );
	void LayoutControls ( );
	class UUICalloutButtonPanel* GetButtonBar ( );
	class UUILabel* GetMessageLabel ( );
	class UUILabel* GetTitleLabel ( );
	int FindButtonIndex ( struct FName ButtonAlias );
	bool HasButton ( struct FName ButtonAlias );
	bool RemoveButton ( struct FName ButtonAlias );
	bool AddButton ( struct FName ButtonAlias );
	void SetButtonCallback ( class UUICalloutButton* TargetButton );
	void SetQuestion ( struct FString NewMessageString );
	void SetMessage ( struct FString NewMessageString );
	void SetTitle ( struct FString NewTitleString );
	void SetupMessageBox ( struct FString Title, struct FString Message, struct FString Question, struct TArray<struct FName> ButtonAliases, struct FScriptDelegate SelectionCallback );
	bool OnOptionSelected ( class UUIMessageBoxBase* Sender, struct FName SelectedInputAlias, int PlayerIndex );
};

// Class Engine.UIMessageBox
// 0x0000 (0x06F0 - 0x06F0)
class UUIMessageBox : public UUIMessageBoxBase
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void SetupDockingRelationships ( );
};

// Class Engine.HeightFog
// 0x000C (0x027C - 0x0270)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                        		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )
	unsigned long                                      bEnabled : 1;                                     		// 0x0278 (0x0004) [0x0000000100000020] [0x00000001] ( CPF_Net | CPF_RepNotify )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void OnToggle ( class USeqAct_Toggle* Action );
	void eventReplicatedEvent ( struct FName VarName );
	void eventPostBeginPlay ( );
};

// Class Engine.InterpActor_ForCinematic
// 0x0000 (0x0304 - 0x0304)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AssignController
// 0x0008 (0x0100 - 0x00F8)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_GiveInventory
// 0x0014 (0x010C - 0x00F8)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	struct TArray<class UClass*>                       InventoryList;                                    		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	unsigned long                                      bClearExisting : 1;                               		// 0x0108 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bForceReplace : 1;                                		// 0x0108 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.NavMeshBoundsVolume
// 0x0000 (0x02B4 - 0x02B4)
class ANavMeshBoundsVolume : public AVolume
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.OnlineCommunityContentInterface
// 0x0050 (0x00B0 - 0x0060)
class UOnlineCommunityContentInterface : public UInterface
{
public:
	struct FScriptDelegate                             __OnReadFriendsContentListComplete__Delegate;     		// 0x0060 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnUploadContentComplete__Delegate;              		// 0x0070 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnDownloadContentComplete__Delegate;            		// 0x0080 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnGetContentPayloadComplete__Delegate;          		// 0x0090 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct FScriptDelegate                             __OnReadContentListComplete__Delegate;            		// 0x00A0 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void RateContent ( unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate );
	void ClearGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void AddGetContentPayloadCompleteDelegate ( struct FScriptDelegate GetContentPayloadCompleteDelegate );
	void OnGetContentPayloadComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded, struct TArray<unsigned char>* Payload );
	bool GetContentPayload ( unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded );
	void ClearDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void AddDownloadContentCompleteDelegate ( struct FScriptDelegate DownloadContentCompleteDelegate );
	void OnDownloadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile FileDownloaded );
	bool DownloadContent ( unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload );
	void ClearUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void AddUploadContentCompleteDelegate ( struct FScriptDelegate UploadContentCompleteDelegate );
	void OnUploadContentComplete ( unsigned long bWasSuccessful, struct FCommunityContentFile UploadedFile );
	bool UploadContent ( unsigned char PlayerNum, struct TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData );
	bool GetFriendsContentList ( unsigned char PlayerNum, struct FOnlineFriend* Friend, struct TArray<struct FCommunityContentFile>* ContentFiles );
	void ClearReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void AddReadFriendsContentListCompleteDelegate ( struct FScriptDelegate ReadFriendsContentListCompleteDelegate );
	void OnReadFriendsContentListComplete ( unsigned long bWasSuccessful );
	bool ReadFriendsContentList ( unsigned char PlayerNum, int StartAt, int NumToRead, struct TArray<struct FOnlineFriend>* Friends );
	bool GetContentList ( unsigned char PlayerNum, struct TArray<struct FCommunityContentFile>* ContentFiles );
	void ClearReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void AddReadContentListCompleteDelegate ( struct FScriptDelegate ReadContentListCompleteDelegate );
	void OnReadContentListComplete ( unsigned long bWasSuccessful );
	bool ReadContentList ( unsigned char PlayerNum, int StartAt, int NumToRead );
	void Exit ( );
	bool Init ( );
};

// Class Engine.OnlineEventsInterface
// 0x0000 (0x0060 - 0x0060)
class UOnlineEventsInterface : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool UploadHardwareData ( struct FUniqueNetId UniqueId, struct FString PlayerNick );
	bool UploadGameplayEventsData ( class UOnlineGameplayEvents* Events );
	bool UploadProfileData ( struct FUniqueNetId UniqueId, struct FString PlayerNick, class UOnlineProfileSettings* ProfileSettings );
};

// Class Engine.OnlinePlaylistGameTypeProvider
// 0x002C (0x00E4 - 0x00B8)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FString                                     DisplayName;                                      		// 0x00B8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     Description;                                      		// 0x00C8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FName                                       PlaylistGameTypeName;                             		// 0x00D8 (0x0008) [0x0000000000004000]              ( CPF_Config )
	int                                                GameTypeId;                                       		// 0x00E0 (0x0004) [0x0000000000004000]              ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.OnlinePlaylistProvider
// 0x002C (0x00E4 - 0x00B8)
class UOnlinePlaylistProvider : public UUIResourceDataProvider
{
public:
	struct TArray<struct FName>                        PlaylistGameTypeNames;                            		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     DisplayName;                                      		// 0x00C8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	int                                                PlaylistId;                                       		// 0x00D8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                Priority;                                         		// 0x00DC (0x0004) [0x0000000000004000]              ( CPF_Config )
	unsigned long                                      bIsArbitrated : 1;                                		// 0x00E0 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.OnlineRecentPlayersList
// 0x0058 (0x00B8 - 0x0060)
class UOnlineRecentPlayersList : public UObject
{
public:
	struct FRecentParty                                LastParty;                                        		// 0x0060 (0x0018) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FUniqueNetId>                 RecentPlayers;                                    		// 0x0078 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FRecentParty>                 RecentParties;                                    		// 0x0088 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	struct TArray<struct FCurrentPlayerMet>            CurrentPlayers;                                   		// 0x0098 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )
	int                                                MaxRecentPlayers;                                 		// 0x00A8 (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                MaxRecentParties;                                 		// 0x00AC (0x0004) [0x0000000000004000]              ( CPF_Config )
	int                                                RecentPlayersAddIndex;                            		// 0x00B0 (0x0004) [0x0000000000000000]              
	int                                                RecentPartiesAddIndex;                            		// 0x00B4 (0x0004) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int GetCurrentPlayersListCount ( );
	void SetCurrentPlayersList ( struct TArray<struct FCurrentPlayerMet> Players );
	void DumpPlayersList ( struct TArray<struct FCurrentPlayerMet>* Players );
	bool ShowCurrentPlayersList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowLastPartyPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPartiesPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	bool ShowRecentPlayerList ( unsigned char LocalUserNum, struct FString Title, struct FString Description );
	void SetLastParty ( struct FUniqueNetId PartyLeader, struct TArray<struct FUniqueNetId>* PartyMembers );
	int GetTeamForCurrentPlayer ( struct FUniqueNetId Player );
	int GetSkillForCurrentPlayer ( struct FUniqueNetId Player );
	void GetPlayersFromCurrentPlayers ( struct TArray<struct FUniqueNetId>* Players );
	void GetPlayersFromRecentParties ( struct TArray<struct FUniqueNetId>* Players );
	void ClearRecentParties ( );
	void AddPartyToRecentParties ( struct FUniqueNetId PartyLeader, struct TArray<struct FUniqueNetId>* PartyMembers );
	void ClearRecentPlayers ( );
	void AddPlayerToRecentPlayers ( struct FUniqueNetId NewPlayer );
};

// Class Engine.PathNode_Dynamic
// 0x0000 (0x0374 - 0x0374)
class APathNode_Dynamic : public APathNode
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	struct FString eventGetDebugAbbrev ( );
};

// Class Engine.SeqEvent_PickupStatusChange
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RadialBlurActor
// 0x000A (0x0278 - 0x026E)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                       		// 0x0270 (0x0008) [0x0000000004080009]              ( CPF_Edit | CPF_ExportObject | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_ToggleConstraintDrive
// 0x0004 (0x00FC - 0x00F8)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	unsigned long                                      bEnableAngularPositionDrive : 1;                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )
	unsigned long                                      bEnableAngularVelocityDrive : 1;                  		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000002] ( CPF_Edit )
	unsigned long                                      bEnableLinearPositionDrive : 1;                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000004] ( CPF_Edit )
	unsigned long                                      bEnableLinearvelocityDrive : 1;                   		// 0x00F8 (0x0004) [0x0000000000000001] [0x00000008] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_BSJointActor
// 0x0000 (0x02A4 - 0x02A4)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x02A4 - 0x02A4)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_HingeActor
// 0x0000 (0x02A4 - 0x02A4)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_PrismaticActor
// 0x0000 (0x02A4 - 0x02A4)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.RB_PulleyJointActor
// 0x0000 (0x02A4 - 0x02A4)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AddRemoveFaceFXAnimSet
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetMatInstTexParam
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00F8 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UTexture*                                    NewTexture;                                       		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetMatInstVectorParam
// 0x0020 (0x0118 - 0x00F8)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	struct FLinearColor                                VectorValue;                                      		// 0x00F8 (0x0010) [0x0000000000000001]              ( CPF_Edit )
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	struct FName                                       ParamName;                                        		// 0x0110 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqAct_SetName
// 0x0010 (0x0108 - 0x00F8)
class USeqAct_SetName : public USeqAct_SetSequenceVariable
{
public:
	struct FName                                       Target;                                           		// 0x00F8 (0x0008) [0x0000000000000000]              
	struct FName                                       Value;                                            		// 0x0100 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void Activated ( );
};

// Class Engine.SeqAct_SetSkelControlTarget
// 0x0018 (0x0110 - 0x00F8)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	struct TArray<class UObject*>                      TargetActors;                                     		// 0x00F8 (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )
	struct FName                                       SkelControlName;                                  		// 0x0108 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqAct_SetVector
// 0x000C (0x0104 - 0x00F8)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                     		// 0x00F8 (0x000C) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventActivated ( );
};

// Class Engine.SeqAct_UpdatePhysBonesFromAnim
// 0x0000 (0x00F8 - 0x00F8)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SeqEvent_AIReachedRouteActor
// 0x0002 (0x0128 - 0x0126)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqEvent_LOS
// 0x000E (0x0134 - 0x0126)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                             		// 0x0128 (0x0004) [0x0000000000000001]              ( CPF_Edit )
	float                                              TriggerDistance;                                  		// 0x012C (0x0004) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bCheckForObstructions : 1;                        		// 0x0130 (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventPreVersionUpdated ( int OldVersion, int NewVersion );
	int eventGetObjClassVersion ( );
};

// Class Engine.SeqVar_Byte
// 0x0000 (0x0090 - 0x0090)
class USeqVar_Byte : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_Union
// 0x0000 (0x0090 - 0x0090)
class USeqVar_Union : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SeqVar_UniqueNetId
// 0x0000 (0x0090 - 0x0090)
class USeqVar_UniqueNetId : public USequenceVariable
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UISettingsClient
// 0x0000 (0x0060 - 0x0060)
class UUISettingsClient : public UInterface
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SessionSettingsProvider_GameInfo
// 0x0000 (0x00C4 - 0x00C4)
class USessionSettingsProvider_GameInfo : public USessionSettingsProvider
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.SFXSeqAct_SetAimTarget
// 0x0008 (0x0100 - 0x00F8)
class USFXSeqAct_SetAimTarget : public USequenceAction
{
public:
	class AActor*                                      AimTarget;                                        		// 0x00F8 (0x0008) [0x0000000000000000]              

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	int eventGetObjClassVersion ( );
};

// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x02D4 - 0x02D4)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Trigger_Dynamic
// 0x0000 (0x0280 - 0x0280)
class ATrigger_Dynamic : public ATrigger
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.Trigger_LOS
// 0x0010 (0x0290 - 0x0280)
class ATrigger_LOS : public ATrigger
{
public:
	struct TArray<class APlayerController*>            PCsWithLOS;                                       		// 0x0280 (0x0010) [0x0000000000400000]              ( CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTick ( float DeltaTime );
};

// Class Engine.TriggeredPath
// 0x000C (0x0380 - 0x0374)
class ATriggeredPath : public ANavigationPoint
{
public:
	class AActor*                                      MyTrigger;                                        		// 0x0374 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	unsigned long                                      bOpen : 1;                                        		// 0x037C (0x0004) [0x0000000000000001] [0x00000001] ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventSuggestMovePreparation ( class APawn* Other );
	class AActor* eventSpecialHandling ( class APawn* Other );
	void OnToggle ( class USeqAct_Toggle* inAction );
};

// Class Engine.TriggerStreamingLevel
// 0x0010 (0x0290 - 0x0280)
class ATriggerStreamingLevel : public ATrigger
{
public:
	struct TArray<struct FLevelStreamingData>          Levels;                                           		// 0x0280 (0x0010) [0x0000000004400001]              ( CPF_Edit | CPF_NeedCtorLink | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class Engine.UIAction_ConsoleCommand
// 0x0010 (0x010C - 0x00FC)
class UUIAction_ConsoleCommand : public UUIAction
{
public:
	struct FString                                     Command;                                          		// 0x00FC (0x0010) [0x0000000000400001]              ( CPF_Edit | CPF_NeedCtorLink )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UIEvent_Initialized
// 0x0000 (0x0160 - 0x0160)
class UUIEvent_Initialized : public UUIEvent
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};

// Class Engine.UICharacterSummary
// 0x0034 (0x00EC - 0x00B8)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     CharacterName;                                    		// 0x00C8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     CharacterBio;                                     		// 0x00D8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsProviderDisabled ( );
};

// Class Engine.UIFocusHint
// 0x0000 (0x0578 - 0x0578)
class UUIFocusHint : public UUILabel
{
public:

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void eventRemovedFromParent ( class UUIScreenObject* WidgetOwner );
};

// Class Engine.UIWeaponSummary
// 0x0034 (0x00EC - 0x00B8)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                    		// 0x00B8 (0x0010) [0x0000000000404000]              ( CPF_Config | CPF_NeedCtorLink )
	struct FString                                     FriendlyName;                                     		// 0x00C8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	struct FString                                     WeaponDescription;                                		// 0x00D8 (0x0010) [0x000000000040C002]              ( CPF_Const | CPF_Config | CPF_Localized | CPF_NeedCtorLink )
	unsigned long                                      bIsDisabled : 1;                                  		// 0x00E8 (0x0004) [0x0000000000004000] [0x00000001] ( CPF_Config )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	bool eventIsProviderDisabled ( );
};

// Class Engine.WaterVolume
// 0x0028 (0x032C - 0x0304)
class AWaterVolume : public APhysicsVolume
{
public:
	class UClass*                                      EntryActor;                                       		// 0x0304 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      ExitActor;                                        		// 0x030C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class UClass*                                      PawnEntryActor;                                   		// 0x0314 (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   EntrySound;                                       		// 0x031C (0x0008) [0x0000000000000001]              ( CPF_Edit )
	class USoundCue*                                   ExitSound;                                        		// 0x0324 (0x0008) [0x0000000000000001]              ( CPF_Edit )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

	void PlayExitSplash ( class AActor* Other );
	void eventUnTouch ( class AActor* Other );
	void PlayEntrySplash ( class AActor* Other );
	void eventTouch ( class AActor* Other, class UPrimitiveComponent* OtherComp, struct FVector HitLocation, struct FVector HitNormal );
};

// Class Engine.WindDirectionalSource
// 0x0008 (0x0278 - 0x0270)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                        		// 0x0270 (0x0008) [0x00000000040A000B]              ( CPF_Edit | CPF_Const | CPF_ExportObject | CPF_EditConst | CPF_Component | CPF_EditInline )

private:
	static UClass* pClassPointer;

public:
	static UClass* StaticClass();

};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif